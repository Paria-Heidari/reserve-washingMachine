{"version":3,"file":"resize-batch.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-common/dist/es2015/resize-sensor/resize-batch.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Injectable, NgZone } from '@angular/core';\nimport { from as fromPromise } from 'rxjs';\n/**\n * @hidden\n */\nlet ResizeBatchService = class ResizeBatchService {\n    constructor(ngZone) {\n        this.ngZone = ngZone;\n        this.scheduled = [];\n        this.resolvedPromise = Promise.resolve(null);\n        this.flush = this.flush.bind(this);\n    }\n    schedule(instance, method) {\n        this.scheduled.push({ instance, method });\n        if (!this.subscription) {\n            this.ngZone.runOutsideAngular(() => {\n                this.subscription = fromPromise(this.resolvedPromise)\n                    .subscribe(this.flush);\n            });\n        }\n    }\n    isScheduled(instance) {\n        return Boolean(this.scheduled.find(item => item.instance === instance));\n    }\n    cancel(instance) {\n        const scheduled = this.scheduled;\n        const count = scheduled.length;\n        for (let idx = 0; idx < count; idx++) {\n            if (scheduled[idx].instance === instance) {\n                scheduled.splice(idx, 1);\n                if (!scheduled.length) {\n                    this.unsubscribe();\n                }\n                return;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.unsubscribe();\n    }\n    unsubscribe() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = null;\n        }\n    }\n    flush() {\n        this.scheduled.forEach(item => {\n            item.method.call(item.instance);\n        });\n        this.scheduled = [];\n        this.unsubscribe();\n    }\n};\nResizeBatchService = tslib_1.__decorate([\n    Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [NgZone])\n], ResizeBatchService);\nexport { ResizeBatchService };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mOAgDC;yCACwC,AACxB;;;;"}