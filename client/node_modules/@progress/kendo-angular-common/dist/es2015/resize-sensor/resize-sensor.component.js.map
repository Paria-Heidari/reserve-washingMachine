{"version":3,"file":"resize-sensor.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-common/dist/es2015/resize-sensor/resize-sensor.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, EventEmitter, Input, Output, ElementRef, NgZone } from '@angular/core';\nimport { auditTime } from 'rxjs/operators';\nimport { ResizeCompatService } from './compat.service';\nimport { ResizeObserverService } from './observer.service';\nimport { ResizeBatchService } from './resize-batch.service';\n/**\n * Emit up to 10 resize events per second by default.\n * Chosen as a compromise between responsiveness and performance.\n */\nconst DEFAULT_RATE_LIMIT = 10;\n/**\n * Resize Sensor Component\n *\n * Triggers a \"resize\" event whenever the parent DOM element size changes.\n */\nlet ResizeSensorComponent = class ResizeSensorComponent {\n    constructor(resizeBatchService, element, ngZone) {\n        /**\n         * The maximum number of resize events to emit per second.\n         *\n         * Defaults to 10.\n         */\n        this.rateLimit = DEFAULT_RATE_LIMIT;\n        /**\n         * Fires when the parent DOM element has been resized.\n         */\n        this.resize = new EventEmitter();\n        const serviceType = ResizeObserverService.supported() ? ResizeObserverService : ResizeCompatService;\n        this.resizeService = new serviceType(resizeBatchService, element, ngZone);\n        const throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);\n        this.subscription = this.resizeService.resize\n            .pipe(auditTime(throttleTime))\n            .subscribe(() => {\n            if (!this.resizeService.acceptedSize) {\n                this.resize.emit();\n            }\n        });\n    }\n    ngAfterViewChecked() {\n        this.resizeService.checkChanges();\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n        this.resizeService.destroy();\n    }\n    acceptSize(size) {\n        this.resizeService.acceptSize(size);\n    }\n};\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", Number)\n], ResizeSensorComponent.prototype, \"rateLimit\", void 0);\ntslib_1.__decorate([\n    Output(),\n    tslib_1.__metadata(\"design:type\", EventEmitter)\n], ResizeSensorComponent.prototype, \"resize\", void 0);\nResizeSensorComponent = tslib_1.__decorate([\n    Component({\n        selector: 'kendo-resize-sensor',\n        template: ''\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [ResizeBatchService, ElementRef, NgZone])\n], ResizeSensorComponent);\nexport { ResizeSensorComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4GAuCC;;;;;;;;;4CAS2C,AAIrC;;;;"}