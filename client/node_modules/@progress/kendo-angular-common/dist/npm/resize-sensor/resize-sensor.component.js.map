{"version":3,"file":"resize-sensor.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-common/dist/npm/resize-sensor/resize-sensor.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar operators_1 = require(\"rxjs/operators\");\nvar compat_service_1 = require(\"./compat.service\");\nvar observer_service_1 = require(\"./observer.service\");\nvar resize_batch_service_1 = require(\"./resize-batch.service\");\n/**\n * Emit up to 10 resize events per second by default.\n * Chosen as a compromise between responsiveness and performance.\n */\nvar DEFAULT_RATE_LIMIT = 10;\n/**\n * Resize Sensor Component\n *\n * Triggers a \"resize\" event whenever the parent DOM element size changes.\n */\nvar ResizeSensorComponent = /** @class */ (function () {\n    function ResizeSensorComponent(resizeBatchService, element, ngZone) {\n        var _this = this;\n        /**\n         * The maximum number of resize events to emit per second.\n         *\n         * Defaults to 10.\n         */\n        this.rateLimit = DEFAULT_RATE_LIMIT;\n        /**\n         * Fires when the parent DOM element has been resized.\n         */\n        this.resize = new core_1.EventEmitter();\n        var serviceType = observer_service_1.ResizeObserverService.supported() ? observer_service_1.ResizeObserverService : compat_service_1.ResizeCompatService;\n        this.resizeService = new serviceType(resizeBatchService, element, ngZone);\n        var throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);\n        this.subscription = this.resizeService.resize\n            .pipe(operators_1.auditTime(throttleTime))\n            .subscribe(function () {\n            if (!_this.resizeService.acceptedSize) {\n                _this.resize.emit();\n            }\n        });\n    }\n    ResizeSensorComponent.prototype.ngAfterViewChecked = function () {\n        this.resizeService.checkChanges();\n    };\n    ResizeSensorComponent.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n        this.resizeService.destroy();\n    };\n    ResizeSensorComponent.prototype.acceptSize = function (size) {\n        this.resizeService.acceptSize(size);\n    };\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], ResizeSensorComponent.prototype, \"rateLimit\", void 0);\n    tslib_1.__decorate([\n        core_1.Output(),\n        tslib_1.__metadata(\"design:type\", core_1.EventEmitter)\n    ], ResizeSensorComponent.prototype, \"resize\", void 0);\n    ResizeSensorComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'kendo-resize-sensor',\n            template: ''\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [resize_batch_service_1.ResizeBatchService, core_1.ElementRef, core_1.NgZone])\n    ], ResizeSensorComponent);\n    return ResizeSensorComponent;\n}());\nexports.ResizeSensorComponent = ResizeSensorComponent;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDAgDgD,AAIrC;;;;;;;;;;;;;;4GAEmB;;;;"}