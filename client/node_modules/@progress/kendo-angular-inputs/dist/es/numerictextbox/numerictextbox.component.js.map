{"version":3,"file":"numerictextbox.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/numerictextbox/numerictextbox.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, ViewChild, forwardRef, isDevMode, NgZone, ChangeDetectorRef, Injector } from '@angular/core';\nimport { anyChanged, hasObservers, Keys, guid, KendoInput } from '@progress/kendo-angular-common';\nimport { areSame, requiresZoneOnBlur } from '../common/utils';\nimport { invokeElementMethod } from '../common/dom-utils';\nimport { add, toFixedPrecision, limitPrecision } from '../common/math';\nimport { createMaxValidator } from '../validators/max.validator';\nimport { createMinValidator } from '../validators/min.validator';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, NgControl } from '@angular/forms';\nimport { IntlService } from '@progress/kendo-angular-intl';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { MIN_DOC_LINK, MAX_DOC_LINK, POINT, INITIAL_SPIN_DELAY, SPIN_DELAY, EXPONENT_REGEX } from './constants';\nimport { defined, noop, numericRegex, isNumber, pad, decimalPart, getDeltaFromMouseWheel, getCaretPosition, extractSignificantNumericChars, isRightClick } from './utils';\nimport { ArrowDirection } from './arrow-direction';\nimport { mobileOS } from '@progress/kendo-common';\nvar PARSABLE_OPTIONS = ['min', 'max', 'step', 'decimals'];\nvar PARSABLE_DEFAULTS = {\n    decimals: null,\n    max: null,\n    min: null,\n    step: 1\n};\nvar FOCUSED = 'k-state-focused';\nvar FORMATTED_VALUE = 'k-formatted-value';\n/**\n * Represents the [Kendo UI NumericTextBox component for Angular]({% slug overview_numerictextbox %}).\n */\nvar NumericTextBoxComponent = /** @class */ (function () {\n    function NumericTextBoxComponent(intl, renderer, localizationService, injector, ngZone, changeDetector, hostElement) {\n        var _this = this;\n        this.intl = intl;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Determines whether the NumericTextBox is disabled ([see example]({% slug disabled_numerictextbox %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the NumericTextBox is in its read-only state ([see example]({% slug readonly_numerictextbox %})).\n         */\n        this.readonly = false;\n        /**\n         * Sets the title of the `input` element of the NumericTextBox.\n         */\n        this.title = '';\n        /**\n         * Specifies whether the value will be auto-corrected based on the minimum and maximum values\n         * ([see example]({% slug precision_numerictextbox %})).\n         */\n        this.autoCorrect = false;\n        /**\n         * Specifies the number of decimals that the user can enter when the input is focused\n         * ([see example]({% slug precision_numerictextbox %})).\n         */\n        this.decimals = null;\n        /**\n         * Specifies the value that is used to increment or decrement the component value\n         * ([see example]({% slug predefinedsteps_numerictextbox %})).\n         */\n        this.step = 1;\n        /**\n         * Specifies whether the **Up** and **Down** spin buttons will be rendered\n         * ([see example]({% slug spinbuttons_numerictextbox %})).\n         */\n        this.spinners = true;\n        /**\n         * Determines whether the built-in minimum or maximum validators are enforced when a form is validated.\n         *\n         * > The 4.2.0 Angular version introduces the `min` and `max` validation directives. As a result, even if you set `rangeValidation`\n         * to `false`, the built-in Angular validators will be executed.\n         */\n        this.rangeValidation = true;\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabindex = 0;\n        /**\n         * Determines whether the value of the NumericTextBox will be changed via scrolling. Defaults to `true`.\n         *\n         * @default true\n         */\n        this.changeValueOnScroll = true;\n        /**\n         * Determines whether the whole value will be selected when the NumericTextBox is clicked. Defaults to `true`.\n         */\n        this.selectOnFocus = true;\n        /**\n         * Specifies the value of the NumericTextBox\n         * ([see example]({% slug formats_numerictextbox %})).\n         */\n        this.value = null;\n        /**\n         * Fires each time the user selects a new value ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the user focuses the `input` element ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the `input` element gets blurred ([see example]({% slug overview_numerictextbox %}#toc-events)).\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.ArrowDirection = ArrowDirection;\n        /**\n         * @hidden\n         */\n        this.arrowDirection = ArrowDirection.None;\n        this.inputValue = '';\n        this.minValidateFn = noop;\n        this.maxValidateFn = noop;\n        this._format = \"n2\";\n        this.isPasted = false;\n        this.mouseDown = false;\n        this.ngChange = noop;\n        this.ngTouched = noop;\n        this.ngValidatorChange = noop;\n        /**\n         * @hidden\n         */\n        this.increasePress = function (e) {\n            _this.arrowPress(ArrowDirection.Up, e);\n        };\n        /**\n         * @hidden\n         */\n        this.decreasePress = function (e) {\n            _this.arrowPress(ArrowDirection.Down, e);\n        };\n        /**\n         * @hidden\n         */\n        this.releaseArrow = function () {\n            clearTimeout(_this.spinTimeout);\n            if (_this.arrowDirection !== ArrowDirection.None) {\n                _this.arrowDirection = ArrowDirection.None;\n                _this.changeDetector.detectChanges();\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handlePaste = function () {\n            _this.isPasted = true;\n        };\n        /**\n         * @hidden\n         */\n        this.handleInput = function () {\n            var input = _this.numericInput.nativeElement;\n            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd, inputValue = input.value;\n            if (_this.pressedKey === Keys.NumpadDecimal) {\n                inputValue = _this.replaceNumpadDotValue();\n            }\n            if (_this.isPasted) {\n                inputValue = _this.formatInputValue(_this.intl.parseNumber(inputValue));\n            }\n            if (!_this.isValid(inputValue)) {\n                input.value = _this.inputValue;\n                _this.setSelection(selectionStart - 1, selectionEnd - 1);\n                return;\n            }\n            var parsedValue = _this.intl.parseNumber(inputValue);\n            var value = _this.restrictDecimals(parsedValue);\n            if (_this.autoCorrect) {\n                var limited = _this.limitInputValue(value);\n                value = limited.value;\n                selectionStart = limited.selectionStart;\n                selectionEnd = limited.selectionEnd;\n            }\n            if (parsedValue !== value || _this.hasTrailingZeros(inputValue) || !_this.focused) {\n                _this.setInputValue(value);\n                _this.setSelection(selectionStart, selectionEnd);\n            }\n            else {\n                _this.inputValue = inputValue;\n            }\n            if (_this.isPasted) {\n                input.value = _this.inputValue;\n            }\n            _this.updateValue(value);\n            _this.previousSelection = null;\n            _this.isPasted = false;\n        };\n        /**\n         * @hidden\n         */\n        this.handleDragEnter = function () {\n            if (!_this.focused && !_this.isDisabled) {\n                _this.setInputValue(_this.value, true);\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleMouseDown = function () {\n            _this.mouseDown = true;\n        };\n        /**\n         * @hidden\n         */\n        this.handleFocus = function () {\n            if (!_this.focused) {\n                _this.focused = true;\n                if (!_this.isDisabled) {\n                    var shouldSelectAll_1 = _this.selectOnFocus || !_this.mouseDown;\n                    _this.ngZone.runOutsideAngular(function () {\n                        setTimeout(function () {\n                            if (shouldSelectAll_1) {\n                                _this.selectAll();\n                            }\n                            else {\n                                _this.selectCaret();\n                            }\n                        }, 0);\n                    });\n                }\n            }\n            _this.mouseDown = false;\n            if (hasObservers(_this.onFocus)) {\n                _this.ngZone.run(function () {\n                    _this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = function () {\n            _this.changeDetector.markForCheck();\n            _this.focused = false;\n            //blur is thrown before input when dragging the input text in IE\n            if (_this.inputValue !== _this.elementValue) {\n                _this.handleInput();\n            }\n            _this.setInputValue();\n            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {\n                _this.ngZone.run(function () {\n                    _this.ngTouched();\n                    _this.onBlur.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleKeyDown = function (e) {\n            if (_this.isDisabled) {\n                return;\n            }\n            var step;\n            if (e.keyCode === Keys.ArrowDown) {\n                step = -1;\n            }\n            else if (e.keyCode === Keys.ArrowUp) {\n                step = 1;\n            }\n            if (step && _this.step) {\n                e.preventDefault();\n                _this.addStep(step);\n            }\n            var input = _this.numericInput.nativeElement;\n            _this.previousSelection = {\n                end: input.selectionEnd,\n                start: input.selectionStart\n            };\n            _this.pressedKey = e.keyCode;\n        };\n        /**\n         * @hidden\n         */\n        this.handleWheel = function (e) {\n            if (_this.focused && !_this.isDisabled && _this.changeValueOnScroll) {\n                e.preventDefault();\n                var delta = getDeltaFromMouseWheel(e);\n                _this.addStep(delta);\n            }\n        };\n        validatePackage(packageMetadata);\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    NumericTextBoxComponent_1 = NumericTextBoxComponent;\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"format\", {\n        /**\n         * Specifies the number format which is used when the NumericTextBox is not focused\n         * ([see example]({% slug formats_numerictextbox %})).\n         * If `format` is set to `null` or `undefined`, the default format will be used.\n         */\n        get: function () {\n            var format = this._format;\n            return format !== null && format !== undefined ? format : 'n2';\n        },\n        set: function (value) {\n            this._format = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"widgetClasses\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericTextBoxComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions = this.localizationService\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.subscriptions.add(this.intl.changes.subscribe(this.intlChange.bind(this)));\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.control = this.injector.get(NgControl, null);\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.ngOnChanges = function (changes) {\n        if (anyChanged(PARSABLE_OPTIONS, changes, false)) {\n            this.parseOptions(PARSABLE_OPTIONS.filter(function (option) { return changes[option]; }));\n        }\n        this.verifySettings();\n        if (anyChanged(['min', 'max', 'rangeValidation'], changes, false)) {\n            this.minValidateFn = this.rangeValidation ? createMinValidator(this.min) : noop;\n            this.maxValidateFn = this.rangeValidation ? createMaxValidator(this.max) : noop;\n            this.ngValidatorChange();\n        }\n        if (anyChanged(['autoCorrect', 'decimals', 'min'], changes)) {\n            delete this.numericRegex;\n        }\n        if (anyChanged(['value', 'format'], changes, false)) {\n            this.verifyValue(this.value);\n            this.value = this.restrictModelValue(this.value);\n            if (!this.focused || (this.intl.parseNumber(this.elementValue) !== this.value)) {\n                this.setInputValue();\n            }\n        }\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n        clearTimeout(this.spinTimeout);\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.validate = function (control) {\n        return this.minValidateFn(control) || this.maxValidateFn(control);\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.registerOnValidatorChange = function (fn) {\n        this.ngValidatorChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.writeValue = function (value) {\n        this.verifyValue(value);\n        var restrictedValue = this.restrictModelValue(value);\n        this.value = restrictedValue;\n        this.setInputValue();\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    NumericTextBoxComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    NumericTextBoxComponent.prototype.setDisabledState = function (isDisabled) {\n        this.changeDetector.markForCheck();\n        this.disabled = isDisabled;\n    };\n    /**\n     * Focuses the NumericTextBox.\n     *\n     * @example\n     * ```ts-no-run\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"numerictextbox.focus()\">Focus NumericTextBox</button>\n     *  <kendo-numerictextbox #numerictextbox></kendo-numerictextbox>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    NumericTextBoxComponent.prototype.focus = function () {\n        invokeElementMethod(this.numericInput, 'focus');\n    };\n    /**\n     * Blurs the NumericTextBox.\n     */\n    NumericTextBoxComponent.prototype.blur = function () {\n        invokeElementMethod(this.numericInput, 'blur');\n    };\n    /**\n     * Notifies the `NumericTextBoxComponent` that the input value should be changed.\n     * Can be used to update the input after setting the component properties directly.\n     */\n    NumericTextBoxComponent.prototype.notifyValueChange = function () {\n        this.setInputValue();\n    };\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"incrementTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('increment');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"decrementTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('decrement');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"decimalSeparator\", {\n        get: function () {\n            var numberSymbols = this.intl.numberSymbols();\n            return numberSymbols.decimal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"elementValue\", {\n        get: function () {\n            return this.numericInput.nativeElement.value;\n        },\n        set: function (value) {\n            this.renderer.setProperty(this.numericInput.nativeElement, 'value', value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"focused\", {\n        get: function () {\n            return this.isFocused;\n        },\n        set: function (value) {\n            if (this.isFocused !== value && this.numericWrap) {\n                var wrap = this.numericWrap.nativeElement;\n                var input = this.numericInput.nativeElement;\n                if (value) {\n                    this.renderer.addClass(wrap, FOCUSED);\n                    if (!this.isDisabled) {\n                        this.renderer.removeClass(input, FORMATTED_VALUE);\n                    }\n                }\n                else {\n                    this.renderer.removeClass(wrap, FOCUSED);\n                    this.renderer.addClass(input, FORMATTED_VALUE);\n                }\n                this.isFocused = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"hasDecimals\", {\n        get: function () {\n            return this.decimals !== null && this.decimals >= 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NumericTextBoxComponent.prototype, \"isDisabled\", {\n        get: function () {\n            return this.disabled || this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NumericTextBoxComponent.prototype.arrowPress = function (direction, e) {\n        e.preventDefault();\n        if (this.isDisabled || isRightClick(e)) {\n            return;\n        }\n        if (!mobileOS) {\n            this.focused = true;\n            this.focus();\n        }\n        if (this.arrowDirection !== direction) {\n            this.arrowDirection = direction;\n            this.changeDetector.detectChanges();\n        }\n        if (this.step) {\n            this.spin(direction, INITIAL_SPIN_DELAY);\n        }\n        else {\n            this.setInputValue();\n        }\n    };\n    NumericTextBoxComponent.prototype.updateValue = function (value) {\n        var _this = this;\n        if (!areSame(this.value, value)) {\n            this.ngZone.run(function () {\n                _this.value = value;\n                _this.ngChange(value);\n                _this.valueChange.emit(value);\n                _this.changeDetector.markForCheck();\n            });\n        }\n    };\n    NumericTextBoxComponent.prototype.replaceNumpadDotValue = function () {\n        var value = this.inputValue || \"\";\n        if (this.previousSelection) {\n            var input = this.numericInput.nativeElement;\n            var selectionStart = input.selectionStart, selectionEnd = input.selectionEnd;\n            var _a = this.previousSelection, start = _a.start, end = _a.end;\n            input.value = value = value.substring(0, start) + this.decimalSeparator + value.substring(end);\n            this.setSelection(selectionStart, selectionEnd);\n        }\n        return value;\n    };\n    NumericTextBoxComponent.prototype.isValid = function (value) {\n        if (!this.numericRegex) {\n            this.numericRegex = numericRegex({\n                autoCorrect: this.autoCorrect,\n                decimals: this.decimals,\n                min: this.min,\n                separator: this.decimalSeparator\n            });\n        }\n        return this.numericRegex.test(value);\n    };\n    NumericTextBoxComponent.prototype.spin = function (step, timeout) {\n        var _this = this;\n        clearTimeout(this.spinTimeout);\n        this.spinTimeout = window.setTimeout(function () {\n            _this.spin(step, SPIN_DELAY);\n        }, timeout);\n        this.addStep(step);\n    };\n    NumericTextBoxComponent.prototype.addStep = function (step) {\n        var value = add(this.value || 0, this.step * step);\n        value = this.limitValue(value);\n        value = this.restrictDecimals(value);\n        this.setInputValue(value);\n        this.updateValue(value);\n    };\n    NumericTextBoxComponent.prototype.setSelection = function (start, end) {\n        if (this.focused) {\n            invokeElementMethod(this.numericInput, 'setSelectionRange', start, end);\n        }\n    };\n    NumericTextBoxComponent.prototype.limitValue = function (value) {\n        var result = value;\n        if (!this.isInRange(value)) {\n            if (isNumber(this.max) && value > this.max) {\n                result = this.max;\n            }\n            if (isNumber(this.min) && value < this.min) {\n                result = this.min;\n            }\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.limitInputValue = function (value) {\n        var _a = this.numericInput.nativeElement, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd, enteredValue = _a.value;\n        var limitedValue = value;\n        var selectToEnd = false;\n        if (!this.isInRange(value)) {\n            var lengthChange = enteredValue.length - String(this.inputValue).length;\n            var _b = this, min = _b.min, max = _b.max;\n            var hasMax = isNumber(max);\n            var hasMin = isNumber(min);\n            var padLimit = void 0, replaceNext = void 0;\n            var correctedValue = value;\n            if (selectionStart === 0 && this.inputValue.substr(1) === enteredValue) {\n                return {\n                    selectionEnd: selectionEnd,\n                    selectionStart: selectionStart,\n                    value: null\n                };\n            }\n            if (hasMax && value > max) {\n                if (value > 0) {\n                    replaceNext = true;\n                }\n                else {\n                    padLimit = max;\n                }\n            }\n            else if (hasMin && value < min) {\n                if (value > 0) {\n                    padLimit = min;\n                }\n                else {\n                    replaceNext = true;\n                }\n            }\n            if (padLimit) {\n                var paddedValue = this.tryPadValue(value, padLimit);\n                if (paddedValue && decimalPart(value) !== decimalPart(padLimit)) {\n                    correctedValue = paddedValue;\n                    selectToEnd = true;\n                }\n            }\n            else if (replaceNext) {\n                if (this.inputValue && selectionStart !== enteredValue.length) {\n                    correctedValue = parseFloat(enteredValue.substr(0, selectionStart) +\n                        enteredValue.substr(selectionStart + lengthChange));\n                }\n            }\n            limitedValue = this.limitValue(correctedValue);\n            selectToEnd = (selectToEnd || limitedValue !== correctedValue) && this.previousSelection &&\n                (this.previousSelection.end - this.previousSelection.start + lengthChange) > 0;\n        }\n        return {\n            selectionEnd: selectToEnd ? String(limitedValue).length : selectionEnd,\n            selectionStart: selectionStart,\n            value: limitedValue\n        };\n    };\n    NumericTextBoxComponent.prototype.tryPadValue = function (value, limit) {\n        var limitLength = String(Math.floor(limit)).length;\n        var zeroPadded = pad(value, limitLength);\n        var zeroPaddedNext = pad(value, limitLength + 1);\n        var result;\n        if (this.isInRange(zeroPadded)) {\n            result = zeroPadded;\n        }\n        else if (this.isInRange(zeroPaddedNext)) {\n            result = zeroPaddedNext;\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.isInRange = function (value) {\n        return !isNumber(value) || ((!isNumber(this.min) || this.min <= value) && (!isNumber(this.max) || value <= this.max));\n    };\n    NumericTextBoxComponent.prototype.restrictModelValue = function (value) {\n        var result = this.restrictDecimals(value, true);\n        if (this.autoCorrect && this.limitValue(result) !== result) {\n            result = null;\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.restrictDecimals = function (value, round) {\n        var result = value;\n        if (value && this.hasDecimals) {\n            var decimals = this.decimals;\n            var stringValue = String(value);\n            if (round || EXPONENT_REGEX.test(stringValue)) {\n                result = toFixedPrecision(value, decimals);\n            }\n            else {\n                var parts = stringValue.split(POINT);\n                var fraction = parts[1];\n                if (fraction && fraction.length > decimals) {\n                    fraction = fraction.substr(0, decimals);\n                    result = parseFloat(\"\" + parts[0] + POINT + fraction);\n                }\n            }\n        }\n        return result;\n    };\n    NumericTextBoxComponent.prototype.formatInputValue = function (value) {\n        var stringValue = String(value);\n        var exponentMatch = EXPONENT_REGEX.exec(stringValue);\n        if (exponentMatch) {\n            stringValue = value.toFixed(limitPrecision(parseInt(exponentMatch[1], 10)));\n        }\n        return stringValue.replace(POINT, this.decimalSeparator);\n    };\n    NumericTextBoxComponent.prototype.formatValue = function (value, focused) {\n        var formattedValue;\n        if (value === null || !defined(value) || value === '') {\n            formattedValue = '';\n        }\n        else if (focused && !this.readonly) {\n            formattedValue = this.formatInputValue(value);\n        }\n        else {\n            formattedValue = this.intl.formatNumber(value, this.format);\n        }\n        return formattedValue;\n    };\n    NumericTextBoxComponent.prototype.setInputValue = function (value, focused) {\n        if (value === void 0) { value = this.value; }\n        if (focused === void 0) { focused = this.focused; }\n        var formattedValue = this.formatValue(value, focused);\n        this.elementValue = formattedValue;\n        this.inputValue = formattedValue;\n    };\n    NumericTextBoxComponent.prototype.verifySettings = function () {\n        if (!isDevMode()) {\n            return;\n        }\n        if (this.min !== null && this.max !== null && this.min > this.max) {\n            throw new Error(\"The max value should be bigger than the min. See \" + MIN_DOC_LINK + \" and \" + MAX_DOC_LINK + \".\");\n        }\n    };\n    NumericTextBoxComponent.prototype.verifyValue = function (value) {\n        if (isDevMode() && value && typeof value !== 'number') {\n            throw new Error(\"The NumericTextBox component requires value of type Number and \" + JSON.stringify(value) + \" was set.\");\n        }\n    };\n    NumericTextBoxComponent.prototype.parseOptions = function (options) {\n        for (var idx = 0; idx < options.length; idx++) {\n            var name_1 = options[idx];\n            var value = this[name_1];\n            if (typeof value === 'string') {\n                var parsed = parseFloat(value);\n                var valid = !isNaN(parsed);\n                if (isDevMode() && !valid && value !== '') {\n                    throw new Error('The NumericTextBox component requires value of type Number or a String representing ' +\n                        (\"a number for the \" + name_1 + \" property and \" + JSON.stringify(value) + \" was set.\"));\n                }\n                this[name_1] = valid ? parsed : PARSABLE_DEFAULTS[name_1];\n            }\n        }\n    };\n    NumericTextBoxComponent.prototype.intlChange = function () {\n        delete this.numericRegex;\n        if (this.numericInput && (!this.focused || !this.isValid(this.elementValue))) {\n            this.setInputValue();\n        }\n    };\n    NumericTextBoxComponent.prototype.hasTrailingZeros = function (inputValue) {\n        if (this.hasDecimals && this.focused) {\n            var fraction = inputValue.split(this.decimalSeparator)[1];\n            return fraction && fraction.length > this.decimals && fraction.lastIndexOf('0') === fraction.length - 1;\n        }\n    };\n    NumericTextBoxComponent.prototype.selectAll = function () {\n        this.setInputValue();\n        this.setSelection(0, this.inputValue.length);\n    };\n    NumericTextBoxComponent.prototype.selectCaret = function () {\n        var caretPosition = getCaretPosition(this.numericInput.nativeElement);\n        var formattedValue = this.elementValue;\n        var partialValue = formattedValue.substring(0, caretPosition);\n        this.setInputValue();\n        if (partialValue.length) {\n            var significantCharsInFormattedValue = extractSignificantNumericChars(partialValue, this.decimalSeparator);\n            var adjustedSignificantChars = this.adjustSignificantChars(formattedValue, significantCharsInFormattedValue);\n            this.setSelection(adjustedSignificantChars, adjustedSignificantChars);\n        }\n        else {\n            this.setSelection(0, 0);\n        }\n    };\n    NumericTextBoxComponent.prototype.numberOfLeadingZeroes = function (formattedValue) {\n        var separatorIndex = formattedValue.indexOf(this.decimalSeparator);\n        var matchedLeadingZeroes = formattedValue.match(/^[^1-9]*?(0+)/);\n        if (matchedLeadingZeroes) {\n            var lengthOfMatch = matchedLeadingZeroes[0].length;\n            var lengthOfLeadingZeroesMatch = matchedLeadingZeroes[1].length;\n            return lengthOfMatch === separatorIndex ? lengthOfLeadingZeroesMatch - 1 : lengthOfLeadingZeroesMatch;\n        }\n        return 0;\n    };\n    NumericTextBoxComponent.prototype.adjustSignificantChars = function (formattedValue, significantChars) {\n        var leadingZeroes = this.numberOfLeadingZeroes(formattedValue);\n        if (leadingZeroes > 0) {\n            return Math.max(0, significantChars - leadingZeroes);\n        }\n        return significantChars;\n    };\n    var NumericTextBoxComponent_1;\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], NumericTextBoxComponent.prototype, \"focusableId\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"disabled\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"readonly\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], NumericTextBoxComponent.prototype, \"title\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"autoCorrect\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], NumericTextBoxComponent.prototype, \"format\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"max\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"min\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"decimals\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], NumericTextBoxComponent.prototype, \"placeholder\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"step\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"spinners\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"rangeValidation\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"tabindex\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [Number])\n    ], NumericTextBoxComponent.prototype, \"tabIndex\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"changeValueOnScroll\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], NumericTextBoxComponent.prototype, \"selectOnFocus\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"value\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], NumericTextBoxComponent.prototype, \"maxlength\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], NumericTextBoxComponent.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        Output('focus'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], NumericTextBoxComponent.prototype, \"onFocus\", void 0);\n    tslib_1.__decorate([\n        Output('blur'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], NumericTextBoxComponent.prototype, \"onBlur\", void 0);\n    tslib_1.__decorate([\n        ViewChild('numericInput', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], NumericTextBoxComponent.prototype, \"numericInput\", void 0);\n    tslib_1.__decorate([\n        ViewChild('numericWrap', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], NumericTextBoxComponent.prototype, \"numericWrap\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], NumericTextBoxComponent.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-widget'),\n        HostBinding('class.k-numerictextbox'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], NumericTextBoxComponent.prototype, \"widgetClasses\", null);\n    NumericTextBoxComponent = NumericTextBoxComponent_1 = tslib_1.__decorate([\n        Component({\n            exportAs: 'kendoNumericTextBox',\n            providers: [\n                LocalizationService,\n                { provide: L10N_PREFIX, useValue: 'kendo.numerictextbox' },\n                { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }), multi: true },\n                { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }), multi: true },\n                { provide: KendoInput, useExisting: forwardRef(function () { return NumericTextBoxComponent_1; }) }\n            ],\n            selector: 'kendo-numerictextbox',\n            template: \"\\n        <ng-container kendoNumericTextBoxLocalizedMessages\\n            i18n-increment=\\\"kendo.numerictextbox.increment|The title for the **Increment** button in the NumericTextBox\\\"\\n            increment=\\\"Increase value\\\"\\n            i18n-decrement=\\\"kendo.numerictextbox.decrement|The title for the **Decrement** button in the NumericTextBox\\\"\\n            decrement=\\\"Decrease value\\\"\\n        >\\n        </ng-container>\\n        <span\\n            class=\\\"k-numeric-wrap\\\"\\n            [class.k-state-disabled]=\\\"disabled\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ mousewheel: handleWheel, DOMMouseScroll: handleWheel }\\\"\\n            #numericWrap>\\n            <input\\n            role=\\\"spinbutton\\\"\\n            class=\\\"k-input k-formatted-value\\\"\\n            autocomplete=\\\"off\\\"\\n            autocorrect=\\\"off\\\"\\n            [id]=\\\"focusableId\\\"\\n            [attr.aria-valuemin]=\\\"min\\\"\\n            [attr.aria-valuemax]=\\\"max\\\"\\n            [attr.aria-valuenow]=\\\"value\\\"\\n            [attr.title]=\\\"title\\\"\\n            [attr.placeholder]=\\\"placeholder\\\"\\n            [attr.maxLength]=\\\"maxlength\\\"\\n            [tabindex]=\\\"tabIndex\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                mousedown: handleMouseDown,\\n                dragenter: handleDragEnter,\\n                keydown: handleKeyDown,\\n                input: handleInput,\\n                focus: handleFocus,\\n                blur: handleBlur,\\n                paste: handlePaste\\n            }\\\"\\n            #numericInput />\\n            <span class=\\\"k-select\\\" *ngIf=\\\"spinners\\\" [kendoEventsOutsideAngular]=\\\"{ mouseup: releaseArrow, mouseleave: releaseArrow }\\\">\\n                <span\\n                    role=\\\"button\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{ mousedown: increasePress }\\\"\\n                    [attr.aria-label]=\\\"incrementTitle\\\"\\n                    [title]=\\\"incrementTitle\\\"\\n                    [class.k-state-active]=\\\"arrowDirection === ArrowDirection.Up\\\"\\n                    class=\\\"k-link k-link-increase\\\"\\n                >\\n                    <span class=\\\"k-icon k-i-arrow-n\\\"></span>\\n                </span>\\n                <span\\n                    role=\\\"button\\\"\\n                    [kendoEventsOutsideAngular]=\\\"{ mousedown: decreasePress }\\\"\\n                    [attr.aria-label]=\\\"decrementTitle\\\"\\n                    [title]=\\\"decrementTitle\\\"\\n                    [class.k-state-active]=\\\"arrowDirection === ArrowDirection.Down\\\"\\n                    class=\\\"k-link k-link-decrease\\\"\\n                >\\n                    <span class=\\\"k-icon k-i-arrow-s\\\"></span>\\n                </span>\\n            </span>\\n        </span>\\n      \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [IntlService,\n            Renderer2,\n            LocalizationService,\n            Injector,\n            NgZone,\n            ChangeDetectorRef,\n            ElementRef])\n    ], NumericTextBoxComponent);\n    return NumericTextBoxComponent;\n}());\nexport { NumericTextBoxComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqnE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAQqB;;;;"}