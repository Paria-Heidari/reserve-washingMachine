{"version":3,"file":"slider-base.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/sliders-common/slider-base.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { increment, decrement, incrementLarge, decrementLarge, identity } from './sliders-util';\nimport { Input, Output, EventEmitter, HostBinding, ElementRef, ViewChild, ContentChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { NgControl } from '@angular/forms';\nimport { Keys } from '@progress/kendo-angular-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { LabelTemplateDirective } from './label-template.directive';\n/**\n * @hidden\n */\nvar SliderBase = /** @class */ (function () {\n    function SliderBase(localizationService, injector, renderer, ngZone, changeDetector, hostElement) {\n        var _this = this;\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.hostElement = hostElement;\n        /**\n         * Defines the title of the ticks ([see example]({% slug ticks_slider %}#toc-titles)). The default title\n         * for each tick is its Slider value. If you use a callback function, the function accepts an argument\n         * that holds the value of the component and returns a string with the new title.\n         */\n        this.title = identity;\n        /**\n         * Denotes the location of the tick marks in the Slider ([see example]({% slug ticks_slider %}#toc-placement)).\n         *\n         * The available options are:\n         * * `before`&mdash;The tick marks are located to the top side of the horizontal track or to the left side of a vertical track.\n         * * `after`&mdash;The tick marks are located to the bottom side of the horizontal track or to the right side of the vertical track.\n         * * `both`&mdash; (Default) The tick marks are located on both sides of the track.\n         * * `none`&mdash;The tick marks are not visible. The actual elements are not added to the DOM tree.\n         */\n        this.tickPlacement = 'both';\n        /**\n         * If `vertical` is set to `true`, the orientation of the Slider changes from horizontal to vertical\n         * ([see example]({% slug orientation_slider %})).\n         */\n        this.vertical = false;\n        /**\n         * The minimum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * The attribute accepts both integers and floating-point numbers.\n         */\n        this.min = 0;\n        /**\n         * The maximum value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * The attribute accepts both integers and floating-point numbers.\n         */\n        this.max = 10;\n        /**\n         * The step value of the Slider ([see example]({% slug predefinedsteps_slider %}#toc-small-steps)).\n         * Accepts positive values only. Can be an integer or a floating-point number.\n         */\n        this.smallStep = 1;\n        /**\n         * Specifies that every n<sup>th</sup> tick will be large and will have a label\n         * ([see example]({% slug predefinedsteps_slider %}#toc-large-steps)).\n         * Accepts positive integer values only.\n         */\n        this.largeStep = null;\n        /**\n         * Determines whether the Slider is disabled ([see example]({% slug disabledstate_slider %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the Slider is in its read-only state ([see example]({% slug readonly_slider %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Slider.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the component.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the component is blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.sliderClass = true;\n        this.widgetClass = true;\n        this.subscriptions = new Subscription();\n        /**\n         * @hidden\n         */\n        this.ifEnabled = function (callback, event) {\n            if (!_this.isDisabled) {\n                callback.call(_this, event);\n            }\n        };\n        validatePackage(packageMetadata);\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n    }\n    Object.defineProperty(SliderBase.prototype, \"horizontalClass\", {\n        get: function () {\n            return !this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderBase.prototype, \"verticalClass\", {\n        get: function () {\n            return this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderBase.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    SliderBase.prototype.setDisabledState = function (isDisabled) {\n        this.changeDetector.markForCheck();\n        this.disabled = isDisabled;\n    };\n    SliderBase.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscriptions.add(this.localizationService\n            .changes\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n            _this.sizeComponent();\n        }));\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.control = this.injector.get(NgControl, null);\n    };\n    Object.defineProperty(SliderBase.prototype, \"isDisabled\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled || this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    SliderBase.prototype.isEmpty = function () {\n        return false;\n    };\n    Object.defineProperty(SliderBase.prototype, \"reverse\", {\n        get: function () {\n            return this.localizationService.rtl && !this.vertical;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SliderBase.prototype, \"keyBinding\", {\n        get: function () {\n            var _a;\n            var reverse = this.reverse;\n            return _a = {},\n                _a[Keys.ArrowLeft] = reverse ? increment : decrement,\n                _a[Keys.ArrowRight] = reverse ? decrement : increment,\n                _a[Keys.ArrowDown] = decrement,\n                _a[Keys.ArrowUp] = increment,\n                _a[Keys.PageUp] = incrementLarge,\n                _a[Keys.PageDown] = decrementLarge,\n                _a[Keys.Home] = function (_a) {\n                    var min = _a.min;\n                    return min;\n                },\n                _a[Keys.End] = function (_a) {\n                    var max = _a.max;\n                    return max;\n                },\n                _a;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SliderBase.prototype.resetStyles = function (elements) {\n        var _this = this;\n        elements.forEach(function (el) {\n            if (el) {\n                if (_this.vertical) {\n                    _this.renderer.removeStyle(el, 'width');\n                    _this.renderer.removeStyle(el, 'left');\n                    _this.renderer.removeStyle(el, 'right');\n                }\n                else {\n                    _this.renderer.removeStyle(el, 'height');\n                    _this.renderer.removeStyle(el, 'bottom');\n                }\n                _this.renderer.removeStyle(el, 'padding-top');\n            }\n        });\n    };\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Function)\n    ], SliderBase.prototype, \"title\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SliderBase.prototype, \"tickPlacement\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SliderBase.prototype, \"vertical\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"min\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"max\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"smallStep\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"largeStep\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"fixedTickWidth\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SliderBase.prototype, \"disabled\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SliderBase.prototype, \"readonly\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SliderBase.prototype, \"tabindex\", void 0);\n    tslib_1.__decorate([\n        Output('focus'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SliderBase.prototype, \"onFocus\", void 0);\n    tslib_1.__decorate([\n        Output('blur'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SliderBase.prototype, \"onBlur\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SliderBase.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SliderBase.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-slider-horizontal'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SliderBase.prototype, \"horizontalClass\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-slider-vertical'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SliderBase.prototype, \"verticalClass\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-slider'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SliderBase.prototype, \"sliderClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-widget'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SliderBase.prototype, \"widgetClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-state-disabled'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SliderBase.prototype, \"disabledClass\", null);\n    tslib_1.__decorate([\n        ViewChild('wrap', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], SliderBase.prototype, \"wrapper\", void 0);\n    tslib_1.__decorate([\n        ViewChild('track', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], SliderBase.prototype, \"track\", void 0);\n    tslib_1.__decorate([\n        ViewChild('sliderSelection', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], SliderBase.prototype, \"sliderSelection\", void 0);\n    tslib_1.__decorate([\n        ViewChild('ticks', { read: ElementRef, static: false }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], SliderBase.prototype, \"ticksContainer\", void 0);\n    tslib_1.__decorate([\n        ViewChild('ticks', { static: false }),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], SliderBase.prototype, \"ticks\", void 0);\n    tslib_1.__decorate([\n        ContentChild(LabelTemplateDirective, { static: false }),\n        tslib_1.__metadata(\"design:type\", LabelTemplateDirective)\n    ], SliderBase.prototype, \"labelTemplate\", void 0);\n    return SliderBase;\n}());\nexport { SliderBase };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAkTsD;;;;"}