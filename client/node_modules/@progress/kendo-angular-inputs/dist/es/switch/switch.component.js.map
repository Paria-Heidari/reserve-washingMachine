{"version":3,"file":"switch.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/switch/switch.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { ElementRef, Renderer2, Component, EventEmitter, HostBinding, Input, Output, ViewChild, forwardRef, ChangeDetectorRef, NgZone, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { hasObservers, guid, Keys, KendoInput } from '@progress/kendo-angular-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { requiresZoneOnBlur } from '../common/utils';\nimport { skip, take } from \"rxjs/operators\";\nimport { browser } from '@progress/kendo-common';\nvar FOCUSED = 'k-state-focused';\n/**\n * Represents the [Kendo UI Switch component for Angular]({% slug overview_switch %}).\n */\nvar SwitchComponent = /** @class */ (function () {\n    function SwitchComponent(renderer, hostElement, localizationService, injector, changeDetector, ngZone) {\n        var _this = this;\n        this.renderer = renderer;\n        this.hostElement = hostElement;\n        this.localizationService = localizationService;\n        this.injector = injector;\n        this.changeDetector = changeDetector;\n        this.ngZone = ngZone;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-\" + guid();\n        /**\n         * Determines whether the Switch is disabled ([see example]({% slug disabled_switch %})).\n         */\n        this.disabled = false;\n        /**\n         * Determines whether the Switch is in its read-only state ([see example]({% slug readonly_switch %})).\n         */\n        this.readonly = false;\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the Switch.\n         */\n        this.tabindex = 0;\n        /**\n         * Fires each time the user focuses the `input` element.\n         */\n        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the `input` element gets blurred.\n         */\n        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename\n        /**\n         * Fires each time the user selects a new value.\n         */\n        this.valueChange = new EventEmitter();\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.initialized = false;\n        this._checked = false;\n        this.ngChange = function (_) { };\n        this.ngTouched = function () { };\n        /**\n         * @hidden\n         */\n        this.handleFocus = function () {\n            _this.focused = true;\n            if (hasObservers(_this.onFocus)) {\n                _this.ngZone.run(function () {\n                    _this.onFocus.emit();\n                });\n            }\n        };\n        /**\n         * @hidden\n         */\n        this.handleBlur = function () {\n            _this.changeDetector.markForCheck();\n            _this.focused = false;\n            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {\n                _this.ngZone.run(function () {\n                    _this.ngTouched();\n                    _this.onBlur.emit();\n                });\n            }\n        };\n        validatePackage(packageMetadata);\n        this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        this.keyDownHandler = this.keyDownHandler.bind(this);\n        this.clickHandler = this.clickHandler.bind(this);\n    }\n    SwitchComponent_1 = SwitchComponent;\n    Object.defineProperty(SwitchComponent.prototype, \"checked\", {\n        get: function () {\n            return this._checked;\n        },\n        /**\n         * Sets the value of the Switch when it is initially displayed.\n         */\n        set: function (value) {\n            this.setHostClasses(value);\n            this._checked = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ieClass\", {\n        get: function () {\n            return browser && browser.msie;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled ? true : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"ariaReadonly\", {\n        get: function () {\n            return this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"onLabelMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.onLabel || this.localizationService.get('on');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"offLabelMessage\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.offLabel || this.localizationService.get('off');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwitchComponent.prototype, \"isEnabled\", {\n        get: function () {\n            return !this.disabled && !this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SwitchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.hostElement) {\n            var wrapper = this.hostElement.nativeElement;\n            this.renderer.removeAttribute(wrapper, \"tabindex\");\n        }\n        this.localizationChangeSubscription = this.localizationService\n            .changes\n            .pipe(skip(1))\n            .subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n        this.control = this.injector.get(NgControl, null);\n        this.ngZone.onStable.pipe(take(1)).subscribe(function () { return _this.initialized = true; });\n    };\n    SwitchComponent.prototype.ngOnDestroy = function () {\n        if (this.localizationChangeSubscription) {\n            this.localizationChangeSubscription.unsubscribe();\n        }\n    };\n    /**\n     * Focuses the Switch.\n     *\n     * @example\n     * ```ts-no-run\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"switch.focus()\">Focus</button>\n     *  <kendo-switch #switch></kendo-switch>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    SwitchComponent.prototype.focus = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    };\n    /**\n     * Blurs the Switch.\n     */\n    SwitchComponent.prototype.blur = function () {\n        if (!this.wrapper) {\n            return;\n        }\n        this.wrapper.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     */\n    SwitchComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this.changeDetector.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.writeValue = function (value) {\n        this.checked = value === null ? false : value;\n        this.changeDetector.markForCheck();\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.keyDownHandler = function (e) {\n        var keyCode = e.keyCode;\n        if (this.isEnabled && (keyCode === Keys.Space || keyCode === Keys.Enter)) {\n            this.changeValue(!this.checked);\n            e.preventDefault();\n        }\n    };\n    /**\n     * @hidden\n     */\n    SwitchComponent.prototype.clickHandler = function () {\n        if (this.isEnabled) {\n            this.changeValue(!this.checked);\n        }\n    };\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    SwitchComponent.prototype.isEmpty = function () {\n        return false;\n    };\n    SwitchComponent.prototype.changeValue = function (value) {\n        var _this = this;\n        if (this.checked !== value) {\n            this.ngZone.run(function () {\n                _this.checked = value;\n                _this.ngChange(value);\n                _this.valueChange.emit(value);\n                _this.changeDetector.markForCheck();\n            });\n        }\n    };\n    Object.defineProperty(SwitchComponent.prototype, \"focused\", {\n        set: function (value) {\n            if (this.isFocused !== value && this.hostElement) {\n                var element = this.hostElement.nativeElement;\n                if (value) {\n                    this.renderer.addClass(element, FOCUSED);\n                }\n                else {\n                    this.renderer.removeClass(element, FOCUSED);\n                }\n                this.isFocused = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SwitchComponent.prototype.setHostClasses = function (value) {\n        if (value) {\n            this.renderer.removeClass(this.hostElement.nativeElement, 'k-switch-off');\n            this.renderer.addClass(this.hostElement.nativeElement, 'k-switch-on');\n        }\n        else {\n            this.renderer.removeClass(this.hostElement.nativeElement, 'k-switch-on');\n            this.renderer.addClass(this.hostElement.nativeElement, 'k-switch-off');\n        }\n    };\n    var SwitchComponent_1;\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SwitchComponent.prototype, \"focusableId\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SwitchComponent.prototype, \"onLabel\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SwitchComponent.prototype, \"offLabel\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [Boolean])\n    ], SwitchComponent.prototype, \"checked\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SwitchComponent.prototype, \"disabled\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SwitchComponent.prototype, \"readonly\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], SwitchComponent.prototype, \"tabindex\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [Number])\n    ], SwitchComponent.prototype, \"tabIndex\", null);\n    tslib_1.__decorate([\n        Output('focus'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SwitchComponent.prototype, \"onFocus\", void 0);\n    tslib_1.__decorate([\n        Output('blur'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SwitchComponent.prototype, \"onBlur\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], SwitchComponent.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        ViewChild('wrapper', { static: true }),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], SwitchComponent.prototype, \"wrapper\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], SwitchComponent.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-ie'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SwitchComponent.prototype, \"ieClass\", null);\n    tslib_1.__decorate([\n        HostBinding('attr.aria-disabled'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SwitchComponent.prototype, \"ariaDisabled\", null);\n    tslib_1.__decorate([\n        HostBinding('attr.aria-readonly'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SwitchComponent.prototype, \"ariaReadonly\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-switch'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], SwitchComponent.prototype, \"hostClasses\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-state-disabled'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], SwitchComponent.prototype, \"disabledClass\", null);\n    SwitchComponent = SwitchComponent_1 = tslib_1.__decorate([\n        Component({\n            exportAs: 'kendoSwitch',\n            providers: [\n                LocalizationService,\n                { provide: L10N_PREFIX, useValue: 'kendo.switch' },\n                {\n                    multi: true,\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return SwitchComponent_1; }) /* tslint:disable-line */\n                },\n                {\n                    provide: KendoInput,\n                    useExisting: forwardRef(function () { return SwitchComponent_1; })\n                }\n            ],\n            selector: 'kendo-switch',\n            template: \"\\n        <ng-container kendoSwitchLocalizedMessages\\n            i18n-on=\\\"kendo.switch.on|The **On** label of the Switch.\\\"\\n            on=\\\"ON\\\"\\n            i18n-off=\\\"kendo.switch.off|The **Off** label of the Switch.\\\"\\n            off=\\\"OFF\\\"\\n        >\\n\\n        <span\\n            #wrapper\\n            class=\\\"k-switch-container\\\"\\n            [id]=\\\"focusableId\\\"\\n            role=\\\"switch\\\"\\n            [style.transitionDuration]=\\\"initialized ? '200ms' : '0ms'\\\"\\n            [attr.aria-checked]=\\\"checked\\\"\\n            [attr.tabindex]=\\\"(disabled ? undefined : tabIndex)\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ click: clickHandler, keydown: keyDownHandler, focus: handleFocus, blur: handleBlur }\\\"\\n        >\\n            <span class=\\\"k-switch-label-on\\\" [attr.aria-hidden]=\\\"true\\\" >{{onLabelMessage}}</span>\\n            <span class=\\\"k-switch-label-off\\\" [attr.aria-hidden]=\\\"true\\\">{{offLabelMessage}}</span>\\n            <span class=\\\"k-switch-handle\\\" [style.transitionDuration]=\\\"initialized ? '200ms' : '0ms'\\\"></span>\\n        </span>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n            ElementRef,\n            LocalizationService,\n            Injector,\n            ChangeDetectorRef,\n            NgZone])\n    ], SwitchComponent);\n    return SwitchComponent;\n}());\nexport { SwitchComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DA6X8D,AAkBnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOa;;;;"}