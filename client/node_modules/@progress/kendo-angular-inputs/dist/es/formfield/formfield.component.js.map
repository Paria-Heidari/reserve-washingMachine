{"version":3,"file":"formfield.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/formfield/formfield.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, ContentChild, ContentChildren, ElementRef, HostBinding, Input, isDevMode, Renderer2, QueryList } from '@angular/core';\nimport { NgControl, RadioControlValueAccessor } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { KendoInput, isDocumentAvailable } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { ErrorComponent } from './error.component';\nimport { HintComponent } from './hint.component';\n/**\n * Specifies a container for form-bound controls (Kendo controls or native HTML controls).\n * Applies styling and behavior rules.\n */\nvar FormFieldComponent = /** @class */ (function () {\n    function FormFieldComponent(renderer, localizationService, hostElement) {\n        var _this = this;\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.hostElement = hostElement;\n        this.hostClass = true;\n        /**\n         *\n         * Specifies when the Hint messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is\n         * `valid` or `untouched` and `pristine`.\n         * * `always`&mdash;Allows full control over the visibility of the hints.\n         *\n         */\n        this.showHints = 'initial';\n        /**\n         * Specifies the layout orientation of the form field.\n         *\n         * * The possible values are:\n         *\n         * * (Default) `vertical`\n         * * `horizontal`\n         */\n        this.orientation = 'vertical';\n        /**\n         * Specifies when the Error messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is\n         * `invalid` and `touched` or `dirty`.\n         * * `always`&mdash;Allows full control over the visibility of the errors.\n         *\n         */\n        this.showErrors = 'initial';\n        this.subscriptions = new Subscription();\n        this.rtl = false;\n        validatePackage(packageMetadata);\n        this.subscriptions.add(this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.rtl = rtl;\n            _this.direction = _this.rtl ? 'rtl' : 'ltr';\n        }));\n    }\n    Object.defineProperty(FormFieldComponent.prototype, \"errorClass\", {\n        get: function () {\n            if (!this.control) {\n                return false;\n            }\n            return this.control.invalid && (this.control.touched || this.control.dirty);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"disabledClass\", {\n        get: function () {\n            if (!this.control) {\n                return false;\n            }\n            // radiobutton group\n            if (this.isRadioControl(this.control)) {\n                return false;\n            }\n            return this.disabledControl() ||\n                this.disabledElement() ||\n                this.disabledKendoInput();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"formControls\", {\n        set: function (formControls) {\n            this.validateFormControl(formControls);\n            this.control = formControls.first;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"horizontal\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.orientation === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"hasHints\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.showHints === 'always' ? true : this.showHintsInitial();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FormFieldComponent.prototype, \"hasErrors\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.showErrors === 'always' ? true : this.showErrorsInitial();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FormFieldComponent.prototype.ngAfterViewInit = function () {\n        this.setDescription();\n    };\n    FormFieldComponent.prototype.ngOnDestroy = function () {\n        this.subscriptions.unsubscribe();\n    };\n    FormFieldComponent.prototype.disabledKendoInput = function () {\n        return this.kendoInput && this.kendoInput.disabled;\n    };\n    FormFieldComponent.prototype.disabledControl = function () {\n        return this.control.disabled;\n    };\n    FormFieldComponent.prototype.disabledElement = function () {\n        var elements = this.controlElementRefs.toArray();\n        return elements.every(function (e) { return e.nativeElement.hasAttribute('disabled'); });\n    };\n    FormFieldComponent.prototype.validateFormControl = function (formControls) {\n        if (isDevMode() && formControls.length !== 1 && !this.isControlGroup(formControls)) {\n            throw new Error('The `kendo-formfield` component should contain ' +\n                'only one control of type NgControl with a formControlName(https://angular.io/api/forms/FormControlName)' +\n                'or an ngModel(https://angular.io/api/forms/NgModel) binding.');\n        }\n    };\n    FormFieldComponent.prototype.isControlGroup = function (formControls) {\n        var _this = this;\n        if (!formControls.length) {\n            return false;\n        }\n        var name = formControls.first.name;\n        return formControls.toArray().every(function (c) { return c.name === name && (_this.isRadioControl(c)); });\n    };\n    FormFieldComponent.prototype.isRadioControl = function (control) {\n        return control.valueAccessor instanceof RadioControlValueAccessor;\n    };\n    FormFieldComponent.prototype.updateDescription = function () {\n        var _this = this;\n        var controls = this.findControlElements();\n        if (!controls) {\n            return;\n        }\n        controls.forEach(function (control) {\n            if (_this.errorChildren.length > 0 || _this.hintChildren.length > 0) {\n                var ariaIds = _this.generateDescriptionIds(control);\n                _this.renderer.setAttribute(control, 'aria-describedby', ariaIds);\n            }\n        });\n    };\n    FormFieldComponent.prototype.findControlElements = function () {\n        if (!this.controlElementRefs) {\n            return;\n        }\n        // if the control is KendoInput and has focusableId - dropdowns, dateinputs\n        if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {\n            return [this.hostElement.nativeElement.querySelector(\"#\" + this.kendoInput.focusableId)];\n        }\n        return this.controlElementRefs.map(function (el) { return el.nativeElement; });\n    };\n    FormFieldComponent.prototype.generateDescriptionIds = function (control) {\n        var ids = new Set();\n        if (control.hasAttribute('aria-describedby')) {\n            var attributes = control.getAttribute('aria-describedby').split(' ');\n            attributes.forEach(function (attr) {\n                if (attr.includes('kendo-hint-') || attr.includes('kendo-error-')) {\n                    return;\n                }\n                ids.add(attr);\n            });\n        }\n        this.hintChildren.forEach(function (hint) {\n            ids.add(hint.id);\n        });\n        this.errorChildren.forEach(function (error) {\n            ids.add(error.id);\n        });\n        return Array.from(ids).join(' ');\n    };\n    FormFieldComponent.prototype.showHintsInitial = function () {\n        if (!this.control) {\n            return true;\n        }\n        var _a = this.control, valid = _a.valid, untouched = _a.untouched, pristine = _a.pristine;\n        return valid || (untouched && pristine);\n    };\n    FormFieldComponent.prototype.showErrorsInitial = function () {\n        if (!this.control) {\n            return false;\n        }\n        var _a = this.control, invalid = _a.invalid, dirty = _a.dirty, touched = _a.touched;\n        return invalid && (dirty || touched);\n    };\n    FormFieldComponent.prototype.setDescription = function () {\n        var _this = this;\n        this.updateDescription();\n        this.subscriptions.add(this.errorChildren.changes.subscribe(function () { return _this.updateDescription(); }));\n        this.subscriptions.add(this.hintChildren.changes.subscribe(function () { return _this.updateDescription(); }));\n    };\n    tslib_1.__decorate([\n        HostBinding('class.k-form-field'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], FormFieldComponent.prototype, \"hostClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], FormFieldComponent.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-form-field-error'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], FormFieldComponent.prototype, \"errorClass\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-form-field-disabled'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], FormFieldComponent.prototype, \"disabledClass\", null);\n    tslib_1.__decorate([\n        ContentChildren(NgControl, { descendants: true }),\n        tslib_1.__metadata(\"design:type\", QueryList),\n        tslib_1.__metadata(\"design:paramtypes\", [QueryList])\n    ], FormFieldComponent.prototype, \"formControls\", null);\n    tslib_1.__decorate([\n        ContentChildren(NgControl, { read: ElementRef, descendants: true }),\n        tslib_1.__metadata(\"design:type\", QueryList)\n    ], FormFieldComponent.prototype, \"controlElementRefs\", void 0);\n    tslib_1.__decorate([\n        ContentChild(KendoInput, { static: true }),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], FormFieldComponent.prototype, \"kendoInput\", void 0);\n    tslib_1.__decorate([\n        ContentChildren(ErrorComponent, { descendants: true }),\n        tslib_1.__metadata(\"design:type\", QueryList)\n    ], FormFieldComponent.prototype, \"errorChildren\", void 0);\n    tslib_1.__decorate([\n        ContentChildren(HintComponent, { descendants: true }),\n        tslib_1.__metadata(\"design:type\", QueryList)\n    ], FormFieldComponent.prototype, \"hintChildren\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], FormFieldComponent.prototype, \"showHints\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], FormFieldComponent.prototype, \"orientation\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], FormFieldComponent.prototype, \"showErrors\", void 0);\n    FormFieldComponent = tslib_1.__decorate([\n        Component({\n            selector: 'kendo-formfield',\n            template: \"\\n        <ng-content select=\\\"label, kendo-label\\\"></ng-content>\\n        <div [class.k-form-field-wrap]=\\\"horizontal\\\">\\n            <ng-content></ng-content>\\n            <ng-content select=\\\"kendo-formhint\\\" *ngIf=\\\"hasHints\\\"></ng-content>\\n            <ng-content select=\\\"kendo-formerror\\\" *ngIf=\\\"hasErrors\\\"></ng-content>\\n        </div>\\n    \",\n            providers: [\n                LocalizationService,\n                {\n                    provide: L10N_PREFIX,\n                    useValue: 'kendo.formfield'\n                }\n            ]\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n            LocalizationService,\n            ElementRef])\n    ], FormFieldComponent);\n    return FormFieldComponent;\n}());\nexport { FormFieldComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6CAmQ6C,AAWlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAIgB;;;;"}