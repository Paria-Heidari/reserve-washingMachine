{"version":3,"file":"rangeslider.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/rangeslider/rangeslider.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Renderer2, Component, ElementRef, Input, ViewChild, forwardRef, NgZone, Injector, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { take } from 'rxjs/operators';\nimport { trimValue, isSameRange, trimValueRange, validateValue } from '../sliders-common/sliders-util';\nimport { RangeSliderModel } from './rangeslider-model';\nimport { L10N_PREFIX, LocalizationService } from '@progress/kendo-angular-l10n';\nimport { eventValue, isStartHandle } from '../sliders-common/sliders-util';\nimport { invokeElementMethod } from '../common/dom-utils';\nimport { guid, isDocumentAvailable, Keys, KendoInput, anyChanged, hasObservers } from '@progress/kendo-angular-common';\nimport { requiresZoneOnBlur } from '../common/utils';\nimport { SliderBase } from '../sliders-common/slider-base';\nvar PRESSED = 'k-pressed';\n/**\n * Represents the [Kendo UI RangeSlider component for Angular]({% slug overview_rangeslider %}).\n */\nvar RangeSliderComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(RangeSliderComponent, _super);\n    function RangeSliderComponent(localization, injector, renderer, ngZone, changeDetector, hostElement) {\n        var _this = _super.call(this, localization, injector, renderer, ngZone, changeDetector, hostElement) || this;\n        _this.localization = localization;\n        _this.injector = injector;\n        _this.renderer = renderer;\n        _this.ngZone = ngZone;\n        _this.changeDetector = changeDetector;\n        _this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        _this.startHandleId = \"k-start-handle-\" + guid();\n        /**\n         * @hidden\n         */\n        _this.endHandleId = \"k-end-handle-\" + guid();\n        /**\n         * @hidden\n         */\n        _this.focusableId = _this.startHandleId;\n        _this.handleZIndex = 0;\n        _this.activeHandle = 'startHandle';\n        _this.focusChangedProgrammatically = false;\n        /**\n         * @hidden\n         */\n        _this.onWrapClick = function (args) {\n            if (!_this.isDisabled) {\n                _this.value = _this.value || [_this.min, _this.min];\n                var trackValue = eventValue(args, _this.track.nativeElement, _this.getProps());\n                var newRangeValue = void 0;\n                var _a = newRangeValue = _this.value, startValue = _a[0], endValue = _a[1];\n                if (trackValue <= startValue) {\n                    newRangeValue = [trackValue, endValue];\n                    _this.activeHandle = 'startHandle';\n                }\n                else if (startValue < trackValue && trackValue < endValue) {\n                    if (trackValue < (startValue + endValue) / 2) {\n                        newRangeValue = [trackValue, endValue];\n                        _this.activeHandle = 'startHandle';\n                    }\n                    else {\n                        newRangeValue = [startValue, trackValue];\n                        _this.activeHandle = 'endHandle';\n                    }\n                }\n                else if (trackValue >= endValue) {\n                    newRangeValue = [startValue, trackValue];\n                    _this.activeHandle = 'endHandle';\n                }\n                var activeHandle = _this.activeHandle === 'startHandle' ? _this.draghandleStart : _this.draghandleEnd;\n                invokeElementMethod(activeHandle, 'focus');\n                _this.changeValue(newRangeValue);\n            }\n        };\n        /**\n         * @hidden\n         */\n        _this.onKeyDown = function (e) {\n            _this.value = _this.value || [_this.min, _this.min];\n            var options = _this.getProps();\n            var max = options.max, min = options.min;\n            var handler = _this.keyBinding[e.keyCode];\n            if (_this.isDisabled || !handler) {\n                return;\n            }\n            _this.renderer.setStyle(e.target, 'zIndex', ++_this.handleZIndex);\n            var startHandleIsActive = isStartHandle(e.target);\n            var value = handler(tslib_1.__assign({}, options, { value: startHandleIsActive ? _this.value[0] : _this.value[1] }));\n            if (startHandleIsActive) {\n                if (value > _this.value[1]) {\n                    _this.value[1] = value;\n                }\n            }\n            else {\n                if (value < _this.value[0]) {\n                    _this.value[0] = value;\n                }\n            }\n            var trimmedValue = trimValue(max, min, value);\n            var newValue = startHandleIsActive ? [trimmedValue, _this.value[1]]\n                : [_this.value[0], trimmedValue];\n            _this.changeValue(newValue);\n            e.preventDefault();\n        };\n        _this.ngChange = function (_) { };\n        _this.ngTouched = function () { };\n        _this.handleBlur = function () {\n            _this.changeDetector.markForCheck();\n            _this.focused = false;\n            if (hasObservers(_this.onBlur) || requiresZoneOnBlur(_this.control)) {\n                _this.ngZone.run(function () {\n                    _this.ngTouched();\n                    if (!_this.focusChangedProgrammatically) {\n                        _this.onBlur.emit();\n                    }\n                });\n            }\n        };\n        return _this;\n    }\n    RangeSliderComponent_1 = RangeSliderComponent;\n    /**\n     * Focuses the RangeSlider.\n     *\n     * @example\n     * ```ts-no-run\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *     <div>\n     *         <button class=\"k-button\" (click)=\"slider.focus()\">Focus</button>\n     *     </div>\n     *     <kendo-rangeslider #slider></kendo-rangeslider>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    RangeSliderComponent.prototype.focus = function () {\n        this.focusChangedProgrammatically = true;\n        invokeElementMethod(this.draghandleStart, 'focus');\n        this.focusChangedProgrammatically = false;\n    };\n    /**\n     * Blurs the RangeSlider.\n     */\n    RangeSliderComponent.prototype.blur = function () {\n        this.focusChangedProgrammatically = true;\n        var activeHandle = this.activeHandle === 'startHandle' ? this.draghandleStart : this.draghandleEnd;\n        invokeElementMethod(activeHandle, 'blur');\n        this.handleBlur();\n        this.focusChangedProgrammatically = false;\n    };\n    RangeSliderComponent.prototype.ngOnInit = function () {\n        if (!this.value) {\n            this.value = [this.min, this.max];\n        }\n        _super.prototype.ngOnInit.call(this);\n    };\n    RangeSliderComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (anyChanged(['value', 'fixedTickWidth', 'tickPlacement'], changes, true)) {\n            if (changes.value && changes.value.currentValue) {\n                validateValue(changes.value.currentValue);\n            }\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(function () {\n                _this.sizeComponent();\n            });\n        }\n    };\n    RangeSliderComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.sizeComponent();\n        if (this.ticks) {\n            this.ticks.tickElements\n                .changes\n                .subscribe(function () { return _this.sizeComponent(); });\n        }\n        this.attachElementEventHandlers();\n    };\n    RangeSliderComponent.prototype.ngOnDestroy = function () {\n        if (this.subscriptions) {\n            this.subscriptions.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.textFor = function (key) {\n        return this.localization.get(key);\n    };\n    Object.defineProperty(RangeSliderComponent.prototype, \"valueText\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.value ? this.value[0] + \" - \" + this.value[1] : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.handleDragPress = function (args) {\n        if (args.originalEvent) {\n            args.originalEvent.preventDefault();\n        }\n        var target = args.originalEvent.target;\n        this.draggedHandle = target;\n        this.renderer.setStyle(target, 'zIndex', ++this.handleZIndex);\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.onHandleDrag = function (args) {\n        var _this = this;\n        this.value = this.value || [this.min, this.min];\n        var target = args.originalEvent.target;\n        var lastCoords = this.draggedHandle.getBoundingClientRect();\n        this.lastHandlePosition = { x: lastCoords.left, y: lastCoords.top };\n        this.dragging = { value: true, target: target };\n        var left = args.pageX < this.lastHandlePosition.x;\n        var right = args.pageX > this.lastHandlePosition.x;\n        var up = args.pageY > this.lastHandlePosition.y;\n        var moveStartHandle = function () { return _this.changeValue([eventValue(args, _this.track.nativeElement, _this.getProps()), _this.value[1]]); };\n        var moveEndHandle = function () { return _this.changeValue([_this.value[0], eventValue(args, _this.track.nativeElement, _this.getProps())]); };\n        var moveBothHandles = function () { return _this.changeValue([eventValue(args, _this.track.nativeElement, _this.getProps()), eventValue(args, _this.track.nativeElement, _this.getProps())]); };\n        var activeStartHandle = isStartHandle(this.draggedHandle);\n        var vertical = this.vertical;\n        var horizontal = !vertical;\n        var forward = (vertical && up) || (this.reverse ? horizontal && right : horizontal && left);\n        // const forward = (this.reverse ? (!this.vertical && !left) : (!this.vertical && left)) || (this.vertical && up);\n        if (this.value[0] === this.value[1]) {\n            if (forward) {\n                activeStartHandle ? moveStartHandle() : moveBothHandles();\n            }\n            else {\n                activeStartHandle ? moveBothHandles() : moveEndHandle();\n            }\n        }\n        else {\n            activeStartHandle ? moveStartHandle() : moveEndHandle();\n        }\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.onHandleRelease = function (args) {\n        this.dragging = { value: false, target: args.originalEvent.target }; //needed for animation\n        this.draggedHandle = undefined;\n    };\n    //ngModel binding\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.writeValue = function (value) {\n        validateValue(value);\n        this.value = value;\n        this.sizeComponent();\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.changeValue = function (value) {\n        var _this = this;\n        if (!this.value || !isSameRange(this.value, value)) {\n            this.ngZone.run(function () {\n                _this.value = value;\n                _this.ngChange(value);\n                if (_this.value) {\n                    _this.valueChange.emit(value);\n                }\n                _this.sizeComponent();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    RangeSliderComponent.prototype.sizeComponent = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var wrapper = this.wrapper.nativeElement;\n        var track = this.track.nativeElement;\n        var selectionEl = this.sliderSelection.nativeElement;\n        var dragHandleStartEl = this.draghandleStart.nativeElement;\n        var dragHandleEndEl = this.draghandleEnd.nativeElement;\n        var ticks = this.ticks ? this.ticksContainer.nativeElement : null;\n        this.resetStyles([track, selectionEl, dragHandleStartEl, dragHandleEndEl, ticks, this.hostElement.nativeElement]);\n        var props = this.getProps();\n        var model = new RangeSliderModel(props, wrapper, track, this.renderer);\n        model.resizeTrack();\n        if (this.ticks) { //for case when tickPlacement: none\n            model.resizeTicks(this.ticksContainer.nativeElement, this.ticks.tickElements.map(function (element) { return element.nativeElement; }));\n        }\n        model.positionHandle(dragHandleStartEl);\n        model.positionHandle(dragHandleEndEl);\n        model.positionSelection(dragHandleStartEl, selectionEl);\n        if (this.fixedTickWidth) {\n            model.resizeWrapper();\n        }\n    };\n    Object.defineProperty(RangeSliderComponent.prototype, \"isDisabled\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled || this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the FloatingLabel to determine if the component is empty.\n     */\n    RangeSliderComponent.prototype.isEmpty = function () {\n        return false;\n    };\n    Object.defineProperty(RangeSliderComponent.prototype, \"focused\", {\n        set: function (value) {\n            if (this.isFocused !== value && this.hostElement) {\n                this.isFocused = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RangeSliderComponent.prototype, \"dragging\", {\n        set: function (data) {\n            if (this.isDragged !== data.value && this.sliderSelection && this.draghandleStart && this.draghandleEnd) {\n                var sliderSelection = this.sliderSelection.nativeElement;\n                var draghandle = data.target;\n                if (data.value) {\n                    this.renderer.addClass(sliderSelection, PRESSED);\n                    this.renderer.addClass(draghandle, PRESSED);\n                }\n                else {\n                    this.renderer.removeClass(sliderSelection, PRESSED);\n                    this.renderer.removeClass(draghandle, PRESSED);\n                }\n                this.isDragged = data.value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    RangeSliderComponent.prototype.getProps = function () {\n        return {\n            disabled: this.disabled,\n            fixedTickWidth: this.fixedTickWidth,\n            largeStep: this.largeStep,\n            max: this.max,\n            min: this.min,\n            readonly: this.readonly,\n            reverse: this.reverse,\n            rtl: this.localizationService.rtl,\n            smallStep: this.smallStep,\n            value: trimValueRange(this.max, this.min, this.value),\n            vertical: this.vertical,\n            buttons: false\n        };\n    };\n    RangeSliderComponent.prototype.attachElementEventHandlers = function () {\n        var _this = this;\n        var hostElement = this.hostElement.nativeElement;\n        var tabbing = false;\n        var cursorInsideWrapper = false;\n        this.ngZone.runOutsideAngular(function () {\n            // focusIn and focusOut are relative to the host element\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {\n                if (!_this.isFocused) {\n                    _this.ngZone.run(function () {\n                        if (!_this.focusChangedProgrammatically) {\n                            _this.onFocus.emit();\n                        }\n                        _this.focused = true;\n                    });\n                }\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {\n                if (!_this.isFocused) {\n                    return;\n                }\n                if (tabbing) {\n                    if (args.relatedTarget !== _this.draghandleStart.nativeElement && args.relatedTarget !== _this.draghandleEnd.nativeElement) {\n                        _this.handleBlur();\n                    }\n                    tabbing = false;\n                }\n                else {\n                    if (!cursorInsideWrapper) {\n                        _this.handleBlur();\n                    }\n                }\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {\n                cursorInsideWrapper = true;\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {\n                cursorInsideWrapper = false;\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {\n                if (args.keyCode === Keys.Tab) {\n                    tabbing = true;\n                }\n                else {\n                    tabbing = false;\n                }\n            }));\n        });\n    };\n    var RangeSliderComponent_1;\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Array)\n    ], RangeSliderComponent.prototype, \"value\", void 0);\n    tslib_1.__decorate([\n        ViewChild('draghandleStart', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], RangeSliderComponent.prototype, \"draghandleStart\", void 0);\n    tslib_1.__decorate([\n        ViewChild('draghandleEnd', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], RangeSliderComponent.prototype, \"draghandleEnd\", void 0);\n    RangeSliderComponent = RangeSliderComponent_1 = tslib_1.__decorate([\n        Component({\n            exportAs: 'kendoRangeSlider',\n            providers: [\n                LocalizationService,\n                { provide: L10N_PREFIX, useValue: 'kendo.rangeslider' },\n                { multi: true, provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(function () { return RangeSliderComponent_1; }) },\n                { provide: KendoInput, useExisting: forwardRef(function () { return RangeSliderComponent_1; }) }\n            ],\n            selector: 'kendo-rangeslider',\n            template: \"\\n        <ng-container kendoSliderLocalizedMessages\\n            i18n-dragHandleStart=\\\"kendo.rangeslider.dragHandleStart|The title of the **Start** drag handle of the Slider.\\\"\\n            dragHandleStart=\\\"Drag\\\"\\n            i18n-dragHandleEnd=\\\"kendo.rangeslider.dragHandleEnd|The title of the **End** drag handle of the Slider.\\\"\\n            dragHandleEnd=\\\"Drag\\\"\\n        >\\n\\n        <div class=\\\"k-slider-wrap\\\" #wrap\\n            [class.k-slider-topleft]=\\\"tickPlacement === 'before'\\\"\\n            [class.k-slider-bottomright]=\\\"tickPlacement === 'after'\\\"\\n            [kendoEventsOutsideAngular]=\\\"{ click: onWrapClick, keydown: onKeyDown }\\\"\\n            >\\n            <ul kendoSliderTicks\\n                #ticks\\n                *ngIf=\\\"tickPlacement !== 'none'\\\"\\n                [tickTitle]=\\\"title\\\"\\n                [vertical]=\\\"vertical\\\"\\n                [step]=\\\"smallStep\\\"\\n                [largeStep]=\\\"largeStep\\\"\\n                [min]=\\\"min\\\"\\n                [max]=\\\"max\\\"\\n                [labelTemplate]=\\\"labelTemplate?.templateRef\\\"\\n                [attr.aria-hidden]=\\\"true\\\"\\n            >\\n            </ul>\\n            <div #track class=\\\"k-slider-track\\\">\\n                <div #sliderSelection class=\\\"k-slider-selection\\\">\\n                </div>\\n                <a #draghandleStart\\n                    role=\\\"slider\\\"\\n                    [id]=\\\"startHandleId\\\"\\n                    [attr.tabindex]=\\\"disabled ? undefined : tabindex\\\"\\n                    [attr.aria-valuemin]=\\\"min\\\"\\n                    [attr.aria-valuemax]=\\\"max\\\"\\n                    [attr.aria-valuenow]=\\\"value ? value[0] : null\\\"\\n                    [attr.aria-valuetext]=\\\"valueText\\\"\\n                    [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n                    [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n                    [attr.aria-orientation]=\\\"vertical ? 'vertical' : 'horizontal'\\\"\\n                    [style.touch-action]=\\\"isDisabled ? '' : 'none'\\\"\\n                    class=\\\"k-draghandle\\\"\\n                    [title]=\\\"textFor('dragHandleStart')\\\"\\n                    kendoDraggable\\n                    (kendoPress)=\\\"ifEnabled(handleDragPress ,$event)\\\"\\n                    (kendoDrag)=\\\"ifEnabled(onHandleDrag ,$event)\\\"\\n                    (kendoRelease)=\\\"ifEnabled(onHandleRelease, $event)\\\"\\n                ></a>\\n                <a #draghandleEnd\\n                    role=\\\"slider\\\"\\n                    [id]=\\\"endHandleId\\\"\\n                    [attr.tabindex]=\\\"disabled ? undefined : tabindex\\\"\\n                    [attr.aria-valuemin]=\\\"min\\\"\\n                    [attr.aria-valuemax]=\\\"max\\\"\\n                    [attr.aria-valuenow]=\\\"value ? value[1] : null\\\"\\n                    [attr.aria-valuetext]=\\\"valueText\\\"\\n                    [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n                    [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n                    [attr.aria-orientation]=\\\"vertical ? 'vertical' : 'horizontal'\\\"\\n                    [style.touch-action]=\\\"isDisabled ? '' : 'none'\\\"\\n                    class=\\\"k-draghandle\\\"\\n                    [title]=\\\"textFor('dragHandleEnd')\\\"\\n                    kendoDraggable\\n                    (kendoPress)=\\\"ifEnabled(handleDragPress ,$event)\\\"\\n                    (kendoDrag)=\\\"ifEnabled(onHandleDrag ,$event)\\\"\\n                    (kendoRelease)=\\\"ifEnabled(onHandleRelease, $event)\\\"\\n                ></a>\\n            </div>\\n\\n            <kendo-resize-sensor (resize)=\\\"sizeComponent()\\\"></kendo-resize-sensor>\\n        </div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [LocalizationService,\n            Injector,\n            Renderer2,\n            NgZone,\n            ChangeDetectorRef,\n            ElementRef])\n    ], RangeSliderComponent);\n    return RangeSliderComponent;\n}(SliderBase));\nexport { RangeSliderComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wEA6awE,AAW7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOkB;;;;"}