/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input, Output, EventEmitter, ViewChild, ElementRef, TemplateRef, ViewContainerRef, forwardRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PopupService } from '@progress/kendo-angular-popup';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { PreventableEvent, ActiveColorClickEvent } from './models';
import { parseColor } from './utils/color-parser';
import { isPresent } from '../common/utils';
import { Keys, KendoInput } from '@progress/kendo-angular-common';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { PALETTEPRESETS } from './utils/palette-presets';
import { ColorPickerLocalizationService } from './localization/colorpicker-localization.service';
import { ColorGradientComponent } from './color-gradient.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './localization/localized-colorpicker-messages.directive';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './color-gradient.component';
import * as ɵngcc4 from './color-palette.component';
import * as ɵngcc5 from './focus-on-dom-ready.directive';

const _c0 = ["palette"];
const _c1 = ["container"];
const _c2 = ["wrapper"];
const _c3 = ["popupTemplate"];
const _c4 = ["colorGradient"];
const _c5 = ["kendoColorPickerLocalizedMessages", "", "colorGradientNoColor", "Colorgradient no color chosen", "colorPaletteNoColor", "Colorpalette no color chosen", 6, "colorGradientHandle", "clearButton", "hueSliderHandle", "opacitySliderHandle", "hexInputPlaceholder", "redInputPlaceholder", "greenInputPlaceholder", "blueInputPlaceholder", "alphaInputPlaceholder"];
var I18N_6;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the gradient color drag handle chooser.
     * @meaning kendo.colorpicker.colorGradientHandle
     */ 
    const MSG_EXTERNAL_8067778471922495440$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_7 = goog.getMsg("Choose color");
    I18N_6 = MSG_EXTERNAL_8067778471922495440$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_7;
}
else {
    I18N_6 = ɵngcc0.ɵɵi18nLocalize("Choose color");
}
var I18N_8;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the clear button.
     * @meaning kendo.colorpicker.clearButton
     */ 
    const MSG_EXTERNAL_935472034136733879$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_9 = goog.getMsg("Clear value");
    I18N_8 = MSG_EXTERNAL_935472034136733879$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_9;
}
else {
    I18N_8 = ɵngcc0.ɵɵi18nLocalize("Clear value");
}
var I18N_10;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the hue slider handle.
     * @meaning kendo.colorpicker.hueSliderHandle
     */ 
    const MSG_EXTERNAL_1739045502529621844$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_11 = goog.getMsg("Set hue");
    I18N_10 = MSG_EXTERNAL_1739045502529621844$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_11;
}
else {
    I18N_10 = ɵngcc0.ɵɵi18nLocalize("Set hue");
}
var I18N_12;
if (ngI18nClosureMode) {
    /**
     * @desc The title for the opacity slider handle.
     * @meaning kendo.colorpicker.opacitySliderHandle
     */ 
    const MSG_EXTERNAL_1818720388700598438$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_13 = goog.getMsg("Set opacity");
    I18N_12 = MSG_EXTERNAL_1818720388700598438$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_13;
}
else {
    I18N_12 = ɵngcc0.ɵɵi18nLocalize("Set opacity");
}
var I18N_14;
if (ngI18nClosureMode) {
    /**
     * @desc The placeholder for the HEX color input.
     * @meaning kendo.colorpicker.hexInputPlaceholder
     */ 
    const MSG_EXTERNAL_67581802130075115$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_15 = goog.getMsg("HEX Color");
    I18N_14 = MSG_EXTERNAL_67581802130075115$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_15;
}
else {
    I18N_14 = ɵngcc0.ɵɵi18nLocalize("HEX Color");
}
var I18N_16;
if (ngI18nClosureMode) {
    /**
     * @desc The placeholder for the red color input.
     * @meaning kendo.colorpicker.redInputPlaceholder
     */ 
    const MSG_EXTERNAL_1242921922786989001$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_17 = goog.getMsg("Red");
    I18N_16 = MSG_EXTERNAL_1242921922786989001$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_17;
}
else {
    I18N_16 = ɵngcc0.ɵɵi18nLocalize("Red");
}
var I18N_18;
if (ngI18nClosureMode) {
    /**
     * @desc The placeholder for the green color input.
     * @meaning kendo.colorpicker.greenInputPlaceholder
     */ 
    const MSG_EXTERNAL_564969508273982379$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_19 = goog.getMsg("Green");
    I18N_18 = MSG_EXTERNAL_564969508273982379$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_19;
}
else {
    I18N_18 = ɵngcc0.ɵɵi18nLocalize("Green");
}
var I18N_20;
if (ngI18nClosureMode) {
    /**
     * @desc The placeholder for the blue color input.
     * @meaning kendo.colorpicker.blueInputPlaceholder
     */ 
    const MSG_EXTERNAL_2815824305218491249$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_21 = goog.getMsg("Blue");
    I18N_20 = MSG_EXTERNAL_2815824305218491249$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_21;
}
else {
    I18N_20 = ɵngcc0.ɵɵi18nLocalize("Blue");
}
var I18N_22;
if (ngI18nClosureMode) {
    /**
     * @desc The placeholder for the alpha input.
     * @meaning kendo.colorpicker.alphaInputPlaceholder
     */ 
    const MSG_EXTERNAL_7522085117867122625$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_23 = goog.getMsg("Alpha");
    I18N_22 = MSG_EXTERNAL_7522085117867122625$$DIST_ES_COLORPICKER_COLORPICKER_COMPONENT_JS_23;
}
else {
    I18N_22 = ɵngcc0.ɵɵi18nLocalize("Alpha");
}
const _c24 = ["colorGradientHandle", I18N_6, "clearButton", I18N_8, "hueSliderHandle", I18N_10, "opacitySliderHandle", I18N_12, "hexInputPlaceholder", I18N_14, "redInputPlaceholder", I18N_16, "greenInputPlaceholder", I18N_18, "blueInputPlaceholder", I18N_20, "alphaInputPlaceholder", I18N_22];
const _c25 = ["role", "listbox", 3, "ngClass", "id", "focus", "blur", "mousedown", "keydown"];
const _c26 = ["wrapper", ""];
const _c27 = ["class", "k-selected-color", 3, "background-color", "click", 4, "ngIf"];
const _c28 = ["class", "k-tool-icon", 3, "ngClass", "click", 4, "ngIf"];
const _c29 = [1, "k-select", 3, "click"];
const _c30 = [1, "k-icon", "k-i-arrow-s"];
const _c31 = ["popupTemplate", ""];
const _c32 = ["container", ""];
const _c33 = [1, "k-selected-color", 3, "click"];
const _c34 = ["class", "k-icon k-i-line", 4, "ngIf"];
const _c35 = [1, "k-icon", "k-i-line"];
function ColorPickerComponent_span_4_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", _c35);
} }
function ColorPickerComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r364 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", _c33);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_span_4_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r364); const ctx_r363 = ɵngcc0.ɵɵnextContext(); return ctx_r363.handleActiveColorClick(); });
    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_span_4_span_1_Template, 1, 0, "span", _c34);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r357 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("background-color", ctx_r357.value);
    ɵngcc0.ɵɵstylingApply();
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r357.value);
} }
const _c36 = [1, "k-tool-icon", 3, "ngClass", "click"];
const _c37 = [1, "k-selected-color"];
function ColorPickerComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    const _r366 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", _c36);
    ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_span_5_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r366); const ctx_r365 = ɵngcc0.ɵɵnextContext(); return ctx_r365.handleActiveColorClick(); });
    ɵngcc0.ɵɵelementStart(1, "span", _c37);
    ɵngcc0.ɵɵstyling();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r358 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ctx_r358.iconStyles);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵstyleProp("background-color", ctx_r358.value);
    ɵngcc0.ɵɵstylingApply();
} }
const _c38 = [3, "value", "format", "opacity", "clearButton", "delay", "focusout", "valueChange", "keydown", 4, "ngIf"];
const _c39 = ["kendoFocusOnDomReady", "", 3, "palette", "columns", "tileSize", "format", "value", "blur", "cellSelection", "mousedown", "keydown", 4, "ngIf"];
const _c40 = [3, "value", "format", "opacity", "clearButton", "delay", "focusout", "valueChange", "keydown"];
const _c41 = ["colorGradient", ""];
function ColorPickerComponent_ng_template_8_kendo_colorgradient_0_Template(rf, ctx) { if (rf & 1) {
    const _r371 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-colorgradient", _c40, _c41);
    ɵngcc0.ɵɵlistener("focusout", function ColorPickerComponent_ng_template_8_kendo_colorgradient_0_Template_kendo_colorgradient_focusout_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r371); const ctx_r370 = ɵngcc0.ɵɵnextContext(2); return ctx_r370.handlePopupBlur($event); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorPickerComponent_ng_template_8_kendo_colorgradient_0_Template_kendo_colorgradient_valueChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r371); const ctx_r372 = ɵngcc0.ɵɵnextContext(2); return ctx_r372.handleValueChange($event, false); });
    ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_ng_template_8_kendo_colorgradient_0_Template_kendo_colorgradient_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r371); const ctx_r373 = ɵngcc0.ɵɵnextContext(2); return ctx_r373.handlePopupKeyDown($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r367 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("value", ctx_r367.value)("format", ctx_r367.format)("opacity", ctx_r367.gradientSettings.opacity)("clearButton", ctx_r367.gradientSettings.clearButton)("delay", ctx_r367.gradientSettings.delay);
} }
const _c42 = ["kendoFocusOnDomReady", "", 3, "palette", "columns", "tileSize", "format", "value", "blur", "cellSelection", "mousedown", "keydown"];
const _c43 = ["palette", ""];
function ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template(rf, ctx) { if (rf & 1) {
    const _r376 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-colorpalette", _c42, _c43);
    ɵngcc0.ɵɵlistener("blur", function ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template_kendo_colorpalette_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r376); const ctx_r375 = ɵngcc0.ɵɵnextContext(2); return ctx_r375.handlePopupBlur($event); });
    ɵngcc0.ɵɵlistener("cellSelection", function ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template_kendo_colorpalette_cellSelection_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r376); const ctx_r377 = ɵngcc0.ɵɵnextContext(2); return ctx_r377.handleValueChange($event, true); });
    ɵngcc0.ɵɵlistener("mousedown", function ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template_kendo_colorpalette_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r376); return $event.preventDefault(); });
    ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template_kendo_colorpalette_keydown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r376); const ctx_r379 = ɵngcc0.ɵɵnextContext(2); return ctx_r379.handlePopupKeyDown($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r368 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("palette", ctx_r368.paletteSettings.palette)("columns", ctx_r368.paletteSettings.columns)("tileSize", ctx_r368.paletteSettings.tileSize)("format", ctx_r368.format)("value", ctx_r368.value);
} }
function ColorPickerComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ColorPickerComponent_ng_template_8_kendo_colorgradient_0_Template, 2, 5, "kendo-colorgradient", _c38);
    ɵngcc0.ɵɵtemplate(1, ColorPickerComponent_ng_template_8_kendo_colorpalette_1_Template, 2, 5, "kendo-colorpalette", _c39);
} if (rf & 2) {
    const ctx_r360 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r360.view === "gradient" || ctx_r360.view === "combo");
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r360.view === "palette" || ctx_r360.view === "combo");
} }
const _c44 = function (a1, a2) { return { "k-picker-wrap": true, "k-state-disabled": a1, "k-state-focused": a2 }; };
var DEFAULT_PRESET = 'office';
var DEFAULT_ACCESSIBLE_PRESET = 'accessible';
var serial = 0;
/**
 * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).
 * Designed to replace the `<input type="color">` HTML5 tag which is not widely supported in browsers.
 */
var ColorPickerComponent = /** @class */ (function () {
    function ColorPickerComponent(popupService, cdr, localizationService, ngZone) {
        var _this = this;
        this.popupService = popupService;
        this.cdr = cdr;
        this.localizationService = localizationService;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.hostClasses = true;
        /**
         * @hidden
         */
        this.focusableId = "k-colorpicker-" + serial++;
        /**
         * Sets what view the ColorPicker will render in the popup.
         */
        this.view = 'gradient';
        /**
         * Sets the read-only state of the ColorPicker.
         */
        this.readonly = false;
        /**
         * Sets the disabled state of the ColorPicker.
         */
        this.disabled = false;
        /**
         * Specifies the output format of the ColorPicker.
         * The input value may be in a different format. However, it will be parsed into the output `format`
         * after the component processes it.
         *
         * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.
         *
         * The supported values are:
         * * `rgba` (default)
         * * `hex`
         * * [name](https://www.w3.org/wiki/CSS/Properties/color/keywords)
         */
        this.format = 'rgba';
        /**
         * Fires each time the value is changed.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time ColorPicker is focused.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the ColorPicker is blurred.
         */
        this.onBlur = new EventEmitter();
        /**
         * Fires each time the left side of the ColorPicker wrapper is clicked.
         * The event is triggered regardless of whether a ColorPicker icon is set or not.
         *
         * The [ActiveColorClickEvent]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.
         */
        this.activeColorClick = new EventEmitter();
        this._tabindex = 0;
        this._popupSettings = { animate: true };
        this._paletteSettings = {};
        this._gradientSettings = { opacity: true, clearButton: false, delay: 0 };
        this.notifyNgTouched = function () { };
        this.notifyNgChanged = function () { };
        validatePackage(packageMetadata);
        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
        });
    }
    ColorPickerComponent_1 = ColorPickerComponent;
    Object.defineProperty(ColorPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * Specifies the value of the initially selected color.
         */
        set: function (value) {
            this._value = parseColor(value, this.format);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "popupSettings", {
        get: function () {
            return this._popupSettings;
        },
        /**
         * Configures the popup of the ColorPicker.
         */
        set: function (value) {
            this._popupSettings = Object.assign(this._popupSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "paletteSettings", {
        get: function () {
            return this._paletteSettings;
        },
        /**
         * Configures the palette that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._paletteSettings = Object.assign(this._paletteSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "gradientSettings", {
        get: function () {
            return this._gradientSettings;
        },
        /**
         * Configures the gradient that is displayed in the ColorPicker popup.
         */
        set: function (value) {
            this._gradientSettings = Object.assign(this._gradientSettings, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "tabindex", {
        get: function () {
            return !this.disabled ? this._tabindex : undefined;
        },
        /**
         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        set: function (value) {
            var tabindex = Number(value);
            var defaultValue = 0;
            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "isOpen", {
        /**
         * Indicates whether the ColorPicker popup is open.
         */
        get: function () {
            return isPresent(this.popupRef);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorPickerComponent.prototype, "iconStyles", {
        /**
         * @hidden
         */
        get: function () {
            if (this.iconClass) {
                return this.iconClass;
            }
            if (this.icon) {
                return "k-icon k-i-" + this.icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    ColorPickerComponent.prototype.ngOnInit = function () {
        var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;
        var settingsPalette = this._paletteSettings.palette;
        var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?
            PALETTEPRESETS[settingsPalette].columns :
            undefined;
        this._paletteSettings = {
            palette: settingsPalette || defaultPreset,
            tileSize: this._paletteSettings.tileSize || 24,
            columns: this._paletteSettings.columns || presetColumns || 10
        };
    };
    ColorPickerComponent.prototype.ngOnChanges = function (changes) {
        if (changes.format && changes.format.currentValue === 'name') {
            this.view = 'palette';
        }
        if (this.view === 'gradient' && this.gradientSettings.opacity) {
            this.format = 'rgba';
            this.value = parseColor(this.value, this.format);
        }
    };
    ColorPickerComponent.prototype.ngOnDestroy = function () {
        this.closePopup();
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperClick = function () {
        this.toggleWithEvents(!this.isOpen);
        this.focus();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleActiveColorClick = function () {
        this.focus();
        var event = new ActiveColorClickEvent(this.value);
        this.activeColorClick.emit(event);
        if (!event.isOpenPrevented() || this.isOpen) {
            this.handleWrapperClick();
        }
    };
    /**
     * Focuses the wrapper of the ColorPicker.
     */
    ColorPickerComponent.prototype.focus = function () {
        if (this.disabled) {
            return;
        }
        this.wrapper.nativeElement.focus();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperFocus = function () {
        if (isPresent(this.palette)) {
            this.palette.nativeElement.focus();
        }
        if (this.isFocused) {
            return;
        }
        this.isFocused = true;
        this.onFocus.emit();
    };
    /**
     * Blurs the ColorPicker.
     */
    ColorPickerComponent.prototype.blur = function () {
        this.wrapper.nativeElement.blur();
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperBlur = function () {
        if (this.isOpen) {
            return;
        }
        this.isFocused = false;
        this.onBlur.emit();
        this.notifyNgTouched();
    };
    /**
     * Clears the color value of the ColorPicker.
     */
    ColorPickerComponent.prototype.reset = function () {
        if (!isPresent(this.value)) {
            return;
        }
        this._value = undefined;
        this.notifyNgChanged(undefined);
    };
    /**
     * Toggles the popup of the ColorPicker.
     * Does not trigger the `open` and `close` events of the component.
     *
     * @param open An optional parameter. Specifies whether the popup will be opened or closed.
     */
    ColorPickerComponent.prototype.toggle = function (open) {
        if (this.disabled || this.readonly) {
            return;
        }
        this.closePopup();
        open = isPresent(open) ? open : !this.isOpen;
        if (open) {
            this.openPopup();
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleValueChange = function (color, closePopup) {
        var parsedColor = parseColor(color, this.format);
        var valueChange = parsedColor !== this.value;
        if (closePopup) {
            this.toggleWithEvents(false);
            this.focus();
        }
        if (valueChange) {
            this.value = parsedColor;
            this.valueChange.emit(parsedColor);
            this.notifyNgChanged(parsedColor);
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupBlur = function (event) {
        var focusInPopupElement = this.popupRef.popupElement.contains(event.relatedTarget);
        var wrapperClicked = event.relatedTarget === this.wrapper.nativeElement;
        if (!this.isFocused || wrapperClicked || focusInPopupElement) {
            return;
        }
        this.isFocused = false;
        this.onBlur.emit();
        this.notifyNgTouched();
        this.toggleWithEvents(false);
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnChange = function (fn) {
        this.notifyNgChanged = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.registerOnTouched = function (fn) {
        this.notifyNgTouched = fn;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.setDisabledState = function (isDisabled) {
        this.cdr.markForCheck();
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handleWrapperKeyDown = function (event) {
        if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {
            event.preventDefault();
            this.toggleWithEvents(true);
        }
    };
    /**
     * @hidden
     */
    ColorPickerComponent.prototype.handlePopupKeyDown = function (event) {
        if (event.keyCode === Keys.Escape) {
            this.toggleWithEvents(false);
            this.wrapper.nativeElement.focus();
        }
        if (event.keyCode === Keys.Tab) {
            var firstElement = this.colorGradient ? this.colorGradient.gradientDragHandle.nativeElement : this.palette.nativeElement;
            var lastElement = this.palette ? this.palette.nativeElement :
                this.colorGradient.inputs.opacityInput.nativeElement.childNodes[1].children[0];
            if (event.shiftKey) {
                if (event.target === firstElement) {
                    event.preventDefault();
                    lastElement.focus();
                    return;
                }
            }
            else {
                if (event.target === lastElement) {
                    event.preventDefault();
                    firstElement.focus();
                    return;
                }
            }
        }
    };
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    ColorPickerComponent.prototype.isEmpty = function () {
        return false;
    };
    ColorPickerComponent.prototype.toggleWithEvents = function (open) {
        var _this = this;
        var sameState = this.isOpen === open;
        if (this.disabled || this.readonly || sameState) {
            return;
        }
        var eventArgs = new PreventableEvent();
        open ? this.open.emit(eventArgs) : this.close.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.toggle(open);
        }
        if (open) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    if (_this.colorGradient) {
                        _this.colorGradient.gradientDragHandle.nativeElement.focus();
                    }
                });
            });
        }
    };
    ColorPickerComponent.prototype.openPopup = function () {
        var _this = this;
        var horizontalAlign = this.direction === "rtl" ? "right" : "left";
        var anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        var popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            animate: this.popupSettings.animate,
            appendTo: this.popupSettings.appendTo,
            popupAlign: popupPosition,
            anchorAlign: anchorPosition,
            popupClass: 'k-colorpicker-popup',
            content: this.popupTemplate,
            positionMode: 'absolute'
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(function () {
            _this.toggleWithEvents(false);
            if (!_this.isOpen) {
                _this.wrapper.nativeElement.focus({
                    preventScroll: true
                });
            }
        });
    };
    ColorPickerComponent.prototype.closePopup = function () {
        if (!this.isOpen) {
            return;
        }
        this.popupRef.close();
        this.popupRef = null;
        this.palette = null;
    };
    var ColorPickerComponent_1;
    tslib_1.__decorate([
        HostBinding('class.k-widget'),
        HostBinding('class.k-colorpicker'),
        tslib_1.__metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], ColorPickerComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ColorPickerComponent.prototype, "focusableId", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ColorPickerComponent.prototype, "view", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "readonly", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ColorPickerComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ColorPickerComponent.prototype, "format", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], ColorPickerComponent.prototype, "value", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "popupSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "paletteSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ColorPickerComponent.prototype, "gradientSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], ColorPickerComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object)
    ], ColorPickerComponent.prototype, "iconClass", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], ColorPickerComponent.prototype, "tabindex", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "valueChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "open", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "close", void 0);
    tslib_1.__decorate([
        Output('focus'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "onFocus", void 0);
    tslib_1.__decorate([
        Output('blur'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "onBlur", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], ColorPickerComponent.prototype, "activeColorClick", void 0);
    tslib_1.__decorate([
        ViewChild('container', { read: ViewContainerRef, static: true }),
        tslib_1.__metadata("design:type", ViewContainerRef)
    ], ColorPickerComponent.prototype, "container", void 0);
    tslib_1.__decorate([
        ViewChild('wrapper', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ColorPickerComponent.prototype, "wrapper", void 0);
    tslib_1.__decorate([
        ViewChild('popupTemplate', { static: true }),
        tslib_1.__metadata("design:type", TemplateRef)
    ], ColorPickerComponent.prototype, "popupTemplate", void 0);
    tslib_1.__decorate([
        ViewChild('palette', { read: ElementRef, static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], ColorPickerComponent.prototype, "palette", void 0);
    tslib_1.__decorate([
        ViewChild('colorGradient', { static: false }),
        tslib_1.__metadata("design:type", ColorGradientComponent)
    ], ColorPickerComponent.prototype, "colorGradient", void 0);
    ColorPickerComponent = ColorPickerComponent_1 = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [PopupService,
            ChangeDetectorRef,
            LocalizationService,
            NgZone])
    ], ColorPickerComponent);
ColorPickerComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorPickerComponent, selectors: [["kendo-colorpicker"]], factory: function ColorPickerComponent_Factory(t) { return new (t || ColorPickerComponent)(ɵngcc0.ɵɵdirectiveInject(PopupService), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(NgZone)); }, viewQuery: function ColorPickerComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true, ViewContainerRef);
        ɵngcc0.ɵɵstaticViewQuery(_c2, true);
        ɵngcc0.ɵɵstaticViewQuery(_c3, true);
        ɵngcc0.ɵɵviewQuery(_c4, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.palette = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.wrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.colorGradient = _t.first);
    } }, hostBindings: function ColorPickerComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(3);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses);
        ɵngcc0.ɵɵclassProp("k-colorpicker", ctx.hostClasses);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { focusableId: "focusableId", view: "view", readonly: "readonly", disabled: "disabled", format: "format", value: "value", popupSettings: "popupSettings", paletteSettings: "paletteSettings", gradientSettings: "gradientSettings", tabindex: "tabindex", icon: "icon", iconClass: "iconClass" }, outputs: { valueChange: "valueChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur", activeColorClick: "activeColorClick" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return ColorPickerComponent_1; })
            }, {
                provide: KendoInput,
                useExisting: forwardRef(function () { return ColorPickerComponent_1; })
            },
            ColorPickerLocalizationService,
            {
                provide: LocalizationService,
                useExisting: ColorPickerLocalizationService
            },
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.colorpicker'
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature()], consts: 12, vars: 12, template: function ColorPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, _c5);
        ɵngcc0.ɵɵi18nAttributes(1, _c24);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "span", _c25, _c26);
        ɵngcc0.ɵɵlistener("focus", function ColorPickerComponent_Template_span_focus_2_listener($event) { return ctx.handleWrapperFocus(); });
        ɵngcc0.ɵɵlistener("blur", function ColorPickerComponent_Template_span_blur_2_listener($event) { return ctx.handleWrapperBlur(); });
        ɵngcc0.ɵɵlistener("mousedown", function ColorPickerComponent_Template_span_mousedown_2_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵlistener("keydown", function ColorPickerComponent_Template_span_keydown_2_listener($event) { return ctx.handleWrapperKeyDown($event); });
        ɵngcc0.ɵɵtemplate(4, ColorPickerComponent_span_4_Template, 2, 2, "span", _c27);
        ɵngcc0.ɵɵtemplate(5, ColorPickerComponent_span_5_Template, 2, 2, "span", _c28);
        ɵngcc0.ɵɵelementStart(6, "span", _c29);
        ɵngcc0.ɵɵlistener("click", function ColorPickerComponent_Template_span_click_6_listener($event) { return ctx.handleWrapperClick(); });
        ɵngcc0.ɵɵelement(7, "span", _c30);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(8, ColorPickerComponent_ng_template_8_Template, 2, 2, "ng-template", null, _c31, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementContainer(10, null, _c32);
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c44, ctx.disabled, ctx.isFocused))("id", ctx.focusableId);
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.isOpen)("aria-readonly", ctx.readonly)("aria-disabled", ctx.disabled)("aria-label", ctx.value)("tabindex", ctx.tabindex);
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.iconStyles);
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.iconStyles);
    } }, directives: [ɵngcc1.LocalizedColorPickerMessagesDirective, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.ColorGradientComponent, ɵngcc4.ColorPaletteComponent, ɵngcc5.FocusOnDomReadyDirective], encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorPickerComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorpicker',
                providers: [{
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return ColorPickerComponent_1; })
                    }, {
                        provide: KendoInput,
                        useExisting: forwardRef(function () { return ColorPickerComponent_1; })
                    },
                    ColorPickerLocalizationService,
                    {
                        provide: LocalizationService,
                        useExisting: ColorPickerLocalizationService
                    },
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.colorpicker'
                    }
                ],
                template: "\n        <ng-container kendoColorPickerLocalizedMessages\n            i18n-colorGradient=\"kendo.colorpicker.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\"\n            colorGradientNoColor=\"Colorgradient no color chosen\"\n            i18n-colorGradient=\"kendo.colorpalette.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\"\n            colorPaletteNoColor=\"Colorpalette no color chosen\"\n            i18n-colorGradientHandle=\"kendo.colorpicker.colorGradientHandle|The title for the gradient color drag handle chooser.\"\n            colorGradientHandle=\"Choose color\"\n            i18n-clearButton=\"kendo.colorpicker.clearButton|The title for the clear button.\"\n            clearButton=\"Clear value\"\n            i18n-hueSliderHandle=\"kendo.colorpicker.hueSliderHandle|The title for the hue slider handle.\"\n            hueSliderHandle=\"Set hue\"\n            i18n-opacitySliderHandle=\"kendo.colorpicker.opacitySliderHandle|The title for the opacity slider handle.\"\n            opacitySliderHandle=\"Set opacity\"\n            i18n-hexInputPlaceholder=\"kendo.colorpicker.hexInputPlaceholder|The placeholder for the HEX color input.\"\n            hexInputPlaceholder=\"HEX Color\"\n            i18n-redInputPlaceholder=\"kendo.colorpicker.redInputPlaceholder|The placeholder for the red color input.\"\n            redInputPlaceholder=\"Red\"\n            i18n-greenInputPlaceholder=\"kendo.colorpicker.greenInputPlaceholder|The placeholder for the green color input.\"\n            greenInputPlaceholder=\"Green\"\n            i18n-blueInputPlaceholder=\"kendo.colorpicker.blueInputPlaceholder|The placeholder for the blue color input.\"\n            blueInputPlaceholder=\"Blue\"\n            i18n-alphaInputPlaceholder=\"kendo.colorpicker.alphaInputPlaceholder|The placeholder for the alpha input.\"\n            alphaInputPlaceholder=\"Alpha\">\n        </ng-container>\n        <span\n            #wrapper\n            [ngClass]=\"{\n                'k-picker-wrap': true,\n                'k-state-disabled': this.disabled,\n                'k-state-focused': this.isFocused\n            }\"\n            role=\"listbox\"\n            [attr.aria-expanded]=\"isOpen\"\n            [attr.aria-readonly]=\"readonly\"\n            [attr.aria-disabled]=\"disabled\"\n            [attr.aria-label]=\"value\"\n            [id]=\"focusableId\"\n            [attr.tabindex]=\"tabindex\"\n            (focus)=\"handleWrapperFocus()\"\n            (blur)=\"handleWrapperBlur()\"\n            (mousedown)=\"$event.preventDefault()\"\n            (keydown)=\"handleWrapperKeyDown($event)\"\n        >\n            <span *ngIf=\"!iconStyles\" class=\"k-selected-color\" [style.background-color]=\"value\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-icon k-i-line\" *ngIf=\"!value\"></span>\n            </span>\n            <span *ngIf=\"iconStyles\" class=\"k-tool-icon\" [ngClass]=\"iconStyles\" (click)=\"handleActiveColorClick()\">\n                <span class=\"k-selected-color\" [style.background-color]=\"value\"></span>\n            </span>\n            <span class=\"k-select\" (click)=\"handleWrapperClick()\">\n                <span class=\"k-icon k-i-arrow-s\"></span>\n            </span>\n        </span>\n        <ng-template #popupTemplate>\n            <kendo-colorgradient  #colorGradient\n                *ngIf=\"view === 'gradient' || view === 'combo'\"\n                [value]=\"value\"\n                [format]=\"format\"\n                [opacity]=\"gradientSettings.opacity\"\n                [clearButton]=\"gradientSettings.clearButton\"\n                [delay]=\"gradientSettings.delay\"\n                (focusout)=\"handlePopupBlur($event)\"\n                (valueChange)=\"handleValueChange($event, false)\"\n                (keydown)=\"handlePopupKeyDown($event)\"\n            >\n            </kendo-colorgradient>\n            <kendo-colorpalette\n                #palette\n                *ngIf=\"view === 'palette' || view === 'combo'\"\n                kendoFocusOnDomReady\n                [palette]=\"paletteSettings.palette\"\n                [columns]=\"paletteSettings.columns\"\n                [tileSize]=\"paletteSettings.tileSize\"\n                [format]=\"format\"\n                [value]=\"value\"\n                (blur)=\"handlePopupBlur($event)\"\n                (cellSelection)=\"handleValueChange($event, true)\"\n                (mousedown)=\"$event.preventDefault()\"\n                (keydown)=\"handlePopupKeyDown($event)\"\n            >\n            </kendo-colorpalette>\n        </ng-template>\n        <ng-container #container></ng-container>\n    "
            }]
    }], function () { return [{ type: PopupService }, { type: ChangeDetectorRef }, { type: LocalizationService }, { type: NgZone }]; }, { popupService: [], cdr: [], localizationService: [], ngZone: [], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-colorpicker']
        }], focusableId: [{
            type: Input
        }], view: [{
            type: Input
        }], readonly: [{
            type: Input
        }], disabled: [{
            type: Input
        }], format: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], activeColorClick: [{
            type: Output
        }], _tabindex: [], _popupSettings: [], _paletteSettings: [], _gradientSettings: [], notifyNgTouched: [], notifyNgChanged: [], dynamicRTLSubscription: [], value: [{
            type: Input
        }], value: [], popupSettings: [{
            type: Input
        }], popupSettings: [], paletteSettings: [{
            type: Input
        }], paletteSettings: [], gradientSettings: [{
            type: Input
        }], gradientSettings: [], tabindex: [{
            type: Input
        }], tabindex: [], isOpen: [], iconStyles: [], ngOnInit: [], ngOnChanges: [], ngOnDestroy: [], handleWrapperClick: [], handleActiveColorClick: [], focus: [], handleWrapperFocus: [], isFocused: [], blur: [], handleWrapperBlur: [], reset: [], _value: [], toggle: [], handleValueChange: [], handlePopupBlur: [], writeValue: [], registerOnChange: [], registerOnTouched: [], setDisabledState: [], handleWrapperKeyDown: [], handlePopupKeyDown: [], isEmpty: [], toggleWithEvents: [], openPopup: [], popupRef: [], closePopup: [], palette: [{
            type: ViewChild,
            args: ['palette', { read: ElementRef, static: false }]
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], icon: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate', { static: true }]
        }], colorGradient: [{
            type: ViewChild,
            args: ['colorGradient', { static: false }]
        }] });
    return ColorPickerComponent;
}());
export { ColorPickerComponent };

//# sourceMappingURL=colorpicker.component.js.map