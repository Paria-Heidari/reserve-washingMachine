{"version":3,"file":"color-gradient.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/colorpicker/color-gradient.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, Input, ViewChild, ElementRef, Renderer2, NgZone, Output, EventEmitter, HostBinding, forwardRef, ChangeDetectorRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { parseColor, getHSV, getColorFromHSV, getColorFromHue } from './utils';\nimport { isPresent, fitIntoBounds } from '../common/utils';\nimport { isChanged, isDocumentAvailable, KendoInput } from '@progress/kendo-angular-common';\nimport { containsFocus, isUntouched } from '../common/dom-utils';\nimport { SliderComponent } from '../slider/slider.component';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { Subject } from 'rxjs';\nimport { ColorGradientLocalizationService } from './localization/colorgradient-localization.service';\nimport { ColorInputComponent } from './color-input.component';\nimport { throttleTime } from 'rxjs/operators';\nimport { DEFAULT_GRADIENT_BACKGROUND_COLOR, DEFAULT_OUTPUT_FORMAT, DRAGHANDLE_MOVE_SPEED } from './constants';\nvar serial = 0;\n/**\n * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.\n * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.\n */\nvar ColorGradientComponent = /** @class */ (function () {\n    function ColorGradientComponent(host, ngZone, renderer, cdr, localizationService) {\n        var _this = this;\n        this.host = host;\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.cdr = cdr;\n        this.localizationService = localizationService;\n        /**\n         * @hidden\n         */\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.id = \"k-colorgradient-\" + serial++;\n        /**\n         * Defines whether the alpha slider will be displayed.\n         */\n        this.opacity = true;\n        /**\n         * Sets the disabled state of the ColorGradient.\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the ColorGradient.\n         */\n        this.readonly = false;\n        /**\n         * Specifies whether the ColorGradient should display a 'Clear color' button.\n         */\n        this.clearButton = false;\n        /**\n         * Determines the delay time (in milliseconds) before the value is changed on handle drag. A value of 0 indicates no delay.\n         *\n         * @default 0\n         */\n        this.delay = 0;\n        /**\n         * Fires each time the user selects a new color.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.backgroundColor = DEFAULT_GRADIENT_BACKGROUND_COLOR;\n        /**\n         * @hidden\n         *\n         * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.\n         * The values are initially set in `ngOnInit` or in `ngOnChanges` and are\n         * updated on moving the drag handle or the sliders.\n         */\n        this.hsva = {};\n        /**\n         * Specifies the output format of the ColorGradientComponent.\n         * The input value may be in a different format. However, it will be parsed into the output `format`\n         * after the component processes it.\n         *\n         * The supported values are:\n         * * (Default) `rgba`\n         * * `hex`\n         */\n        this.format = DEFAULT_OUTPUT_FORMAT;\n        this._tabindex = 0;\n        this.listeners = [];\n        this.updateValues = new Subject();\n        this.notifyNgChanged = function () { };\n        this.notifyNgTouched = function () { };\n        this.dynamicRTLSubscription = localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    ColorGradientComponent_1 = ColorGradientComponent;\n    Object.defineProperty(ColorGradientComponent.prototype, \"readonlyAttribute\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.readonly;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"disabledClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"hostTabindex\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.tabindex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"gradientId\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the initially selected color.\n         */\n        set: function (value) {\n            this._value = parseColor(value, this.format);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"tabindex\", {\n        get: function () {\n            return !this.disabled ? this._tabindex : undefined;\n        },\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        set: function (value) {\n            var tabindex = Number(value);\n            var defaultValue = 0;\n            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"isFocused\", {\n        /**\n         * Indicates whether the ColorGradient or any of its content is focused.\n         */\n        get: function () {\n            if (!(isDocumentAvailable() && isPresent(this.host))) {\n                return false;\n            }\n            return this.host.nativeElement === document.activeElement || this.host.nativeElement.contains(document.activeElement);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"alphaSliderValue\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            // setting the initial value to undefined to force the slider to recalculate the height of the slider track on the next cdr run\n            if (!(isPresent(this.hsva) && isPresent(this.hsva.a))) {\n                return;\n            }\n            return this.hsva.a * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"gradientRect\", {\n        get: function () {\n            return this.gradientWrapper.nativeElement.getBoundingClientRect();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"contrastToolVisible\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return typeof this.contrastTool === 'string' && this.contrastTool !== '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColorGradientComponent.prototype.ngAfterViewInit = function () {\n        this.updateUI();\n        this.cdr.detectChanges();\n        this.addEventListeners();\n        this.subscribeChanges();\n    };\n    ColorGradientComponent.prototype.ngOnChanges = function (changes) {\n        if (isChanged('value', changes) && !this.isFocused) {\n            this.updateUI();\n        }\n        if (isChanged('delay', changes)) {\n            this.unsubscribeChanges();\n            this.subscribeChanges();\n        }\n    };\n    ColorGradientComponent.prototype.ngOnDestroy = function () {\n        this.listeners.forEach(function (removeListener) { return removeListener(); });\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n        this.unsubscribeChanges();\n    };\n    /**\n     * Focuses the component.\n     */\n    ColorGradientComponent.prototype.focus = function () {\n        if (this.disabled) {\n            return;\n        }\n        this.host.nativeElement.focus();\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.reset = function () {\n        this.handleValueChange(undefined);\n        this.updateUI();\n        this.host.nativeElement.focus();\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.handleDragPress = function (args) {\n        if (this.disabled || this.readonly || !isPresent(args.originalEvent)) {\n            return;\n        }\n        this.focus();\n        args.originalEvent.preventDefault();\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.onHandleDrag = function (args) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');\n        this.changePosition(args);\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.onHandleRelease = function () {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.renderer.removeClass(this.gradientWrapper.nativeElement, 'k-dragging');\n        this.handleValueChange(getColorFromHSV(this.hsva));\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.onKeyboardAction = function (args) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        if (args.key && args.key.indexOf('Arrow') !== -1) {\n            args.preventDefault();\n            var dragHandleElement = this.gradientDragHandle.nativeElement;\n            this.renderer.addClass(this.gradientWrapper.nativeElement, 'k-dragging');\n            var keyboardMoveX = 0;\n            var keyboardMoveY = 0;\n            switch (args.key) {\n                case 'ArrowRight':\n                    keyboardMoveX = DRAGHANDLE_MOVE_SPEED;\n                    break;\n                case 'ArrowLeft':\n                    keyboardMoveX = -DRAGHANDLE_MOVE_SPEED;\n                    break;\n                case 'ArrowUp':\n                    keyboardMoveY = -DRAGHANDLE_MOVE_SPEED;\n                    break;\n                case 'ArrowDown':\n                    keyboardMoveY = DRAGHANDLE_MOVE_SPEED;\n                    break;\n                default: break;\n            }\n            var newY_1 = parseInt(dragHandleElement.style.top, 10) + keyboardMoveY;\n            var newX_1 = parseInt(dragHandleElement.style.left, 10) + keyboardMoveX;\n            this.renderer.setStyle(dragHandleElement, 'top', newY_1 + \"px\");\n            this.renderer.setStyle(dragHandleElement, 'left', newX_1 + \"px\");\n            this.ngZone.run(function () { return _this.moveDragHandle(newX_1, newY_1); });\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.changePosition = function (position) {\n        var _this = this;\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.gradientDragHandle.nativeElement.focus();\n        var newX = position.clientX - this.gradientRect.left;\n        var newY = position.clientY - this.gradientRect.top;\n        this.ngZone.run(function () { return _this.moveDragHandle(newX, newY); });\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.handleHueSliderChange = function (hue) {\n        this.handleValueChange(getColorFromHSV(this.hsva));\n        this.backgroundColor = getColorFromHue(hue);\n        this.setAlphaSliderBackground(this.backgroundColor);\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.handleAlphaSliderChange = function (alpha) {\n        this.hsva.a = alpha / 100;\n        this.handleValueChange(getColorFromHSV(this.hsva));\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.handleInputsValueChange = function (color) {\n        var parsed = parseColor(color, this.format);\n        if (this.value !== parsed) {\n            this.handleValueChange(parsed);\n            this.updateUI();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.writeValue = function (value) {\n        this.value = value;\n        if (isPresent(this.gradientWrapper)) {\n            this.updateUI();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.registerOnChange = function (fn) {\n        this.notifyNgChanged = fn;\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.registerOnTouched = function (fn) {\n        this.notifyNgTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    ColorGradientComponent.prototype.setDisabledState = function (isDisabled) {\n        this.cdr.markForCheck();\n        this.disabled = isDisabled;\n    };\n    Object.defineProperty(ColorGradientComponent.prototype, \"colorGradientHandleTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('colorGradientHandle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"colorGradientHandleAriaLabel\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            var parsed = parseColor(this.value, this.format);\n            return \"\" + (this.value ? parsed : this.localizationService.get('colorGradientHandle'));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"hueSliderTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('hueSliderHandle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"opacitySliderTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('opacitySliderHandle');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorGradientComponent.prototype, \"clearButtonTitle\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.localizationService.get('clearButton');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    ColorGradientComponent.prototype.isEmpty = function () {\n        return false;\n    };\n    ColorGradientComponent.prototype.moveDragHandle = function (positionX, positionY) {\n        var top = fitIntoBounds(positionY, 0, this.gradientRect.height);\n        var left = fitIntoBounds(positionX, 0, this.gradientRect.width);\n        this.setDragHandleElementPosition(top, left);\n        this.hsva.s = left / this.gradientRect.width;\n        this.hsva.v = 1 - top / this.gradientRect.height;\n        this.updateValues.next(getColorFromHSV(this.hsva));\n        this.setAlphaSliderBackground(getColorFromHSV(tslib_1.__assign({}, this.hsva, { a: 1 })));\n    };\n    ColorGradientComponent.prototype.updateUI = function () {\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        this.hsva = this.value ? getHSV(this.value) : { h: 0, s: 0, v: 1, a: 1 };\n        var top = (1 - this.hsva.v) * this.gradientRect.height;\n        var left = this.hsva.s * this.gradientRect.width;\n        this.setDragHandleElementPosition(top, left);\n        this.backgroundColor = getColorFromHue(this.hsva.h);\n        this.setAlphaSliderBackground(this.backgroundColor);\n        this.setHostElementAriaLabel();\n    };\n    ColorGradientComponent.prototype.handleValueChange = function (color) {\n        if (this.value === color) {\n            return;\n        }\n        this.value = color;\n        this.valueChange.emit(color);\n        this.notifyNgChanged(color);\n        this.setHostElementAriaLabel();\n    };\n    ColorGradientComponent.prototype.setDragHandleElementPosition = function (top, left) {\n        var dragHandle = this.gradientDragHandle.nativeElement;\n        this.renderer.setStyle(dragHandle, 'top', top + \"px\");\n        this.renderer.setStyle(dragHandle, 'left', left + \"px\");\n    };\n    ColorGradientComponent.prototype.setAlphaSliderBackground = function (backgroundColor) {\n        if (!isPresent(this.alphaSlider)) {\n            return;\n        }\n        var sliderTrack = this.alphaSlider.track.nativeElement;\n        this.renderer.setStyle(sliderTrack, 'background', \"linear-gradient(to top, transparent, \" + backgroundColor + \")\");\n    };\n    ColorGradientComponent.prototype.setHostElementAriaLabel = function () {\n        var parsed = parseColor(this.value, this.format);\n        this.renderer.setAttribute(this.host.nativeElement, 'aria-label', \"\" + (this.value ? parsed : this.localizationService.get('colorGradientNoColor')));\n    };\n    ColorGradientComponent.prototype.addEventListeners = function () {\n        var _this = this;\n        this.ngZone.runOutsideAngular(function () {\n            var focusOutListener = _this.renderer.listen(_this.host.nativeElement, 'focusout', function (event) {\n                if (!containsFocus(_this.host.nativeElement, event.relatedTarget) && isUntouched(_this.host)) {\n                    _this.ngZone.run(function () { return _this.notifyNgTouched(); });\n                }\n            });\n            var keydownListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'keydown', function (event) {\n                _this.onKeyboardAction(event);\n            });\n            var keyupListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'keyup', function () {\n                _this.renderer.removeClass(_this.gradientWrapper.nativeElement, 'k-dragging');\n                if (!_this.readonly && !_this.disabled) {\n                    _this.ngZone.run(function () { return _this.handleValueChange(getColorFromHSV(_this.hsva)); });\n                }\n            });\n            var dragHandleFocusInListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'focusin', function () {\n                _this.renderer.addClass(_this.gradientDragHandle.nativeElement, 'k-state-focus');\n            });\n            var dragHandleFocusOutListener = _this.renderer.listen(_this.gradientDragHandle.nativeElement, 'focusout', function () {\n                _this.renderer.removeClass(_this.gradientDragHandle.nativeElement, 'k-state-focus');\n            });\n            _this.listeners.push(focusOutListener, keydownListener, keyupListener, dragHandleFocusInListener, dragHandleFocusOutListener);\n        });\n    };\n    ColorGradientComponent.prototype.subscribeChanges = function () {\n        var _this = this;\n        this.changeRequestsSubscription = this.updateValues.pipe(throttleTime(this.delay)).subscribe(function (value) {\n            _this.handleValueChange(value);\n        });\n    };\n    ColorGradientComponent.prototype.unsubscribeChanges = function () {\n        if (this.changeRequestsSubscription) {\n            this.changeRequestsSubscription.unsubscribe();\n        }\n    };\n    var ColorGradientComponent_1;\n    tslib_1.__decorate([\n        HostBinding('class.k-colorgradient'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorGradientComponent.prototype, \"hostClasses\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.aria-readonly'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], ColorGradientComponent.prototype, \"readonlyAttribute\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-state-disabled'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], ColorGradientComponent.prototype, \"disabledClass\", null);\n    tslib_1.__decorate([\n        HostBinding('attr.tabindex'),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], ColorGradientComponent.prototype, \"hostTabindex\", null);\n    tslib_1.__decorate([\n        HostBinding('attr.id'),\n        tslib_1.__metadata(\"design:type\", String),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], ColorGradientComponent.prototype, \"gradientId\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorGradientComponent.prototype, \"id\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorGradientComponent.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorGradientComponent.prototype, \"opacity\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorGradientComponent.prototype, \"disabled\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorGradientComponent.prototype, \"readonly\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorGradientComponent.prototype, \"clearButton\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], ColorGradientComponent.prototype, \"delay\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String),\n        tslib_1.__metadata(\"design:paramtypes\", [String])\n    ], ColorGradientComponent.prototype, \"value\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorGradientComponent.prototype, \"contrastTool\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [Number])\n    ], ColorGradientComponent.prototype, \"tabindex\", null);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorGradientComponent.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorGradientComponent.prototype, \"format\", void 0);\n    tslib_1.__decorate([\n        ViewChild('gradientDragHandle', { read: ElementRef, static: false }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], ColorGradientComponent.prototype, \"gradientDragHandle\", void 0);\n    tslib_1.__decorate([\n        ViewChild('inputs', { static: false }),\n        tslib_1.__metadata(\"design:type\", ColorInputComponent)\n    ], ColorGradientComponent.prototype, \"inputs\", void 0);\n    tslib_1.__decorate([\n        ViewChild('alphaSlider', { static: false }),\n        tslib_1.__metadata(\"design:type\", SliderComponent)\n    ], ColorGradientComponent.prototype, \"alphaSlider\", void 0);\n    tslib_1.__decorate([\n        ViewChild('gradientWrapper', { static: false }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], ColorGradientComponent.prototype, \"gradientWrapper\", void 0);\n    ColorGradientComponent = ColorGradientComponent_1 = tslib_1.__decorate([\n        Component({\n            selector: 'kendo-colorgradient',\n            providers: [\n                {\n                    multi: true,\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return ColorGradientComponent_1; })\n                },\n                {\n                    provide: KendoInput,\n                    useExisting: forwardRef(function () { return ColorGradientComponent_1; })\n                },\n                ColorGradientLocalizationService,\n                {\n                    provide: LocalizationService,\n                    useExisting: ColorGradientLocalizationService\n                },\n                {\n                    provide: L10N_PREFIX,\n                    useValue: 'kendo.colorgradient'\n                }\n            ],\n            template: \"\\n        <ng-container kendoColorGradientLocalizedMessages\\n            i18n-colorGradientNoColor=\\\"kendo.colorgradient.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\\\"\\n            colorGradientNoColor=\\\"Colorgradient no color chosen\\\"\\n            i18n-colorGradientHandle=\\\"kendo.colorgradient.colorGradientHandle|The title for the gradient color drag handle chooser.\\\"\\n            colorGradientHandle=\\\"Choose color\\\"\\n            i18n-clearButton=\\\"kendo.colorgradient.clearButton|The title for the clear button.\\\"\\n            clearButton=\\\"Clear value\\\"\\n            i18n-hueSliderHandle=\\\"kendo.colorgradient.hueSliderHandle|The title for the hue slider handle.\\\"\\n            hueSliderHandle=\\\"Set hue\\\"\\n            i18n-opacitySliderHandle=\\\"kendo.colorgradient.opacitySliderHandle|The title for the opacity slider handle.\\\"\\n            opacitySliderHandle=\\\"Set opacity\\\"\\n            i18n-hexInputPlaceholder=\\\"kendo.colorgradient.hexInputPlaceholder|The placeholder for the HEX color input.\\\"\\n            hexInputPlaceholder=\\\"HEX Color\\\"\\n            i18n-redInputPlaceholder=\\\"kendo.colorgradient.redInputPlaceholder|The placeholder for the red color input.\\\"\\n            redInputPlaceholder=\\\"Red\\\"\\n            i18n-greenInputPlaceholder=\\\"kendo.colorgradient.greenInputPlaceholder|The placeholder for the green color input.\\\"\\n            greenInputPlaceholder=\\\"Green\\\"\\n            i18n-blueInputPlaceholder=\\\"kendo.colorgradient.blueInputPlaceholder|The placeholder for the blue color input.\\\"\\n            blueInputPlaceholder=\\\"Blue\\\"\\n            i18n-alphaInputPlaceholder=\\\"kendo.colorgradient.alphaInputPlaceholder|The placeholder for the alpha input.\\\"\\n            alphaInputPlaceholder=\\\"Alpha\\\"\\n            i18n-passContrast=\\\"kendo.colorgradient.passContrast|The pass message for the contrast tool.\\\"\\n            passContrast=\\\"Pass\\\"\\n            i18n-failContrast=\\\"kendo.colorgradient.failContrast|The fail message for the contrast tool.\\\"\\n            failContrast=\\\"Fail\\\"\\n            i18n-contrastRatio=\\\"kendo.colorgradient.contrastRatio|The contrast ratio message for the contrast tool.\\\"\\n            contrastRatio=\\\"Contrast ratio\\\">\\n        </ng-container>\\n        <div class=\\\"k-colorgradient-canvas k-hstack\\\">\\n            <div class=\\\"k-hsv-rectangle\\\" [style.background]=\\\"backgroundColor\\\">\\n                <div\\n                    #gradientWrapper\\n                    kendoDraggable\\n                    class=\\\"k-hsv-gradient\\\"\\n                    (click)=\\\"changePosition($event)\\\"\\n                    (kendoPress)=\\\"handleDragPress($event)\\\"\\n                    (kendoDrag)=\\\"onHandleDrag($event)\\\"\\n                    (kendoRelease)=\\\"onHandleRelease()\\\">\\n                    <div\\n                        #gradientDragHandle\\n                        class=\\\"k-hsv-draghandle k-draghandle\\\"\\n                        tabindex=\\\"0\\\"\\n                        [attr.title]=\\\"colorGradientHandleTitle\\\"\\n                        [attr.aria-label]=\\\"colorGradientHandleAriaLabel\\\"\\n                    >\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"k-hsv-controls k-hstack {{ clearButton ? 'k-sliders-wrap-clearable' : '' }}\\\">\\n                <span class=\\\"k-clear-color k-button k-flat k-button-icon\\\"\\n                    *ngIf=\\\"clearButton\\\"\\n                    (click)=\\\"reset()\\\"\\n                    (keydown.enter)=\\\"reset()\\\"\\n                    (keydown.space)=\\\"reset()\\\"\\n                    [attr.aria-label]=\\\"clearButtonTitle\\\"\\n                    [attr.title]=\\\"clearButtonTitle\\\"\\n                    tabindex=\\\"0\\\">\\n                    <span class=\\\"k-icon k-i-reset-color\\\"></span>\\n                </span>\\n                <kendo-slider\\n                    [ngClass]=\\\"{'k-align-self-end': clearButton}\\\"\\n                    class=\\\"k-hue-slider k-colorgradient-slider\\\"\\n                    [dragHandleTitle]=\\\"hueSliderTitle\\\"\\n                    [disabled]=\\\"disabled\\\"\\n                    [readonly]=\\\"readonly\\\"\\n                    [showButtons]=\\\"false\\\"\\n                    [tickPlacement]=\\\"'none'\\\"\\n                    [vertical]=\\\"true\\\"\\n                    [min]=\\\"0\\\"\\n                    [max]=\\\"360\\\"\\n                    [smallStep]=\\\"5\\\"\\n                    [largeStep]=\\\"10\\\"\\n                    [(value)]=\\\"hsva.h\\\"\\n                    (valueChange)=\\\"handleHueSliderChange($event)\\\"\\n                >\\n                </kendo-slider>\\n                <kendo-slider\\n                    *ngIf=\\\"opacity && format === 'rgba'\\\"\\n                    #alphaSlider\\n                    [ngClass]=\\\"{'k-align-self-end': clearButton}\\\"\\n                    class=\\\"k-alpha-slider k-colorgradient-slider\\\"\\n                    [dragHandleTitle]=\\\"opacitySliderTitle\\\"\\n                    [disabled]=\\\"disabled\\\"\\n                    [readonly]=\\\"readonly\\\"\\n                    [showButtons]=\\\"false\\\"\\n                    [tickPlacement]=\\\"'none'\\\"\\n                    [vertical]=\\\"true\\\"\\n                    [min]=\\\"0\\\"\\n                    [max]=\\\"100\\\"\\n                    [smallStep]=\\\"1\\\"\\n                    [largeStep]=\\\"10\\\"\\n                    [value]=\\\"alphaSliderValue\\\"\\n                    (valueChange)=\\\"handleAlphaSliderChange($event)\\\"\\n                >\\n                </kendo-slider>\\n            </div>\\n        </div>\\n        <kendo-colorinput  #inputs\\n            [opacity]=\\\"opacity\\\"\\n            [formatView]=\\\"format\\\"\\n            [value]=\\\"value\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            (valueChange)=\\\"handleInputsValueChange($event)\\\"\\n        >\\n        </kendo-colorinput>\\n        <div class=\\\"k-colorgradient-color-contrast k-vbox\\\" *ngIf=\\\"contrastToolVisible\\\"\\n            kendoContrastTool\\n            [value]=\\\"value\\\"\\n            [ratio]=\\\"contrastTool\\\">\\n        </div>\\n    \",\n            styles: [\"\\n        .k-clear-color {\\n            position: absolute;\\n            left: 50%;\\n            transform: translateX(-50%);\\n        }\\n        .k-align-self-end {\\n            height: 140px;\\n        }\\n    \"]\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [ElementRef,\n            NgZone,\n            Renderer2,\n            ChangeDetectorRef,\n            LocalizationService])\n    ], ColorGradientComponent);\n    return ColorGradientComponent;\n}());\nexport { ColorGradientComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkmlB4E,AAyBjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAMoB;;;;"}