{"version":3,"file":"colorpicker.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/colorpicker/colorpicker.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, HostBinding, Input, Output, EventEmitter, ViewChild, ElementRef, TemplateRef, ViewContainerRef, forwardRef, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PopupService } from '@progress/kendo-angular-popup';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { PreventableEvent, ActiveColorClickEvent } from './models';\nimport { parseColor } from './utils/color-parser';\nimport { isPresent } from '../common/utils';\nimport { Keys, KendoInput } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { PALETTEPRESETS } from './utils/palette-presets';\nimport { ColorPickerLocalizationService } from './localization/colorpicker-localization.service';\nimport { ColorGradientComponent } from './color-gradient.component';\nvar DEFAULT_PRESET = 'office';\nvar DEFAULT_ACCESSIBLE_PRESET = 'accessible';\nvar serial = 0;\n/**\n * Represents the [Kendo UI ColorPicker component for Angular]({% slug overview_colorpicker %}).\n * Designed to replace the `<input type=\"color\">` HTML5 tag which is not widely supported in browsers.\n */\nvar ColorPickerComponent = /** @class */ (function () {\n    function ColorPickerComponent(popupService, cdr, localizationService, ngZone) {\n        var _this = this;\n        this.popupService = popupService;\n        this.cdr = cdr;\n        this.localizationService = localizationService;\n        this.ngZone = ngZone;\n        /**\n         * @hidden\n         */\n        this.hostClasses = true;\n        /**\n         * @hidden\n         */\n        this.focusableId = \"k-colorpicker-\" + serial++;\n        /**\n         * Sets what view the ColorPicker will render in the popup.\n         */\n        this.view = 'gradient';\n        /**\n         * Sets the read-only state of the ColorPicker.\n         */\n        this.readonly = false;\n        /**\n         * Sets the disabled state of the ColorPicker.\n         */\n        this.disabled = false;\n        /**\n         * Specifies the output format of the ColorPicker.\n         * The input value may be in a different format. However, it will be parsed into the output `format`\n         * after the component processes it.\n         *\n         * If the `gradient` view is used with the `opacity` option set to true, this setting will be ignored and `rgba` will be used instead.\n         *\n         * The supported values are:\n         * * `rgba` (default)\n         * * `hex`\n         * * [name](https://www.w3.org/wiki/CSS/Properties/color/keywords)\n         */\n        this.format = 'rgba';\n        /**\n         * Fires each time the value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Fires each time the popup is about to open.\n         * This event is preventable. If you cancel it, the popup will remain closed.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires each time the popup is about to close.\n         * This event is preventable. If you cancel it, the popup will remain open.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires each time ColorPicker is focused.\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the ColorPicker is blurred.\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * Fires each time the left side of the ColorPicker wrapper is clicked.\n         * The event is triggered regardless of whether a ColorPicker icon is set or not.\n         *\n         * The [ActiveColorClickEvent]({% slug api_inputs_activecolorclickevent %}) event provides the option to prevent the popup opening.\n         */\n        this.activeColorClick = new EventEmitter();\n        this._tabindex = 0;\n        this._popupSettings = { animate: true };\n        this._paletteSettings = {};\n        this._gradientSettings = { opacity: true, clearButton: false, delay: 0 };\n        this.notifyNgTouched = function () { };\n        this.notifyNgChanged = function () { };\n        validatePackage(packageMetadata);\n        this.dynamicRTLSubscription = this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    ColorPickerComponent_1 = ColorPickerComponent;\n    Object.defineProperty(ColorPickerComponent.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        /**\n         * Specifies the value of the initially selected color.\n         */\n        set: function (value) {\n            this._value = parseColor(value, this.format);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"popupSettings\", {\n        get: function () {\n            return this._popupSettings;\n        },\n        /**\n         * Configures the popup of the ColorPicker.\n         */\n        set: function (value) {\n            this._popupSettings = Object.assign(this._popupSettings, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"paletteSettings\", {\n        get: function () {\n            return this._paletteSettings;\n        },\n        /**\n         * Configures the palette that is displayed in the ColorPicker popup.\n         */\n        set: function (value) {\n            this._paletteSettings = Object.assign(this._paletteSettings, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"gradientSettings\", {\n        get: function () {\n            return this._gradientSettings;\n        },\n        /**\n         * Configures the gradient that is displayed in the ColorPicker popup.\n         */\n        set: function (value) {\n            this._gradientSettings = Object.assign(this._gradientSettings, value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"tabindex\", {\n        get: function () {\n            return !this.disabled ? this._tabindex : undefined;\n        },\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        set: function (value) {\n            var tabindex = Number(value);\n            var defaultValue = 0;\n            this._tabindex = !isNaN(tabindex) ? tabindex : defaultValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"isOpen\", {\n        /**\n         * Indicates whether the ColorPicker popup is open.\n         */\n        get: function () {\n            return isPresent(this.popupRef);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPickerComponent.prototype, \"iconStyles\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            if (this.iconClass) {\n                return this.iconClass;\n            }\n            if (this.icon) {\n                return \"k-icon k-i-\" + this.icon;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColorPickerComponent.prototype.ngOnInit = function () {\n        var defaultPreset = (this.format !== 'name') ? DEFAULT_PRESET : DEFAULT_ACCESSIBLE_PRESET;\n        var settingsPalette = this._paletteSettings.palette;\n        var presetColumns = typeof settingsPalette === 'string' && PALETTEPRESETS[settingsPalette] ?\n            PALETTEPRESETS[settingsPalette].columns :\n            undefined;\n        this._paletteSettings = {\n            palette: settingsPalette || defaultPreset,\n            tileSize: this._paletteSettings.tileSize || 24,\n            columns: this._paletteSettings.columns || presetColumns || 10\n        };\n    };\n    ColorPickerComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.format && changes.format.currentValue === 'name') {\n            this.view = 'palette';\n        }\n        if (this.view === 'gradient' && this.gradientSettings.opacity) {\n            this.format = 'rgba';\n            this.value = parseColor(this.value, this.format);\n        }\n    };\n    ColorPickerComponent.prototype.ngOnDestroy = function () {\n        this.closePopup();\n        if (this.dynamicRTLSubscription) {\n            this.dynamicRTLSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleWrapperClick = function () {\n        this.toggleWithEvents(!this.isOpen);\n        this.focus();\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleActiveColorClick = function () {\n        this.focus();\n        var event = new ActiveColorClickEvent(this.value);\n        this.activeColorClick.emit(event);\n        if (!event.isOpenPrevented() || this.isOpen) {\n            this.handleWrapperClick();\n        }\n    };\n    /**\n     * Focuses the wrapper of the ColorPicker.\n     */\n    ColorPickerComponent.prototype.focus = function () {\n        if (this.disabled) {\n            return;\n        }\n        this.wrapper.nativeElement.focus();\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleWrapperFocus = function () {\n        if (isPresent(this.palette)) {\n            this.palette.nativeElement.focus();\n        }\n        if (this.isFocused) {\n            return;\n        }\n        this.isFocused = true;\n        this.onFocus.emit();\n    };\n    /**\n     * Blurs the ColorPicker.\n     */\n    ColorPickerComponent.prototype.blur = function () {\n        this.wrapper.nativeElement.blur();\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleWrapperBlur = function () {\n        if (this.isOpen) {\n            return;\n        }\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.notifyNgTouched();\n    };\n    /**\n     * Clears the color value of the ColorPicker.\n     */\n    ColorPickerComponent.prototype.reset = function () {\n        if (!isPresent(this.value)) {\n            return;\n        }\n        this._value = undefined;\n        this.notifyNgChanged(undefined);\n    };\n    /**\n     * Toggles the popup of the ColorPicker.\n     * Does not trigger the `open` and `close` events of the component.\n     *\n     * @param open An optional parameter. Specifies whether the popup will be opened or closed.\n     */\n    ColorPickerComponent.prototype.toggle = function (open) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n        this.closePopup();\n        open = isPresent(open) ? open : !this.isOpen;\n        if (open) {\n            this.openPopup();\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleValueChange = function (color, closePopup) {\n        var parsedColor = parseColor(color, this.format);\n        var valueChange = parsedColor !== this.value;\n        if (closePopup) {\n            this.toggleWithEvents(false);\n            this.focus();\n        }\n        if (valueChange) {\n            this.value = parsedColor;\n            this.valueChange.emit(parsedColor);\n            this.notifyNgChanged(parsedColor);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handlePopupBlur = function (event) {\n        var focusInPopupElement = this.popupRef.popupElement.contains(event.relatedTarget);\n        var wrapperClicked = event.relatedTarget === this.wrapper.nativeElement;\n        if (!this.isFocused || wrapperClicked || focusInPopupElement) {\n            return;\n        }\n        this.isFocused = false;\n        this.onBlur.emit();\n        this.notifyNgTouched();\n        this.toggleWithEvents(false);\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.registerOnChange = function (fn) {\n        this.notifyNgChanged = fn;\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.registerOnTouched = function (fn) {\n        this.notifyNgTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.cdr.markForCheck();\n        this.disabled = isDisabled;\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handleWrapperKeyDown = function (event) {\n        if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.Enter) {\n            event.preventDefault();\n            this.toggleWithEvents(true);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorPickerComponent.prototype.handlePopupKeyDown = function (event) {\n        if (event.keyCode === Keys.Escape) {\n            this.toggleWithEvents(false);\n            this.wrapper.nativeElement.focus();\n        }\n        if (event.keyCode === Keys.Tab) {\n            var firstElement = this.colorGradient ? this.colorGradient.gradientDragHandle.nativeElement : this.palette.nativeElement;\n            var lastElement = this.palette ? this.palette.nativeElement :\n                this.colorGradient.inputs.opacityInput.nativeElement.childNodes[1].children[0];\n            if (event.shiftKey) {\n                if (event.target === firstElement) {\n                    event.preventDefault();\n                    lastElement.focus();\n                    return;\n                }\n            }\n            else {\n                if (event.target === lastElement) {\n                    event.preventDefault();\n                    firstElement.focus();\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * @hidden\n     * Used by the TextBoxContainer to determine if the component is empty.\n     */\n    ColorPickerComponent.prototype.isEmpty = function () {\n        return false;\n    };\n    ColorPickerComponent.prototype.toggleWithEvents = function (open) {\n        var _this = this;\n        var sameState = this.isOpen === open;\n        if (this.disabled || this.readonly || sameState) {\n            return;\n        }\n        var eventArgs = new PreventableEvent();\n        open ? this.open.emit(eventArgs) : this.close.emit(eventArgs);\n        if (!eventArgs.isDefaultPrevented()) {\n            this.toggle(open);\n        }\n        if (open) {\n            this.ngZone.runOutsideAngular(function () {\n                setTimeout(function () {\n                    if (_this.colorGradient) {\n                        _this.colorGradient.gradientDragHandle.nativeElement.focus();\n                    }\n                });\n            });\n        }\n    };\n    ColorPickerComponent.prototype.openPopup = function () {\n        var _this = this;\n        var horizontalAlign = this.direction === \"rtl\" ? \"right\" : \"left\";\n        var anchorPosition = { horizontal: horizontalAlign, vertical: \"bottom\" };\n        var popupPosition = { horizontal: horizontalAlign, vertical: \"top\" };\n        this.popupRef = this.popupService.open({\n            anchor: this.wrapper,\n            animate: this.popupSettings.animate,\n            appendTo: this.popupSettings.appendTo,\n            popupAlign: popupPosition,\n            anchorAlign: anchorPosition,\n            popupClass: 'k-colorpicker-popup',\n            content: this.popupTemplate,\n            positionMode: 'absolute'\n        });\n        this.popupRef.popupAnchorViewportLeave.subscribe(function () {\n            _this.toggleWithEvents(false);\n            if (!_this.isOpen) {\n                _this.wrapper.nativeElement.focus({\n                    preventScroll: true\n                });\n            }\n        });\n    };\n    ColorPickerComponent.prototype.closePopup = function () {\n        if (!this.isOpen) {\n            return;\n        }\n        this.popupRef.close();\n        this.popupRef = null;\n        this.palette = null;\n    };\n    var ColorPickerComponent_1;\n    tslib_1.__decorate([\n        HostBinding('class.k-widget'),\n        HostBinding('class.k-colorpicker'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorPickerComponent.prototype, \"hostClasses\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorPickerComponent.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorPickerComponent.prototype, \"focusableId\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorPickerComponent.prototype, \"view\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorPickerComponent.prototype, \"readonly\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], ColorPickerComponent.prototype, \"disabled\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorPickerComponent.prototype, \"format\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String),\n        tslib_1.__metadata(\"design:paramtypes\", [String])\n    ], ColorPickerComponent.prototype, \"value\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], ColorPickerComponent.prototype, \"popupSettings\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], ColorPickerComponent.prototype, \"paletteSettings\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], ColorPickerComponent.prototype, \"gradientSettings\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], ColorPickerComponent.prototype, \"icon\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], ColorPickerComponent.prototype, \"iconClass\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [Number])\n    ], ColorPickerComponent.prototype, \"tabindex\", null);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"open\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"close\", void 0);\n    tslib_1.__decorate([\n        Output('focus'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"onFocus\", void 0);\n    tslib_1.__decorate([\n        Output('blur'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"onBlur\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], ColorPickerComponent.prototype, \"activeColorClick\", void 0);\n    tslib_1.__decorate([\n        ViewChild('container', { read: ViewContainerRef, static: true }),\n        tslib_1.__metadata(\"design:type\", ViewContainerRef)\n    ], ColorPickerComponent.prototype, \"container\", void 0);\n    tslib_1.__decorate([\n        ViewChild('wrapper', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], ColorPickerComponent.prototype, \"wrapper\", void 0);\n    tslib_1.__decorate([\n        ViewChild('popupTemplate', { static: true }),\n        tslib_1.__metadata(\"design:type\", TemplateRef)\n    ], ColorPickerComponent.prototype, \"popupTemplate\", void 0);\n    tslib_1.__decorate([\n        ViewChild('palette', { read: ElementRef, static: false }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], ColorPickerComponent.prototype, \"palette\", void 0);\n    tslib_1.__decorate([\n        ViewChild('colorGradient', { static: false }),\n        tslib_1.__metadata(\"design:type\", ColorGradientComponent)\n    ], ColorPickerComponent.prototype, \"colorGradient\", void 0);\n    ColorPickerComponent = ColorPickerComponent_1 = tslib_1.__decorate([\n        Component({\n            selector: 'kendo-colorpicker',\n            providers: [{\n                    multi: true,\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return ColorPickerComponent_1; })\n                }, {\n                    provide: KendoInput,\n                    useExisting: forwardRef(function () { return ColorPickerComponent_1; })\n                },\n                ColorPickerLocalizationService,\n                {\n                    provide: LocalizationService,\n                    useExisting: ColorPickerLocalizationService\n                },\n                {\n                    provide: L10N_PREFIX,\n                    useValue: 'kendo.colorpicker'\n                }\n            ],\n            template: \"\\n        <ng-container kendoColorPickerLocalizedMessages\\n            i18n-colorGradient=\\\"kendo.colorpicker.colorGradientNoColor|The aria-label applied to the ColorGradient component when the value is empty.\\\"\\n            colorGradientNoColor=\\\"Colorgradient no color chosen\\\"\\n            i18n-colorGradient=\\\"kendo.colorpalette.colorPaletteNoColor|The aria-label applied to the ColorPalette component when the value is empty.\\\"\\n            colorPaletteNoColor=\\\"Colorpalette no color chosen\\\"\\n            i18n-colorGradientHandle=\\\"kendo.colorpicker.colorGradientHandle|The title for the gradient color drag handle chooser.\\\"\\n            colorGradientHandle=\\\"Choose color\\\"\\n            i18n-clearButton=\\\"kendo.colorpicker.clearButton|The title for the clear button.\\\"\\n            clearButton=\\\"Clear value\\\"\\n            i18n-hueSliderHandle=\\\"kendo.colorpicker.hueSliderHandle|The title for the hue slider handle.\\\"\\n            hueSliderHandle=\\\"Set hue\\\"\\n            i18n-opacitySliderHandle=\\\"kendo.colorpicker.opacitySliderHandle|The title for the opacity slider handle.\\\"\\n            opacitySliderHandle=\\\"Set opacity\\\"\\n            i18n-hexInputPlaceholder=\\\"kendo.colorpicker.hexInputPlaceholder|The placeholder for the HEX color input.\\\"\\n            hexInputPlaceholder=\\\"HEX Color\\\"\\n            i18n-redInputPlaceholder=\\\"kendo.colorpicker.redInputPlaceholder|The placeholder for the red color input.\\\"\\n            redInputPlaceholder=\\\"Red\\\"\\n            i18n-greenInputPlaceholder=\\\"kendo.colorpicker.greenInputPlaceholder|The placeholder for the green color input.\\\"\\n            greenInputPlaceholder=\\\"Green\\\"\\n            i18n-blueInputPlaceholder=\\\"kendo.colorpicker.blueInputPlaceholder|The placeholder for the blue color input.\\\"\\n            blueInputPlaceholder=\\\"Blue\\\"\\n            i18n-alphaInputPlaceholder=\\\"kendo.colorpicker.alphaInputPlaceholder|The placeholder for the alpha input.\\\"\\n            alphaInputPlaceholder=\\\"Alpha\\\">\\n        </ng-container>\\n        <span\\n            #wrapper\\n            [ngClass]=\\\"{\\n                'k-picker-wrap': true,\\n                'k-state-disabled': this.disabled,\\n                'k-state-focused': this.isFocused\\n            }\\\"\\n            role=\\\"listbox\\\"\\n            [attr.aria-expanded]=\\\"isOpen\\\"\\n            [attr.aria-readonly]=\\\"readonly\\\"\\n            [attr.aria-disabled]=\\\"disabled\\\"\\n            [attr.aria-label]=\\\"value\\\"\\n            [id]=\\\"focusableId\\\"\\n            [attr.tabindex]=\\\"tabindex\\\"\\n            (focus)=\\\"handleWrapperFocus()\\\"\\n            (blur)=\\\"handleWrapperBlur()\\\"\\n            (mousedown)=\\\"$event.preventDefault()\\\"\\n            (keydown)=\\\"handleWrapperKeyDown($event)\\\"\\n        >\\n            <span *ngIf=\\\"!iconStyles\\\" class=\\\"k-selected-color\\\" [style.background-color]=\\\"value\\\" (click)=\\\"handleActiveColorClick()\\\">\\n                <span class=\\\"k-icon k-i-line\\\" *ngIf=\\\"!value\\\"></span>\\n            </span>\\n            <span *ngIf=\\\"iconStyles\\\" class=\\\"k-tool-icon\\\" [ngClass]=\\\"iconStyles\\\" (click)=\\\"handleActiveColorClick()\\\">\\n                <span class=\\\"k-selected-color\\\" [style.background-color]=\\\"value\\\"></span>\\n            </span>\\n            <span class=\\\"k-select\\\" (click)=\\\"handleWrapperClick()\\\">\\n                <span class=\\\"k-icon k-i-arrow-s\\\"></span>\\n            </span>\\n        </span>\\n        <ng-template #popupTemplate>\\n            <kendo-colorgradient  #colorGradient\\n                *ngIf=\\\"view === 'gradient' || view === 'combo'\\\"\\n                [value]=\\\"value\\\"\\n                [format]=\\\"format\\\"\\n                [opacity]=\\\"gradientSettings.opacity\\\"\\n                [clearButton]=\\\"gradientSettings.clearButton\\\"\\n                [delay]=\\\"gradientSettings.delay\\\"\\n                (focusout)=\\\"handlePopupBlur($event)\\\"\\n                (valueChange)=\\\"handleValueChange($event, false)\\\"\\n                (keydown)=\\\"handlePopupKeyDown($event)\\\"\\n            >\\n            </kendo-colorgradient>\\n            <kendo-colorpalette\\n                #palette\\n                *ngIf=\\\"view === 'palette' || view === 'combo'\\\"\\n                kendoFocusOnDomReady\\n                [palette]=\\\"paletteSettings.palette\\\"\\n                [columns]=\\\"paletteSettings.columns\\\"\\n                [tileSize]=\\\"paletteSettings.tileSize\\\"\\n                [format]=\\\"format\\\"\\n                [value]=\\\"value\\\"\\n                (blur)=\\\"handlePopupBlur($event)\\\"\\n                (cellSelection)=\\\"handleValueChange($event, true)\\\"\\n                (mousedown)=\\\"$event.preventDefault()\\\"\\n                (keydown)=\\\"handlePopupKeyDown($event)\\\"\\n            >\\n            </kendo-colorpalette>\\n        </ng-template>\\n        <ng-container #container></ng-container>\\n    \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [PopupService,\n            ChangeDetectorRef,\n            LocalizationService,\n            NgZone])\n    ], ColorPickerComponent);\n    return ColorPickerComponent;\n}());\nexport { ColorPickerComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkwEAsiBwE,AAsB7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAKkB;;;;"}