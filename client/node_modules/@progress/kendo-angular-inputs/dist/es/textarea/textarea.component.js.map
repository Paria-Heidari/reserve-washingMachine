{"version":3,"file":"textarea.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/textarea/textarea.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, HostBinding, Input, Output, ElementRef, EventEmitter, NgZone, Renderer2, ChangeDetectorRef, Injector, forwardRef } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { KendoInput, guid, isDocumentAvailable, hasObservers, Keys } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { TextFieldsBase } from '../text-fields-common/text-fields-base';\nimport { areSame, isPresent } from '../common/utils';\nimport { invokeElementMethod } from '../common/dom-utils';\nimport { closest } from './../common/dom-utils';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nvar resizeClasses = {\n    'vertical': 'k-resize-vertical',\n    'horizontal': 'k-resize-horizontal',\n    'both': 'k-resize-both',\n    'none': 'k-resize-none',\n    'auto': 'k-resize-none'\n};\nvar FOCUSED = 'k-state-focus';\n/**\n * Represents the [Kendo UI TextArea component for Angular]({% slug overview_textarea %}).\n */\nvar TextAreaComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(TextAreaComponent, _super);\n    function TextAreaComponent(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {\n        var _this = _super.call(this, localizationService, ngZone, changeDetector, renderer, injector, hostElement) || this;\n        _this.localizationService = localizationService;\n        _this.ngZone = ngZone;\n        _this.changeDetector = changeDetector;\n        _this.renderer = renderer;\n        _this.injector = injector;\n        _this.hostElement = hostElement;\n        /**\n         * @hidden\n         */\n        _this.focusableId = \"k-\" + guid();\n        _this.hostClass = true;\n        /**\n         * Specifies the flow direction of the TextArea sections. This property is useful when adornments are used, in order to specify\n         * their position in relation to the textarea element.\n         *\n         * The possible values are:\n         * * `vertical`(Default) &mdash;TextArea sections are placed from top to bottom.\n         * * `horizontal`&mdash;TextArea sections are placed from left to right in `ltr`, and from right to left in `rtl` mode.\n         */\n        _this.flow = 'vertical';\n        /**\n         * Specifies the [tabindex](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        _this.tabindex = 0;\n        /**\n         * Configures the resize behavior of the TextArea.\n         *\n         * The possible values are:\n         * * `vertical`(Default)&mdash;The TextArea component can be resized only vertically.\n         * * `horizontal`&mdash;The TextArea component can be resized only horizontally.\n         * * `both`&mdash;The TextArea component can be resized in both (horizontal and vertical) directions.\n         * * `auto`&mdash;Specifies whether the TextArea component will adjust its height automatically, based on the content.\n         * * `none`&mdash;The TextArea cannot be resized.\n         *\n         */\n        _this.resizable = 'vertical';\n        /**\n         * Fires each time the user focuses the TextArea component.\n         *\n         * > To wire the event programmatically, use the `onFocus` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-textarea (focus)=\"handleFocus()\"></kendo-textarea>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleFocus(): void {\n         *      console.log('Component is focused');\n         *   }\n         * }\n         * ```\n         */\n        _this.onFocus = new EventEmitter();\n        /**\n         * Fires each time the TextArea component gets blurred.\n         *\n         * > To wire the event programmatically, use the `onBlur` property.\n         *\n         * @example\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *  <kendo-textarea (blur)=\"handleBlur()\"></kendo-textarea>\n         * `\n         * })\n         * class AppComponent {\n         *   public handleBlur(): void {\n         *      console.log('Component is blurred');\n         *   }\n         * }\n         * ```\n         */\n        _this.onBlur = new EventEmitter();\n        /**\n         * Fires each time the value is changed or the component is blurred\n         * ([see example]({% slug overview_textarea %}#toc-events)).\n         * When the component value is changed programmatically or via its form control binding, the valueChange event is not emitted.\n         */\n        _this.valueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        _this.handleInput = function (ev) {\n            var incomingValue = ev.target.value;\n            _this.updateValue(incomingValue);\n            _this.resize();\n        };\n        /**\n         * @hidden\n         */\n        _this.handleInputFocus = function () {\n            if (!_this.disabled) {\n                if (_this.selectOnFocus && _this.value) {\n                    _this.ngZone.run(function () {\n                        setTimeout(function () { _this.selectAll(); });\n                    });\n                }\n                if (hasObservers(_this.onFocus)) {\n                    if (!_this.isFocused) {\n                        _this.ngZone.run(function () {\n                            _this.onFocus.emit();\n                        });\n                    }\n                }\n                if (hasObservers(_this.inputFocus)) {\n                    if (!_this.focusChangedProgrammatically) {\n                        _this.ngZone.run(function () {\n                            _this.inputFocus.emit();\n                        });\n                    }\n                }\n                _this.ngZone.run(function () {\n                    _this.isFocused = true;\n                });\n            }\n        };\n        validatePackage(packageMetadata);\n        _this.direction = localizationService.rtl ? 'rtl' : 'ltr';\n        return _this;\n    }\n    TextAreaComponent_1 = TextAreaComponent;\n    Object.defineProperty(TextAreaComponent.prototype, \"flowCol\", {\n        get: function () {\n            return this.flow === 'vertical';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextAreaComponent.prototype, \"flowRow\", {\n        get: function () {\n            return this.flow === 'horizontal';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextAreaComponent.prototype, \"tabIndex\", {\n        get: function () {\n            return this.tabindex;\n        },\n        /**\n         * @hidden\n         */\n        set: function (tabIndex) {\n            this.tabindex = tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextAreaComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var hostElement = this.hostElement.nativeElement;\n        var cursorInsideWrapper = false;\n        var tabbing = false;\n        this.ngZone.runOutsideAngular(function () {\n            // focusIn and focusOut are relative to the host element\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusin', function () {\n                if (!_this.isFocused) {\n                    _this.ngZone.run(function () {\n                        _this.onFocus.emit();\n                        _this.isFocused = true;\n                    });\n                }\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'focusout', function (args) {\n                if (!_this.isFocused) {\n                    return;\n                }\n                if (tabbing) {\n                    var closestTextbox = closest(args.relatedTarget, function (element) { return element === _this.hostElement.nativeElement; });\n                    if (!closestTextbox) {\n                        _this.handleBlur();\n                    }\n                    tabbing = false;\n                }\n                else {\n                    if (!cursorInsideWrapper) {\n                        _this.handleBlur();\n                    }\n                }\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseenter', function () {\n                cursorInsideWrapper = true;\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'mouseleave', function () {\n                cursorInsideWrapper = false;\n            }));\n            _this.subscriptions.add(_this.renderer.listen(hostElement, 'keydown', function (args) {\n                if (args.keyCode === Keys.Tab) {\n                    tabbing = true;\n                }\n                else {\n                    tabbing = false;\n                }\n            }));\n        });\n    };\n    TextAreaComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.control = this.injector.get(NgControl, null);\n        if (isDocumentAvailable() && this.resizable === 'auto') {\n            this.resizeSubscription = fromEvent(window, 'resize')\n                .pipe((debounceTime(50)))\n                .subscribe(function () { return _this.resize(); });\n        }\n        if (this.hostElement) {\n            this.renderer.removeAttribute(this.hostElement.nativeElement, \"tabindex\");\n        }\n        this.subscriptions = this.localizationService.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    };\n    TextAreaComponent.prototype.ngOnChanges = function (changes) {\n        var hostElement = this.hostElement.nativeElement;\n        var element = this.input.nativeElement;\n        if (changes.resizable) {\n            if (this.resizable === 'auto') {\n                this.initialHeight = element.offsetHeight;\n            }\n            else {\n                this.renderer.setStyle(element, 'overflow-y', 'auto');\n                this.renderer.setStyle(element, 'resize', 'both');\n                element.style.height = this.initialHeight + \"px\";\n            }\n        }\n        if (changes.cols) {\n            if (isPresent(changes.cols.currentValue)) {\n                this.renderer.setStyle(hostElement, 'width', 'auto');\n            }\n            else {\n                this.renderer.removeStyle(hostElement, 'width');\n            }\n        }\n    };\n    TextAreaComponent.prototype.ngAfterViewChecked = function () {\n        this.resize();\n    };\n    /**\n     * @hidden\n     */\n    TextAreaComponent.prototype.writeValue = function (value) {\n        this.value = value;\n    };\n    /**\n     * @hidden\n     */\n    TextAreaComponent.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    TextAreaComponent.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    TextAreaComponent.prototype.updateValue = function (value) {\n        var _this = this;\n        if (!areSame(this.value, value)) {\n            this.ngZone.run(function () {\n                _this.value = value;\n                _this.ngChange(value);\n                _this.valueChange.emit(value);\n                _this.changeDetector.markForCheck();\n            });\n        }\n    };\n    TextAreaComponent.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(TextAreaComponent.prototype, \"resizableClass\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return resizeClasses[this.resizable];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Focuses the TextArea component.\n     *\n     * @example\n     * ```ts\n     * _@Component({\n     * selector: 'my-app',\n     * template: `\n     *  <button (click)=\"textarea.focus()\">Focus the textarea</button>\n     *  <kendo-textarea #textarea></kendo-textarea>\n     * `\n     * })\n     * class AppComponent { }\n     * ```\n     */\n    TextAreaComponent.prototype.focus = function () {\n        if (!this.input) {\n            return;\n        }\n        this.focusChangedProgrammatically = true;\n        this.isFocused = true;\n        this.input.nativeElement.focus();\n        this.focusChangedProgrammatically = false;\n    };\n    /**\n     * Blurs the TextArea component.\n     */\n    TextAreaComponent.prototype.blur = function () {\n        this.focusChangedProgrammatically = true;\n        var isFocusedElement = this.hostElement.nativeElement.querySelector(':focus');\n        if (isFocusedElement) {\n            isFocusedElement.blur();\n        }\n        this.isFocused = false;\n        this.focusChangedProgrammatically = false;\n    };\n    TextAreaComponent.prototype.resize = function () {\n        if (this.resizable !== 'auto') {\n            return;\n        }\n        var element = this.input.nativeElement;\n        this.renderer.setStyle(element, 'overflow-y', 'hidden');\n        this.renderer.setStyle(element, 'height', this.initialHeight + \"px\");\n        var scrollHeight = element.scrollHeight;\n        if (scrollHeight > this.initialHeight) {\n            element.style.height = scrollHeight + \"px\";\n        }\n    };\n    Object.defineProperty(TextAreaComponent.prototype, \"isFocused\", {\n        get: function () {\n            return this._isFocused;\n        },\n        set: function (value) {\n            if (this._isFocused !== value && this.hostElement) {\n                var element = this.hostElement.nativeElement;\n                if (value && !this.disabled) {\n                    this.renderer.addClass(element, FOCUSED);\n                }\n                else {\n                    this.renderer.removeClass(element, FOCUSED);\n                }\n                this._isFocused = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextAreaComponent.prototype.handleBlur = function () {\n        var _this = this;\n        this.ngZone.run(function () {\n            if (!_this.focusChangedProgrammatically) {\n                _this.onBlur.emit();\n            }\n            _this.isFocused = false;\n        });\n    };\n    TextAreaComponent.prototype.setSelection = function (start, end) {\n        if (this.isFocused) {\n            invokeElementMethod(this.input, 'setSelectionRange', start, end);\n        }\n    };\n    TextAreaComponent.prototype.selectAll = function () {\n        if (this.value) {\n            this.setSelection(0, this.value.length);\n        }\n    };\n    var TextAreaComponent_1;\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], TextAreaComponent.prototype, \"focusableId\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-textarea'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], TextAreaComponent.prototype, \"hostClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-flex-col'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], TextAreaComponent.prototype, \"flowCol\", null);\n    tslib_1.__decorate([\n        HostBinding('class.k-flex-row'),\n        tslib_1.__metadata(\"design:type\", Boolean),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], TextAreaComponent.prototype, \"flowRow\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], TextAreaComponent.prototype, \"flow\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], TextAreaComponent.prototype, \"rows\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], TextAreaComponent.prototype, \"cols\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], TextAreaComponent.prototype, \"maxlength\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], TextAreaComponent.prototype, \"tabindex\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Number),\n        tslib_1.__metadata(\"design:paramtypes\", [Number])\n    ], TextAreaComponent.prototype, \"tabIndex\", null);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], TextAreaComponent.prototype, \"resizable\", void 0);\n    tslib_1.__decorate([\n        Output('focus'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], TextAreaComponent.prototype, \"onFocus\", void 0);\n    tslib_1.__decorate([\n        Output('blur'),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], TextAreaComponent.prototype, \"onBlur\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], TextAreaComponent.prototype, \"valueChange\", void 0);\n    TextAreaComponent = TextAreaComponent_1 = tslib_1.__decorate([\n        Component({\n            exportAs: 'kendoTextArea',\n            providers: [\n                LocalizationService,\n                { provide: L10N_PREFIX, useValue: 'kendo.textarea' },\n                {\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return TextAreaComponent_1; }),\n                    multi: true\n                },\n                { provide: KendoInput, useExisting: forwardRef(function () { return TextAreaComponent_1; }) }\n            ],\n            selector: 'kendo-textarea',\n            template: \"\\n        <textarea\\n            #input\\n            [attr.aria-multiline]=\\\"true\\\"\\n            [attr.aria-disabled]=\\\"disabled ? true : undefined\\\"\\n            [attr.aria-readonly]=\\\"readonly ? true : undefined\\\"\\n            class=\\\"k-input\\\"\\n            [ngClass]=\\\"resizableClass\\\"\\n            [id]=\\\"focusableId\\\"\\n            [value]=\\\"value\\\"\\n            [attr.placeholder]=\\\"placeholder\\\"\\n            [disabled]=\\\"disabled\\\"\\n            [readonly]=\\\"readonly\\\"\\n            [attr.rows]=\\\"rows\\\"\\n            [attr.cols]=\\\"cols\\\"\\n            [attr.tabindex]=\\\"tabIndex\\\"\\n            [attr.title]=\\\"title\\\"\\n            [attr.maxlength]=\\\"maxlength\\\"\\n            [kendoEventsOutsideAngular]=\\\"{\\n                focus: handleInputFocus,\\n                blur: handleInputBlur,\\n                input: handleInput}\\\">\\n            </textarea>\\n            <ng-content select=\\\"kendo-textarea-suffix\\\"></ng-content>\\n    \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [LocalizationService,\n            NgZone,\n            ChangeDetectorRef,\n            Renderer2,\n            Injector,\n            ElementRef])\n    ], TextAreaComponent);\n    return TextAreaComponent;\n}(TextFieldsBase));\nexport { TextAreaComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEAgckE,AAevD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOe;;;;"}