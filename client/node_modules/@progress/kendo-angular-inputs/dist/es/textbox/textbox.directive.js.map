{"version":3,"file":"textbox.directive.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/textbox/textbox.directive.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Directive, ElementRef, EventEmitter, Input, HostBinding, Renderer2, forwardRef, NgZone } from '@angular/core';\nimport { KendoInput } from '@progress/kendo-angular-common';\n/**\n * Represents the [Kendo UI TextBox directive]({% slug overview_textbox %}) for the Inputs components for Angular.\n * Used to style the textbox of any `input` element.\n *\n * @example\n * ```ts-no-run\n * <input kendoTextBox />\n * <input kendoTextBox type=\"email\" />\n * <input kendoTextBox type=\"password\" />\n * ```\n */\nvar TextBoxDirective = /** @class */ (function () {\n    function TextBoxDirective(renderer, inputElement, ngZone) {\n        this.renderer = renderer;\n        this.inputElement = inputElement;\n        this.ngZone = ngZone;\n        this.hostClass = true;\n        /**\n         * @hidden\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onValueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillStart = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillEnd = new EventEmitter();\n        this.listeners = [];\n    }\n    TextBoxDirective_1 = TextBoxDirective;\n    Object.defineProperty(TextBoxDirective.prototype, \"value\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.inputElement.nativeElement.value;\n        },\n        /**\n         * @hidden\n         */\n        set: function (text) {\n            if (!this.inputElement) {\n                return;\n            }\n            this.inputElement.nativeElement.value = (text === undefined || text === null) ? '' : text;\n            this.onValueChange.emit();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TextBoxDirective.prototype, \"id\", {\n        get: function () {\n            return this.inputElement.nativeElement.id;\n        },\n        set: function (id) {\n            this.renderer.setAttribute(this.inputElement.nativeElement, 'id', id);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextBoxDirective.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        var input = this.inputElement.nativeElement;\n        this.listeners = [\n            this.renderer.listen(input, 'focus', function () { return _this.onFocus.emit(); }),\n            this.renderer.listen(input, 'blur', function () { return _this.onBlur.emit(); })\n        ];\n        this.ngZone.runOutsideAngular(function () {\n            _this.renderer.listen(input, 'animationstart', function (e) {\n                if (e.animationName === 'autoFillStart') {\n                    _this.autoFillStart.emit();\n                }\n                else if (e.animationName === 'autoFillEnd') {\n                    _this.autoFillEnd.emit();\n                }\n            });\n        });\n    };\n    TextBoxDirective.prototype.ngOnDestroy = function () {\n        this.listeners.forEach(function (listener) { return listener(); });\n    };\n    var TextBoxDirective_1;\n    tslib_1.__decorate([\n        HostBinding('class.k-textbox'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], TextBoxDirective.prototype, \"hostClass\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String),\n        tslib_1.__metadata(\"design:paramtypes\", [String])\n    ], TextBoxDirective.prototype, \"value\", null);\n    TextBoxDirective = TextBoxDirective_1 = tslib_1.__decorate([\n        Directive({\n            selector: 'input[kendoTextBox]',\n            providers: [{\n                    provide: KendoInput,\n                    useExisting: forwardRef(function () { return TextBoxDirective_1; })\n                }]\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n            ElementRef,\n            NgZone])\n    ], TextBoxDirective);\n    return TextBoxDirective;\n}());\nexport { TextBoxDirective };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gEA0FgE,AAOrD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+EAIc;;;;"}