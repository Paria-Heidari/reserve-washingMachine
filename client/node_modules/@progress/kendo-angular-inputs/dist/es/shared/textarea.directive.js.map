{"version":3,"file":"textarea.directive.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es/shared/textarea.directive.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Directive, ElementRef, EventEmitter, HostBinding, Renderer2, Optional, Inject, Input, NgZone, forwardRef, Output, ChangeDetectorRef, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { hasObservers, KendoInput, isDocumentAvailable } from '@progress/kendo-angular-common';\nimport { requiresZoneOnBlur } from '../common/utils';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).\n * Provides floating labels to `textarea` elements.\n *\n * @example\n * ```ts-no-run\n * <textarea kendoTextArea></textarea>\n * ```\n */\nvar TextAreaDirective = /** @class */ (function () {\n    function TextAreaDirective(renderer, element, zone, changeDetector, injector, rtl) {\n        this.renderer = renderer;\n        this.element = element;\n        this.zone = zone;\n        this.changeDetector = changeDetector;\n        this.injector = injector;\n        this.elementClass = true;\n        this.autofillClass = true;\n        /**\n         * Fires each time the textarea value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Specifies if the `textarea` element will resize its height automatically\n         * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).\n         *\n         * @default false\n         */\n        this.autoSize = false;\n        /**\n         * @hidden\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onValueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillStart = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillEnd = new EventEmitter();\n        this.listeners = [];\n        this.ngChange = function (_) { };\n        this.ngTouched = function () { };\n        this.direction = rtl ? 'rtl' : 'ltr';\n    }\n    TextAreaDirective_1 = TextAreaDirective;\n    Object.defineProperty(TextAreaDirective.prototype, \"id\", {\n        get: function () {\n            return this.element.nativeElement.id;\n        },\n        set: function (id) {\n            this.renderer.setAttribute(this.element.nativeElement, 'id', id);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    TextAreaDirective.prototype.writeValue = function (value) {\n        this.elementValue = value;\n        this.resize();\n    };\n    /**\n     * @hidden\n     */\n    TextAreaDirective.prototype.registerOnChange = function (fn) {\n        this.ngChange = fn;\n    };\n    /**\n     * @hidden\n     */\n    TextAreaDirective.prototype.registerOnTouched = function (fn) {\n        this.ngTouched = fn;\n    };\n    /**\n     * @hidden\n     */\n    TextAreaDirective.prototype.setDisabledState = function (isDisabled) {\n        this.setElementProperty('disabled', isDisabled);\n    };\n    TextAreaDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        var element = this.element.nativeElement;\n        this.zone.runOutsideAngular(function () {\n            _this.listeners = [\n                _this.renderer.listen(element, 'focus', _this.handleFocus.bind(_this)),\n                _this.renderer.listen(element, 'blur', _this.handleBlur.bind(_this)),\n                _this.renderer.listen(element, 'animationstart', function (e) {\n                    if (e.animationName === 'autoFillStart') {\n                        _this.autoFillStart.emit();\n                    }\n                    else if (e.animationName === 'autoFillEnd') {\n                        _this.autoFillEnd.emit();\n                    }\n                })\n            ];\n            if (isDocumentAvailable() && _this.autoSize) {\n                _this.resizeSubscription = fromEvent(window, 'resize')\n                    .pipe((debounceTime(50)))\n                    .subscribe(function () { return _this.resize(); });\n            }\n            _this.inputSubscription = fromEvent(element, 'input')\n                .subscribe(_this.handleInput.bind(_this));\n        });\n        this.control = this.injector.get(NgControl, null);\n    };\n    TextAreaDirective.prototype.ngOnChanges = function (changes) {\n        var element = this.element.nativeElement;\n        if (changes.value) {\n            this.elementValue = this.value;\n        }\n        if (changes.autoSize) {\n            if (this.autoSize) {\n                this.initialHeight = element.offsetHeight;\n                this.renderer.setStyle(element, 'resize', 'none');\n            }\n            else {\n                this.renderer.setStyle(element, 'overflow-y', 'auto');\n                this.renderer.setStyle(element, 'resize', 'both');\n                element.style.height = this.initialHeight + \"px\";\n            }\n        }\n        this.resize();\n    };\n    TextAreaDirective.prototype.ngOnDestroy = function () {\n        this.listeners.forEach(function (listener) { return listener(); });\n        if (this.inputSubscription) {\n            this.inputSubscription.unsubscribe();\n        }\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    };\n    Object.defineProperty(TextAreaDirective.prototype, \"elementValue\", {\n        get: function () {\n            if (this.element) {\n                return this.element.nativeElement.value;\n            }\n            return '';\n        },\n        set: function (value) {\n            this.setElementProperty('value', (value === undefined || value === null) ? '' : value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TextAreaDirective.prototype.setElementProperty = function (name, value) {\n        if (this.element) {\n            this.renderer.setProperty(this.element.nativeElement, name, value);\n        }\n    };\n    TextAreaDirective.prototype.resize = function () {\n        if (!this.autoSize) {\n            return;\n        }\n        var element = this.element.nativeElement;\n        this.renderer.setStyle(element, 'overflow-y', 'hidden');\n        element.style.height = this.initialHeight + \"px\";\n        var scrollHeight = element.scrollHeight;\n        if (scrollHeight > this.initialHeight) {\n            element.style.height = scrollHeight + \"px\";\n        }\n    };\n    TextAreaDirective.prototype.handleInput = function () {\n        var _this = this;\n        var value = this.elementValue;\n        this.value = value;\n        if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {\n            this.zone.run(function () {\n                _this.ngChange(value);\n                _this.onValueChange.emit(value);\n                _this.valueChange.emit(value);\n                _this.changeDetector.markForCheck();\n            });\n        }\n        this.resize();\n    };\n    TextAreaDirective.prototype.handleFocus = function () {\n        var _this = this;\n        if (hasObservers(this.onFocus)) {\n            this.zone.run(function () {\n                _this.onFocus.emit();\n            });\n        }\n    };\n    TextAreaDirective.prototype.handleBlur = function () {\n        var _this = this;\n        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n            this.zone.run(function () {\n                _this.ngTouched();\n                _this.onBlur.emit();\n                _this.changeDetector.markForCheck();\n            });\n        }\n    };\n    var TextAreaDirective_1;\n    tslib_1.__decorate([\n        HostBinding('class.k-textarea'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], TextAreaDirective.prototype, \"elementClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('class.k-autofill'),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], TextAreaDirective.prototype, \"autofillClass\", void 0);\n    tslib_1.__decorate([\n        HostBinding('attr.dir'),\n        tslib_1.__metadata(\"design:type\", String)\n    ], TextAreaDirective.prototype, \"direction\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], TextAreaDirective.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], TextAreaDirective.prototype, \"autoSize\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], TextAreaDirective.prototype, \"value\", void 0);\n    TextAreaDirective = TextAreaDirective_1 = tslib_1.__decorate([\n        Directive({\n            providers: [{\n                    provide: NG_VALUE_ACCESSOR,\n                    useExisting: forwardRef(function () { return TextAreaDirective_1; }),\n                    multi: true\n                }, {\n                    provide: KendoInput,\n                    useExisting: forwardRef(function () { return TextAreaDirective_1; })\n                }],\n            selector: 'textarea[kendoTextArea]'\n        }),\n        tslib_1.__param(5, Optional()), tslib_1.__param(5, Inject(RTL)),\n        tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n            ElementRef,\n            NgZone,\n            ChangeDetectorRef,\n            Injector, Boolean])\n    ], TextAreaDirective);\n    return TextAreaDirective;\n}());\nexport { TextAreaDirective };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kEA6NkE,AAWvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAOe;;;;"}