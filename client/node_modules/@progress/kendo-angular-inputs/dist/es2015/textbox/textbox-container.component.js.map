{"version":3,"file":"textbox-container.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es2015/textbox/textbox-container.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { ContentChild, Component, ElementRef, EventEmitter, HostBinding, Input, Inject, Optional, Renderer2, isDevMode, ChangeDetectorRef } from '@angular/core';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { TextAreaDirective } from '../shared/textarea.directive';\nimport { NgControl } from '@angular/forms';\nimport { guid, KendoInput } from '@progress/kendo-angular-common';\nimport { FloatingLabelInputAdapter } from './floating-label-input-adapter';\nconst isFunction = (x) => Object.prototype.toString.call(x) === '[object Function]';\nconst ɵ0 = isFunction;\n/**\n * @hidden\n */\nlet TextBoxContainerComponent = class TextBoxContainerComponent {\n    constructor(elementRef, renderer, changeDetectorRef, rtl) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.changeDetectorRef = changeDetectorRef;\n        /**\n         * @hidden\n         */\n        this.focused = false;\n        /**\n         * @hidden\n         */\n        this.empty = true;\n        /**\n         * @hidden\n         */\n        this.invalid = false;\n        this._subscriptions = [];\n        this.autoFillStarted = false;\n        this.direction = rtl ? 'rtl' : 'ltr';\n        this.renderer.removeAttribute(this.elementRef.nativeElement, \"id\");\n    }\n    get hostClasses() {\n        return true;\n    }\n    get textareaElementClass() {\n        return !!this.textarea;\n    }\n    get focusedClass() {\n        return this.focused;\n    }\n    get invalidClass() {\n        return this.invalid;\n    }\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        if (!this.formControl && !this.kendoInput) {\n            if (isDevMode()) {\n                throw new Error(\"The TextBoxContainer requires a Kendo Input component\" +\n                    \" or a forms-bound component to function properly.\");\n            }\n            return;\n        }\n        // add focus/blur/valueChange handlers\n        const control = new FloatingLabelInputAdapter(this.kendoInput || this.formControl.valueAccessor, this.formControl);\n        const setFocus = (isFocused) => () => {\n            this.focused = isFocused;\n            this.updateState();\n        };\n        this.subscribe(control, 'onFocus', setFocus(true));\n        this.subscribe(control, 'onBlur', setFocus(false));\n        this.subscribe(control, 'autoFillStart', () => {\n            this.autoFillStarted = true;\n            this.renderer.removeClass(this.elementRef.nativeElement, 'k-state-empty');\n        });\n        this.subscribe(control, 'autoFillEnd', () => {\n            if (this.autoFillStarted) {\n                this.autoFillStarted = false;\n                if (this.empty) {\n                    this.renderer.addClass(this.elementRef.nativeElement, 'k-state-empty');\n                }\n            }\n        });\n        const updateState = () => this.updateState();\n        updateState();\n        this.subscribe(control, 'onValueChange', updateState);\n        // set label id for floating label\n        if (this.id && control.focusableId) {\n            // input wins\n            this.id = control.focusableId;\n        }\n        else if (this.id) {\n            control.focusableId = this.id;\n        }\n        else if (control.focusableId) {\n            this.id = control.focusableId;\n        }\n        else {\n            const id = \"_\" + guid();\n            control.focusableId = id;\n            this.id = id;\n        }\n    }\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._subscriptions.forEach(s => s.unsubscribe());\n        this._subscriptions = [];\n    }\n    subscribe(control, eventName, handler) {\n        if (control[eventName] instanceof EventEmitter) {\n            const subscription = control[eventName].subscribe(handler);\n            this._subscriptions.push(subscription);\n        }\n    }\n    updateState() {\n        const empty = value => {\n            // zero is not an empty value (e.g., NumericTextBox)\n            if (value === 0 || value === false) {\n                return false;\n            }\n            // empty arrays are an empty value (e.g., MultiSelect)\n            if (Array.isArray(value) && !value.length) {\n                return true;\n            }\n            return !value;\n        };\n        const formControl = this.formControl;\n        if (formControl) {\n            const valueAccessor = formControl.valueAccessor;\n            if (isFunction(valueAccessor.isEmpty)) {\n                this.empty = valueAccessor.isEmpty();\n            }\n            else {\n                this.empty = empty(formControl.value);\n            }\n            this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);\n        }\n        else {\n            this.empty = isFunction(this.kendoInput.isEmpty) ?\n                this.kendoInput.isEmpty() : empty(this.kendoInput.value);\n        }\n        if (this.empty) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'k-state-empty');\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, 'k-state-empty');\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n};\ntslib_1.__decorate([\n    HostBinding('class.k-textbox-container'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], TextBoxContainerComponent.prototype, \"hostClasses\", null);\ntslib_1.__decorate([\n    HostBinding('class.k-textarea-wrapper'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], TextBoxContainerComponent.prototype, \"textareaElementClass\", null);\ntslib_1.__decorate([\n    HostBinding('class.k-state-focused'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], TextBoxContainerComponent.prototype, \"focusedClass\", null);\ntslib_1.__decorate([\n    HostBinding('class.k-state-invalid'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], TextBoxContainerComponent.prototype, \"invalidClass\", null);\ntslib_1.__decorate([\n    HostBinding('attr.dir'),\n    tslib_1.__metadata(\"design:type\", String)\n], TextBoxContainerComponent.prototype, \"direction\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextBoxContainerComponent.prototype, \"id\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextBoxContainerComponent.prototype, \"floatingLabel\", void 0);\ntslib_1.__decorate([\n    ContentChild(KendoInput, { static: false }),\n    tslib_1.__metadata(\"design:type\", Object)\n], TextBoxContainerComponent.prototype, \"kendoInput\", void 0);\ntslib_1.__decorate([\n    ContentChild(TextAreaDirective, { static: false }),\n    tslib_1.__metadata(\"design:type\", TextAreaDirective)\n], TextBoxContainerComponent.prototype, \"textarea\", void 0);\ntslib_1.__decorate([\n    ContentChild(NgControl, { static: false }),\n    tslib_1.__metadata(\"design:type\", NgControl)\n], TextBoxContainerComponent.prototype, \"formControl\", void 0);\nTextBoxContainerComponent = tslib_1.__decorate([\n    Component({\n        selector: 'kendo-textbox-container',\n        template: `\n        <ng-content></ng-content>\n        <label *ngIf=\"floatingLabel\" [for]=\"id\" class=\"k-label\">{{ floatingLabel }}</label>\n    `\n    }),\n    tslib_1.__param(3, Optional()), tslib_1.__param(3, Inject(RTL)),\n    tslib_1.__metadata(\"design:paramtypes\", [ElementRef,\n        Renderer2,\n        ChangeDetectorRef, Boolean])\n], TextBoxContainerComponent);\nexport { TextBoxContainerComponent };\nexport { ɵ0 };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA0IC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gDA6C+C,AAOzC;;;;;;;;"}