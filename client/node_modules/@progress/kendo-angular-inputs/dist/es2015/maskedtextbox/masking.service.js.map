{"version":3,"file":"masking.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es2015/maskedtextbox/masking.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { greedy, sequence } from './parsing/combinators';\nimport { literal, mask as maskParser, rawLiteral, rawMask, token, unliteral, unmask } from './parsing/parsers';\n/**\n * @hidden\n */\nlet MaskingService = class MaskingService {\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.rules = {};\n        this.prompt = \"_\";\n        this.mask = \"\";\n        this.promptPlaceholder = \" \";\n        this.includeLiterals = false;\n        this.maskTokens = [];\n        this.unmaskTokens = [];\n        this.rawTokens = [];\n        this.validationTokens = [];\n    }\n    update({ mask = '', prompt = '', promptPlaceholder = ' ', rules = {}, includeLiterals = false }) {\n        this.mask = mask;\n        this.prompt = prompt;\n        this.promptPlaceholder = promptPlaceholder;\n        this.rules = rules;\n        this.includeLiterals = includeLiterals;\n        this.tokenize();\n    }\n    validationValue(maskedValue = '') {\n        let value = maskedValue;\n        sequence(this.validationTokens)\n            .run(maskedValue)\n            .fold(unmasked => {\n            value = unmasked.join('');\n        });\n        return value;\n    }\n    rawValue(maskedValue = '') {\n        let value = maskedValue;\n        if (!this.rawTokens.length) {\n            return value;\n        }\n        sequence(this.rawTokens)\n            .run(maskedValue)\n            .fold(unmasked => {\n            value = unmasked.join('');\n        });\n        return value;\n    }\n    /**\n     * @hidden\n     */\n    maskRaw(rawValue = '') {\n        let value = rawValue;\n        if (!this.maskTokens.length) {\n            return value;\n        }\n        sequence(this.maskTokens)\n            .run(rawValue)\n            .fold(masked => {\n            value = masked.join('');\n        });\n        return value;\n    }\n    maskInput(input, control, splitPoint) {\n        if (input.length < control.length) {\n            return this.maskRemoved(input, control, splitPoint);\n        }\n        return this.maskInserted(input, control, splitPoint);\n    }\n    maskInRange(pasted, oldValue, start, end) {\n        let value = '';\n        let selection = end;\n        const beforeChange = oldValue.split('').slice(0, start);\n        const afterChange = oldValue.split('').slice(end);\n        sequence(this.maskTokens.slice(start, end))\n            .run(pasted)\n            .fold(masked => {\n            value = beforeChange\n                .concat(masked)\n                .concat(afterChange)\n                .join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    maskRemoved(input, control, splitPoint) {\n        let value = '';\n        let selection = splitPoint;\n        const unchanged = input.split('').slice(splitPoint);\n        const changed = input.split('').slice(0, splitPoint).join('');\n        const take = this.maskTokens.length - (input.length - splitPoint);\n        sequence(this.maskTokens.slice(0, take))\n            .run(changed, control)\n            .fold(masked => {\n            selection = this.adjustPosition(masked, selection);\n            value = masked.concat(unchanged).join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    adjustPosition(input, selection) {\n        const caretChar = input[selection];\n        const isLiteral = this.maskTokens[selection].isLiteral(caretChar);\n        if (!isLiteral && caretChar !== this.prompt) {\n            return selection + 1;\n        }\n        return selection;\n    }\n    maskInserted(input, control, splitPoint) {\n        let value = '';\n        let selection = splitPoint;\n        const changed = input.slice(0, splitPoint);\n        sequence(this.unmaskTokens)\n            .run(changed, control)\n            .chain(unmasked => {\n            selection = unmasked.join('').length;\n            const unchanged = control.slice(selection);\n            return sequence(this.maskTokens)\n                .run(unmasked.join('') + unchanged, control);\n        })\n            .fold(masked => {\n            value = masked.join('');\n        });\n        return {\n            selection,\n            value\n        };\n    }\n    get maskTokenCreator() {\n        const { prompt, promptPlaceholder } = this;\n        return {\n            literal: rule => literal(rule),\n            mask: rule => maskParser({ prompt, promptPlaceholder })(rule)\n        };\n    }\n    get unmaskTokenCreator() {\n        return {\n            literal: rule => unliteral(rule),\n            mask: rule => unmask(this.prompt)(rule)\n        };\n    }\n    get rawTokenCreator() {\n        const { prompt, promptPlaceholder, includeLiterals } = this;\n        return {\n            literal: _ => rawLiteral(includeLiterals),\n            mask: _ => rawMask({ prompt, promptPlaceholder })\n        };\n    }\n    get validationTokenCreator() {\n        const { prompt } = this;\n        return {\n            literal: _ => rawLiteral(false),\n            mask: _ => rawMask({ prompt, promptPlaceholder: '' })\n        };\n    }\n    tokenize() {\n        greedy(token(this.rules, this.maskTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.maskTokens = tokens;\n        });\n        greedy(token(this.rules, this.unmaskTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.unmaskTokens = tokens;\n        });\n        greedy(token(this.rules, this.rawTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.rawTokens = tokens;\n        });\n        greedy(token(this.rules, this.validationTokenCreator))\n            .run(this.mask)\n            .fold((tokens, _) => {\n            this.validationTokens = tokens;\n        });\n    }\n};\nMaskingService = tslib_1.__decorate([\n    Injectable()\n], MaskingService);\nexport { MaskingService };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6cAiLC,CAAC,AAGiB;;"}