/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, HostBinding, Input } from '@angular/core';
import * as ɵngcc0 from '@angular/core';

const _c0 = ["*"];
let serial = 0;
/**
 * Represents a hint message that will be shown underneath a form-bound component.
 */
let HintComponent = class HintComponent {
    /**
     * Represents a hint message that will be shown underneath a form-bound component.
     */
    constructor() {
        /**
         * Specifies the alignment of the Hint message.
         *
         * The possible values are:
         * * (Default) `start`
         * * `end`
         */
        this.align = 'start';
        /**
         * @hidden
         */
        this.id = `kendo-hint-${serial++}`;
        this.hostClass = true;
    }
    get startClass() {
        return this.align === 'start';
    }
    get endClass() {
        return this.align === 'end';
    }
    get idAttribute() {
        return this.id;
    }
}
HintComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: HintComponent, selectors: [["kendo-formhint"]], factory: function HintComponent_Factory(t) { return new (t || HintComponent)(); }, hostBindings: function HintComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(4);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.idAttribute);
        ɵngcc0.ɵɵclassProp("k-form-hint", ctx.hostClass);
        ɵngcc0.ɵɵclassProp("k-text-start", ctx.startClass);
        ɵngcc0.ɵɵclassProp("k-text-end", ctx.endClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { align: "align" }, ngContentSelectors: _c0, consts: 1, vars: 0, template: function HintComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(HintComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-formhint',
                template: `
        <ng-content></ng-content>
    `
            }]
    }], function () { return []; }, { constructor: [], align: [{
            type: Input
        }], id: [], hostClass: [{
            type: HostBinding,
            args: ['class.k-form-hint']
        }], startClass: [{
            type: HostBinding,
            args: ['class.k-text-start']
        }], endClass: [{
            type: HostBinding,
            args: ['class.k-text-end']
        }], idAttribute: [{
            type: HostBinding,
            args: ['attr.id']
        }] });;
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], HintComponent.prototype, "align", void 0);
tslib_1.__decorate([
    HostBinding('class.k-form-hint'),
    tslib_1.__metadata("design:type", Boolean)
], HintComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('class.k-text-start'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], HintComponent.prototype, "startClass", null);
tslib_1.__decorate([
    HostBinding('class.k-text-end'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], HintComponent.prototype, "endClass", null);
tslib_1.__decorate([
    HostBinding('attr.id'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], HintComponent.prototype, "idAttribute", null);
export { HintComponent };

//# sourceMappingURL=hint.component.js.map