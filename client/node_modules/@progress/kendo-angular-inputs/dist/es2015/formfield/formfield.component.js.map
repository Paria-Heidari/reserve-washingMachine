{"version":3,"file":"formfield.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es2015/formfield/formfield.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, ContentChild, ContentChildren, ElementRef, HostBinding, Input, isDevMode, Renderer2, QueryList } from '@angular/core';\nimport { NgControl, RadioControlValueAccessor } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { KendoInput, isDocumentAvailable } from '@progress/kendo-angular-common';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from '../package-metadata';\nimport { ErrorComponent } from './error.component';\nimport { HintComponent } from './hint.component';\n/**\n * Specifies a container for form-bound controls (Kendo controls or native HTML controls).\n * Applies styling and behavior rules.\n */\nlet FormFieldComponent = class FormFieldComponent {\n    constructor(renderer, localizationService, hostElement) {\n        this.renderer = renderer;\n        this.localizationService = localizationService;\n        this.hostElement = hostElement;\n        this.hostClass = true;\n        /**\n         *\n         * Specifies when the Hint messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is\n         * `valid` or `untouched` and `pristine`.\n         * * `always`&mdash;Allows full control over the visibility of the hints.\n         *\n         */\n        this.showHints = 'initial';\n        /**\n         * Specifies the layout orientation of the form field.\n         *\n         * * The possible values are:\n         *\n         * * (Default) `vertical`\n         * * `horizontal`\n         */\n        this.orientation = 'vertical';\n        /**\n         * Specifies when the Error messages will be shown.\n         *\n         * The possible values are:\n         *\n         * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is\n         * `invalid` and `touched` or `dirty`.\n         * * `always`&mdash;Allows full control over the visibility of the errors.\n         *\n         */\n        this.showErrors = 'initial';\n        this.subscriptions = new Subscription();\n        this.rtl = false;\n        validatePackage(packageMetadata);\n        this.subscriptions.add(this.localizationService.changes.subscribe(({ rtl }) => {\n            this.rtl = rtl;\n            this.direction = this.rtl ? 'rtl' : 'ltr';\n        }));\n    }\n    get errorClass() {\n        if (!this.control) {\n            return false;\n        }\n        return this.control.invalid && (this.control.touched || this.control.dirty);\n    }\n    get disabledClass() {\n        if (!this.control) {\n            return false;\n        }\n        // radiobutton group\n        if (this.isRadioControl(this.control)) {\n            return false;\n        }\n        return this.disabledControl() ||\n            this.disabledElement() ||\n            this.disabledKendoInput();\n    }\n    set formControls(formControls) {\n        this.validateFormControl(formControls);\n        this.control = formControls.first;\n    }\n    /**\n     * @hidden\n     */\n    get horizontal() {\n        return this.orientation === 'horizontal';\n    }\n    /**\n     * @hidden\n     */\n    get hasHints() {\n        return this.showHints === 'always' ? true : this.showHintsInitial();\n    }\n    /**\n     * @hidden\n     */\n    get hasErrors() {\n        return this.showErrors === 'always' ? true : this.showErrorsInitial();\n    }\n    ngAfterViewInit() {\n        this.setDescription();\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    disabledKendoInput() {\n        return this.kendoInput && this.kendoInput.disabled;\n    }\n    disabledControl() {\n        return this.control.disabled;\n    }\n    disabledElement() {\n        const elements = this.controlElementRefs.toArray();\n        return elements.every(e => e.nativeElement.hasAttribute('disabled'));\n    }\n    validateFormControl(formControls) {\n        if (isDevMode() && formControls.length !== 1 && !this.isControlGroup(formControls)) {\n            throw new Error('The `kendo-formfield` component should contain ' +\n                'only one control of type NgControl with a formControlName(https://angular.io/api/forms/FormControlName)' +\n                'or an ngModel(https://angular.io/api/forms/NgModel) binding.');\n        }\n    }\n    isControlGroup(formControls) {\n        if (!formControls.length) {\n            return false;\n        }\n        const name = formControls.first.name;\n        return formControls.toArray().every(c => c.name === name && (this.isRadioControl(c)));\n    }\n    isRadioControl(control) {\n        return control.valueAccessor instanceof RadioControlValueAccessor;\n    }\n    updateDescription() {\n        const controls = this.findControlElements();\n        if (!controls) {\n            return;\n        }\n        controls.forEach((control) => {\n            if (this.errorChildren.length > 0 || this.hintChildren.length > 0) {\n                const ariaIds = this.generateDescriptionIds(control);\n                this.renderer.setAttribute(control, 'aria-describedby', ariaIds);\n            }\n        });\n    }\n    findControlElements() {\n        if (!this.controlElementRefs) {\n            return;\n        }\n        // if the control is KendoInput and has focusableId - dropdowns, dateinputs\n        if (this.kendoInput && this.kendoInput.focusableId && isDocumentAvailable()) {\n            return [this.hostElement.nativeElement.querySelector(`#${this.kendoInput.focusableId}`)];\n        }\n        return this.controlElementRefs.map(el => el.nativeElement);\n    }\n    generateDescriptionIds(control) {\n        const ids = new Set();\n        if (control.hasAttribute('aria-describedby')) {\n            const attributes = control.getAttribute('aria-describedby').split(' ');\n            attributes.forEach((attr) => {\n                if (attr.includes('kendo-hint-') || attr.includes('kendo-error-')) {\n                    return;\n                }\n                ids.add(attr);\n            });\n        }\n        this.hintChildren.forEach((hint) => {\n            ids.add(hint.id);\n        });\n        this.errorChildren.forEach((error) => {\n            ids.add(error.id);\n        });\n        return Array.from(ids).join(' ');\n    }\n    showHintsInitial() {\n        if (!this.control) {\n            return true;\n        }\n        const { valid, untouched, pristine } = this.control;\n        return valid || (untouched && pristine);\n    }\n    showErrorsInitial() {\n        if (!this.control) {\n            return false;\n        }\n        const { invalid, dirty, touched } = this.control;\n        return invalid && (dirty || touched);\n    }\n    setDescription() {\n        this.updateDescription();\n        this.subscriptions.add(this.errorChildren.changes.subscribe(() => this.updateDescription()));\n        this.subscriptions.add(this.hintChildren.changes.subscribe(() => this.updateDescription()));\n    }\n};\ntslib_1.__decorate([\n    HostBinding('class.k-form-field'),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], FormFieldComponent.prototype, \"hostClass\", void 0);\ntslib_1.__decorate([\n    HostBinding('attr.dir'),\n    tslib_1.__metadata(\"design:type\", String)\n], FormFieldComponent.prototype, \"direction\", void 0);\ntslib_1.__decorate([\n    HostBinding('class.k-form-field-error'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], FormFieldComponent.prototype, \"errorClass\", null);\ntslib_1.__decorate([\n    HostBinding('class.k-form-field-disabled'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], FormFieldComponent.prototype, \"disabledClass\", null);\ntslib_1.__decorate([\n    ContentChildren(NgControl, { descendants: true }),\n    tslib_1.__metadata(\"design:type\", QueryList),\n    tslib_1.__metadata(\"design:paramtypes\", [QueryList])\n], FormFieldComponent.prototype, \"formControls\", null);\ntslib_1.__decorate([\n    ContentChildren(NgControl, { read: ElementRef, descendants: true }),\n    tslib_1.__metadata(\"design:type\", QueryList)\n], FormFieldComponent.prototype, \"controlElementRefs\", void 0);\ntslib_1.__decorate([\n    ContentChild(KendoInput, { static: true }),\n    tslib_1.__metadata(\"design:type\", Object)\n], FormFieldComponent.prototype, \"kendoInput\", void 0);\ntslib_1.__decorate([\n    ContentChildren(ErrorComponent, { descendants: true }),\n    tslib_1.__metadata(\"design:type\", QueryList)\n], FormFieldComponent.prototype, \"errorChildren\", void 0);\ntslib_1.__decorate([\n    ContentChildren(HintComponent, { descendants: true }),\n    tslib_1.__metadata(\"design:type\", QueryList)\n], FormFieldComponent.prototype, \"hintChildren\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], FormFieldComponent.prototype, \"showHints\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], FormFieldComponent.prototype, \"orientation\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], FormFieldComponent.prototype, \"showErrors\", void 0);\nFormFieldComponent = tslib_1.__decorate([\n    Component({\n        selector: 'kendo-formfield',\n        template: `\n        <ng-content select=\"label, kendo-label\"></ng-content>\n        <div [class.k-form-field-wrap]=\"horizontal\">\n            <ng-content></ng-content>\n            <ng-content select=\"kendo-formhint\" *ngIf=\"hasHints\"></ng-content>\n            <ng-content select=\"kendo-formerror\" *ngIf=\"hasErrors\"></ng-content>\n        </div>\n    `,\n        providers: [\n            LocalizationService,\n            {\n                provide: L10N_PREFIX,\n                useValue: 'kendo.formfield'\n            }\n        ]\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n        LocalizationService,\n        ElementRef])\n], FormFieldComponent);\nexport { FormFieldComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAmLC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAoDwC,AAkBlC;;;;;;"}