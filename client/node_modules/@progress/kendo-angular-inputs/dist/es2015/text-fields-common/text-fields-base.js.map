{"version":3,"file":"text-fields-base.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es2015/text-fields-common/text-fields-base.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from 'rxjs';\nimport { HostBinding, Input, Output, ViewChild, ElementRef, EventEmitter } from '@angular/core';\nimport { requiresZoneOnBlur } from '../common/utils';\nimport { hasObservers } from '@progress/kendo-angular-common';\n/**\n * @hidden\n */\nexport class TextFieldsBase {\n    constructor(localizationService, ngZone, changeDetector, renderer, injector, hostElement) {\n        this.localizationService = localizationService;\n        this.ngZone = ngZone;\n        this.changeDetector = changeDetector;\n        this.renderer = renderer;\n        this.injector = injector;\n        this.hostElement = hostElement;\n        /**\n         * Sets the `title` attribute of the internal textarea input element of the component.\n         */\n        this.title = '';\n        /**\n         * Sets the disabled state of the TextArea component.\n         *\n         * @default false\n         */\n        this.disabled = false;\n        /**\n         * Sets the read-only state of the TextArea component.\n         *\n         * @default false\n         */\n        this.readonly = false;\n        /**\n         * Provides a value for the TextArea component.\n         */\n        this.value = null;\n        /**\n         * Determines whether the whole value will be selected when the TextArea is clicked. Defaults to `false`.\n         *\n         * @default false\n         */\n        this.selectOnFocus = false;\n        /**\n         * Fires each time the user focuses the internal textarea element of the component.\n         * This event is useful when you need to distinguish between focusing the textarea element and focusing one of its adornments.\n         */\n        this.inputFocus = new EventEmitter();\n        /**\n         * Fires each time the internal textarea element gets blurred.\n         * This event is useful when adornments are used, in order to distinguish between blurring the textarea element and blurring the whole TextArea component.\n         */\n        this.inputBlur = new EventEmitter();\n        this.subscriptions = new Subscription();\n        this._isFocused = false;\n        this.focusChangedProgrammatically = false;\n        /**\n         * @hidden\n         */\n        this.handleInputBlur = () => {\n            this.changeDetector.markForCheck();\n            if (hasObservers(this.inputBlur) || requiresZoneOnBlur(this.control)) {\n                this.ngZone.run(() => {\n                    this.ngTouched();\n                    this.inputBlur.emit();\n                });\n            }\n        };\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n    }\n    get disabledClass() {\n        return this.disabled;\n    }\n    ngOnDestroy() {\n        this.subscriptions.unsubscribe();\n    }\n    /**\n     * @hidden\n     * Called when the status of the component changes to or from `disabled`.\n     * Depending on the value, it enables or disables the appropriate DOM element.\n     *\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.changeDetector.markForCheck();\n        this.disabled = isDisabled;\n    }\n}\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextFieldsBase.prototype, \"title\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextFieldsBase.prototype, \"disabled\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextFieldsBase.prototype, \"readonly\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextFieldsBase.prototype, \"value\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextFieldsBase.prototype, \"selectOnFocus\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextFieldsBase.prototype, \"placeholder\", void 0);\ntslib_1.__decorate([\n    Output(),\n    tslib_1.__metadata(\"design:type\", EventEmitter)\n], TextFieldsBase.prototype, \"inputFocus\", void 0);\ntslib_1.__decorate([\n    Output(),\n    tslib_1.__metadata(\"design:type\", EventEmitter)\n], TextFieldsBase.prototype, \"inputBlur\", void 0);\ntslib_1.__decorate([\n    ViewChild('input', { static: true }),\n    tslib_1.__metadata(\"design:type\", ElementRef)\n], TextFieldsBase.prototype, \"input\", void 0);\ntslib_1.__decorate([\n    HostBinding('class.k-state-disabled'),\n    tslib_1.__metadata(\"design:type\", Boolean),\n    tslib_1.__metadata(\"design:paramtypes\", [])\n], TextFieldsBase.prototype, \"disabledClass\", null);\ntslib_1.__decorate([\n    HostBinding('attr.dir'),\n    tslib_1.__metadata(\"design:type\", String)\n], TextFieldsBase.prototype, \"direction\", void 0);\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WA+EC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}