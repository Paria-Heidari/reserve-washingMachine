/**-----------------------------------------------------------------------------------------
* Copyright © 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, ViewChild, Renderer2 } from '@angular/core';
import { getRGBA, parseColor, getColorFromRGBA } from './utils';
import { isPresent } from '../common/utils';
import { isDocumentAvailable } from '@progress/kendo-angular-common';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Subscription } from 'rxjs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';

const _c0 = ["opacityInput"];
const _c1 = ["toggleFormatButton"];
const _c2 = [1, "k-vstack"];
const _c3 = [1, "k-colorgradient-toggle-mode", "k-button", "k-icon-button", "k-flat"];
const _c4 = ["toggleFormatButton", ""];
const _c5 = [1, "k-button-icon", "k-icon", "k-i-arrows-kpi"];
const _c6 = ["class", "k-textbox k-hex-value", 3, "disabled", "readonly", "value", "placeholder", "blur", "input", 4, "ngIf"];
const _c7 = [4, "ngIf"];
const _c8 = [1, "k-textbox", "k-hex-value", 3, "disabled", "readonly", "value", "placeholder", "blur", "input"];
const _c9 = ["hexInput", ""];
function ColorInputComponent_input_4_Template(rf, ctx) { if (rf & 1) {
    const _r192 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", _c8, _c9);
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_input_4_Template_input_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r192); const ctx_r191 = ɵngcc0.ɵɵnextContext(); return ctx_r191.handleHexInputBlur(); });
    ɵngcc0.ɵɵlistener("input", function ColorInputComponent_input_4_Template_input_input_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r192); const _r190 = ɵngcc0.ɵɵreference(1); const ctx_r193 = ɵngcc0.ɵɵnextContext(); return ctx_r193.handleHexValueChange(_r190.value); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r188 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r188.disabled)("readonly", ctx_r188.readonly)("value", ctx_r188.hex || "")("placeholder", ctx_r188.textFor("hexInputPlaceholder"));
} }
const _c10 = [3, "disabled", "readonly", "min", "max", "placeholder", "value", "autoCorrect", "spinners", "format", "decimals", "valueChange", "blur"];
const _c11 = ["red", ""];
const _c12 = [1, "k-colorgradient-input-label", 3, "for"];
const _c13 = ["green", ""];
const _c14 = ["blue", ""];
const _c15 = ["class", "k-vstack", 4, "ngIf"];
const _c16 = [3, "disabled", "readonly", "min", "max", "placeholder", "value", "autoCorrect", "spinners", "step", "format", "decimals", "valueChange", "blur"];
const _c17 = ["opacityInput", "", "alpha", ""];
function ColorInputComponent_ng_container_5_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r201 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", _c2);
    ɵngcc0.ɵɵelementStart(1, "kendo-numerictextbox", _c16, _c17);
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_div_16_Template_kendo_numerictextbox_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r201); const ctx_r200 = ɵngcc0.ɵɵnextContext(2); return ctx_r200.rgba.a = $event; });
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_ng_container_5_div_16_Template_kendo_numerictextbox_blur_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r201); const ctx_r202 = ɵngcc0.ɵɵnextContext(2); return ctx_r202.handleRgbaInputBlur(); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_div_16_Template_kendo_numerictextbox_valueChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r201); const ctx_r203 = ɵngcc0.ɵɵnextContext(2); return ctx_r203.handleRgbaValueChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "label", _c12);
    ɵngcc0.ɵɵtext(5, "A");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r199 = ɵngcc0.ɵɵreference(3);
    const ctx_r197 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵselect(1);
    ɵngcc0.ɵɵproperty("disabled", ctx_r197.disabled)("readonly", ctx_r197.readonly)("min", 0)("max", 1)("placeholder", ctx_r197.textFor("alphaInputPlaceholder"))("value", ctx_r197.rgba.a)("autoCorrect", true)("spinners", false)("step", 0.01)("format", "n2")("decimals", 2);
    ɵngcc0.ɵɵselect(4);
    ɵngcc0.ɵɵproperty("for", _r199.focusableId);
} }
function ColorInputComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r205 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "div", _c2);
    ɵngcc0.ɵɵelementStart(2, "kendo-numerictextbox", _c10, _c11);
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r204 = ɵngcc0.ɵɵnextContext(); return ctx_r204.rgba.r = $event; });
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_blur_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r206 = ɵngcc0.ɵɵnextContext(); return ctx_r206.handleRgbaInputBlur(); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r207 = ɵngcc0.ɵɵnextContext(); return ctx_r207.handleRgbaValueChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "label", _c12);
    ɵngcc0.ɵɵtext(5, "R");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(6, "div", _c2);
    ɵngcc0.ɵɵelementStart(7, "kendo-numerictextbox", _c10, _c13);
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r208 = ɵngcc0.ɵɵnextContext(); return ctx_r208.rgba.g = $event; });
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_blur_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r209 = ɵngcc0.ɵɵnextContext(); return ctx_r209.handleRgbaInputBlur(); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r210 = ɵngcc0.ɵɵnextContext(); return ctx_r210.handleRgbaValueChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "label", _c12);
    ɵngcc0.ɵɵtext(10, "G");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", _c2);
    ɵngcc0.ɵɵelementStart(12, "kendo-numerictextbox", _c10, _c14);
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r211 = ɵngcc0.ɵɵnextContext(); return ctx_r211.rgba.b = $event; });
    ɵngcc0.ɵɵlistener("blur", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_blur_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r212 = ɵngcc0.ɵɵnextContext(); return ctx_r212.handleRgbaInputBlur(); });
    ɵngcc0.ɵɵlistener("valueChange", function ColorInputComponent_ng_container_5_Template_kendo_numerictextbox_valueChange_12_listener($event) { ɵngcc0.ɵɵrestoreView(_r205); const ctx_r213 = ɵngcc0.ɵɵnextContext(); return ctx_r213.handleRgbaValueChange(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(14, "label", _c12);
    ɵngcc0.ɵɵtext(15, "B");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(16, ColorInputComponent_ng_container_5_div_16_Template, 6, 12, "div", _c15);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r194 = ɵngcc0.ɵɵreference(3);
    const _r195 = ɵngcc0.ɵɵreference(8);
    const _r196 = ɵngcc0.ɵɵreference(13);
    const ctx_r189 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵselect(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r189.disabled)("readonly", ctx_r189.readonly)("min", 0)("max", 255)("placeholder", ctx_r189.textFor("redInputPlaceholder"))("value", ctx_r189.rgba.r)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
    ɵngcc0.ɵɵselect(4);
    ɵngcc0.ɵɵproperty("for", _r194.focusableId);
    ɵngcc0.ɵɵselect(7);
    ɵngcc0.ɵɵproperty("disabled", ctx_r189.disabled)("readonly", ctx_r189.readonly)("min", 0)("max", 255)("placeholder", ctx_r189.textFor("greenInputPlaceholder"))("value", ctx_r189.rgba.g)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
    ɵngcc0.ɵɵselect(9);
    ɵngcc0.ɵɵproperty("for", _r195.focusableId);
    ɵngcc0.ɵɵselect(12);
    ɵngcc0.ɵɵproperty("disabled", ctx_r189.disabled)("readonly", ctx_r189.readonly)("min", 0)("max", 255)("placeholder", ctx_r189.textFor("blueInputPlaceholder"))("value", ctx_r189.rgba.b)("autoCorrect", true)("spinners", false)("format", "n")("decimals", 0);
    ɵngcc0.ɵɵselect(14);
    ɵngcc0.ɵɵproperty("for", _r196.focusableId);
    ɵngcc0.ɵɵselect(16);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r189.opacity);
} }
let ColorInputComponent = class ColorInputComponent {
    constructor(localization, host, renderer) {
        this.localization = localization;
        this.host = host;
        this.renderer = renderer;
        /**
         * Sets whether the alpha slider will be shown.
         */
        this.opacity = true;
        /**
         * Sets the disabled state of the ColorInput.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the ColorInput.
         */
        this.readonly = false;
        /**
         * Emits a parsed rgba string color.
         */
        this.valueChange = new EventEmitter();
        this.colorInputClass = true;
        /**
         * The rgba inputs values.
         */
        this.rgba = {};
        this.subscriptions = new Subscription();
    }
    /**
     * Indicates whether any of the inputs are focused.
     */
    get isFocused() {
        if (!(isDocumentAvailable() && isPresent(this.host))) {
            return false;
        }
        const activeElement = document.activeElement;
        return this.host.nativeElement.contains(activeElement);
    }
    /**
     * Indicates whether any of the rgba inputs have value.
     */
    get rgbaInputValid() {
        return Object.keys(this.rgba).every(key => isPresent(this.rgba[key]));
    }
    ngAfterViewInit() {
        this.initDomEvents();
    }
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        if (isPresent(changes.value) && !this.isFocused) {
            this.hex = parseColor(this.value, 'hex');
            this.rgba = getRGBA(this.value);
            this.rgba.a = parseColor(this.value, 'rgba') ? this.rgba.a : 1;
        }
    }
    handleRgbaValueChange() {
        const color = getColorFromRGBA(this.rgba);
        if (!this.rgbaInputValid || color === this.value) {
            return;
        }
        this.value = color;
        this.rgba = getRGBA(this.value);
        this.hex = parseColor(color, 'hex');
        this.valueChange.emit(color);
    }
    handleHexValueChange(hex) {
        this.hex = hex;
        const color = parseColor(hex, 'rgba');
        if (!isPresent(color) || color === this.value) {
            return;
        }
        this.value = color;
        this.rgba = getRGBA(color);
        this.valueChange.emit(color);
    }
    handleRgbaInputBlur() {
        if (!this.rgbaInputValid) {
            this.rgba = getRGBA(this.value);
        }
    }
    handleHexInputBlur() {
        this.hex = parseColor(this.value, 'hex');
    }
    textFor(key) {
        return this.localization.get(key);
    }
    toggleFormatView() {
        this.formatView = this.formatView === 'hex' ? 'rgba' : 'hex';
    }
    initDomEvents() {
        if (!this.host) {
            return;
        }
        this.subscriptions.add(this.renderer.listen(this.toggleFormatButton.nativeElement, 'click', () => this.toggleFormatView()));
    }
}
ColorInputComponent.ngComponentDef = ɵngcc0.ɵɵdefineComponent({ type: ColorInputComponent, selectors: [["kendo-colorinput"]], factory: function ColorInputComponent_Factory(t) { return new (t || ColorInputComponent)(ɵngcc0.ɵɵdirectiveInject(LocalizationService), ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2)); }, viewQuery: function ColorInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.opacityInput = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadViewQuery()) && (ctx.toggleFormatButton = _t.first);
    } }, hostBindings: function ColorInputComponent_HostBindings(rf, ctx, elIndex) { if (rf & 1) {
        ɵngcc0.ɵɵallocHostVars(2);
        ɵngcc0.ɵɵstyling();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-colorgradient-inputs", ctx.colorInputClass);
        ɵngcc0.ɵɵclassProp("k-hstack", ctx.colorInputClass);
        ɵngcc0.ɵɵstylingApply();
    } }, inputs: { opacity: "opacity", disabled: "disabled", readonly: "readonly", value: "value", formatView: "formatView" }, outputs: { valueChange: "valueChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()], consts: 6, vars: 2, template: function ColorInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", _c2);
        ɵngcc0.ɵɵelementStart(1, "button", _c3, _c4);
        ɵngcc0.ɵɵelement(3, "span", _c5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, ColorInputComponent_input_4_Template, 2, 4, "input", _c6);
        ɵngcc0.ɵɵtemplate(5, ColorInputComponent_ng_container_5_Template, 17, 34, "ng-container", _c7);
    } if (rf & 2) {
        ɵngcc0.ɵɵselect(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.formatView === "hex");
        ɵngcc0.ɵɵselect(5);
        ɵngcc0.ɵɵproperty("ngIf", ctx.formatView === "rgba");
    } }, encapsulation: 2 });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(ColorInputComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-colorinput',
                template: `
        <div class="k-vstack">
            <button class="k-colorgradient-toggle-mode k-button k-icon-button k-flat" #toggleFormatButton>
                <span class="k-button-icon k-icon k-i-arrows-kpi"></span>
            </button>
        </div>
        <input *ngIf="formatView === 'hex'"
            #hexInput
            class="k-textbox k-hex-value"
            [disabled]="disabled"
            [readonly]="readonly"
            [value]="hex || ''"
            [placeholder]="textFor('hexInputPlaceholder')"
            (blur)="handleHexInputBlur()"
            (input)="handleHexValueChange(hexInput.value)"
        />
        <ng-container *ngIf="formatView === 'rgba'">
            <div class="k-vstack">
                <kendo-numerictextbox
                    #red
                    [disabled]="disabled"
                    [readonly]="readonly"
                    [min]="0"
                    [max]="255"
                    [placeholder]="textFor('redInputPlaceholder')"
                    [(value)]="rgba.r"
                    [autoCorrect]="true"
                    [spinners]="false"
                    [format]="'n'"
                    [decimals]="0"
                    (blur)="handleRgbaInputBlur()"
                    (valueChange)="handleRgbaValueChange()">
                </kendo-numerictextbox>
                <label [for]="red.focusableId" class="k-colorgradient-input-label">R</label>
            </div>
            <div class="k-vstack">
                <kendo-numerictextbox
                    #green
                    [disabled]="disabled"
                    [readonly]="readonly"
                    [min]="0"
                    [max]="255"
                    [placeholder]="textFor('greenInputPlaceholder')"
                    [(value)]="rgba.g"
                    [autoCorrect]="true"
                    [spinners]="false"
                    [format]="'n'"
                    [decimals]="0"
                    (blur)="handleRgbaInputBlur()"
                    (valueChange)="handleRgbaValueChange()">
                </kendo-numerictextbox>
                <label [for]="green.focusableId" class="k-colorgradient-input-label">G</label>
            </div>
            <div class="k-vstack">
                <kendo-numerictextbox
                    #blue
                    [disabled]="disabled"
                    [readonly]="readonly"
                    [min]="0"
                    [max]="255"
                    [placeholder]="textFor('blueInputPlaceholder')"
                    [(value)]="rgba.b"
                    [autoCorrect]="true"
                    [spinners]="false"
                    [format]="'n'"
                    [decimals]="0"
                    (blur)="handleRgbaInputBlur()"
                    (valueChange)="handleRgbaValueChange()">
                </kendo-numerictextbox>
                <label [for]="blue.focusableId" class="k-colorgradient-input-label">B</label>
            </div>
            <div class="k-vstack" *ngIf="opacity">
                <kendo-numerictextbox  #opacityInput
                    #alpha
                    [disabled]="disabled"
                    [readonly]="readonly"
                    [min]="0"
                    [max]="1"
                    [placeholder]="textFor('alphaInputPlaceholder')"
                    [(value)]="rgba.a"
                    [autoCorrect]="true"
                    [spinners]="false"
                    [step]="0.01"
                    [format]="'n2'"
                    [decimals]="2"
                    (blur)="handleRgbaInputBlur()"
                    (valueChange)="handleRgbaValueChange()">
                </kendo-numerictextbox>
                <label [for]="alpha.focusableId" class="k-colorgradient-input-label">A</label>
            </div>
        </ng-container>
    `
            }]
    }], function () { return [{ type: LocalizationService }, { type: ElementRef }, { type: Renderer2 }]; }, { constructor: [], localization: [], host: [], renderer: [], opacity: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], colorInputClass: [{
            type: HostBinding,
            args: ['class.k-colorgradient-inputs']
        }, {
            type: HostBinding,
            args: ['class.k-hstack']
        }], rgba: [], subscriptions: [], isFocused: [], rgbaInputValid: [], ngAfterViewInit: [], ngOnDestroy: [], ngOnChanges: [], hex: [], handleRgbaValueChange: [], value: [{
            type: Input
        }], handleHexValueChange: [], handleRgbaInputBlur: [], handleHexInputBlur: [], textFor: [], toggleFormatView: [], formatView: [{
            type: Input
        }], initDomEvents: [], opacityInput: [{
            type: ViewChild,
            args: ['opacityInput', { read: ElementRef, static: false }]
        }], toggleFormatButton: [{
            type: ViewChild,
            args: ['toggleFormatButton', { static: false }]
        }] });;
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColorInputComponent.prototype, "formatView", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], ColorInputComponent.prototype, "value", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColorInputComponent.prototype, "opacity", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColorInputComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], ColorInputComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ColorInputComponent.prototype, "valueChange", void 0);
tslib_1.__decorate([
    HostBinding('class.k-colorgradient-inputs'),
    HostBinding('class.k-hstack'),
    tslib_1.__metadata("design:type", Boolean)
], ColorInputComponent.prototype, "colorInputClass", void 0);
tslib_1.__decorate([
    ViewChild('opacityInput', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], ColorInputComponent.prototype, "opacityInput", void 0);
tslib_1.__decorate([
    ViewChild('toggleFormatButton', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], ColorInputComponent.prototype, "toggleFormatButton", void 0);
ColorInputComponent = tslib_1.__decorate([
    tslib_1.__metadata("design:paramtypes", [LocalizationService,
        ElementRef,
        Renderer2])
], ColorInputComponent);
export { ColorInputComponent };

//# sourceMappingURL=color-input.component.js.map