{"version":3,"file":"textarea.directive.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-inputs/dist/es2015/shared/textarea.directive.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nvar TextAreaDirective_1;\nimport { Directive, ElementRef, EventEmitter, HostBinding, Renderer2, Optional, Inject, Input, NgZone, forwardRef, Output, ChangeDetectorRef, Injector } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { hasObservers, KendoInput, isDocumentAvailable } from '@progress/kendo-angular-common';\nimport { requiresZoneOnBlur } from '../common/utils';\nimport { RTL } from '@progress/kendo-angular-l10n';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n/**\n * Represents the [Kendo UI TextArea directive for the Inputs components for Angular]({% slug overview_textarea %}).\n * Provides floating labels to `textarea` elements.\n *\n * @example\n * ```ts-no-run\n * <textarea kendoTextArea></textarea>\n * ```\n */\nlet TextAreaDirective = TextAreaDirective_1 = class TextAreaDirective {\n    constructor(renderer, element, zone, changeDetector, injector, rtl) {\n        this.renderer = renderer;\n        this.element = element;\n        this.zone = zone;\n        this.changeDetector = changeDetector;\n        this.injector = injector;\n        this.elementClass = true;\n        this.autofillClass = true;\n        /**\n         * Fires each time the textarea value is changed.\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * Specifies if the `textarea` element will resize its height automatically\n         * ([see example]({% slug overview_textarea %}#toc-auto-resizing)).\n         *\n         * @default false\n         */\n        this.autoSize = false;\n        /**\n         * @hidden\n         */\n        this.onFocus = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onBlur = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.onValueChange = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillStart = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.autoFillEnd = new EventEmitter();\n        this.listeners = [];\n        this.ngChange = (_) => { };\n        this.ngTouched = () => { };\n        this.direction = rtl ? 'rtl' : 'ltr';\n    }\n    get id() {\n        return this.element.nativeElement.id;\n    }\n    set id(id) {\n        this.renderer.setAttribute(this.element.nativeElement, 'id', id);\n    }\n    /**\n     * @hidden\n     */\n    writeValue(value) {\n        this.elementValue = value;\n        this.resize();\n    }\n    /**\n     * @hidden\n     */\n    registerOnChange(fn) {\n        this.ngChange = fn;\n    }\n    /**\n     * @hidden\n     */\n    registerOnTouched(fn) {\n        this.ngTouched = fn;\n    }\n    /**\n     * @hidden\n     */\n    setDisabledState(isDisabled) {\n        this.setElementProperty('disabled', isDisabled);\n    }\n    ngOnInit() {\n        const element = this.element.nativeElement;\n        this.zone.runOutsideAngular(() => {\n            this.listeners = [\n                this.renderer.listen(element, 'focus', this.handleFocus.bind(this)),\n                this.renderer.listen(element, 'blur', this.handleBlur.bind(this)),\n                this.renderer.listen(element, 'animationstart', (e) => {\n                    if (e.animationName === 'autoFillStart') {\n                        this.autoFillStart.emit();\n                    }\n                    else if (e.animationName === 'autoFillEnd') {\n                        this.autoFillEnd.emit();\n                    }\n                })\n            ];\n            if (isDocumentAvailable() && this.autoSize) {\n                this.resizeSubscription = fromEvent(window, 'resize')\n                    .pipe((debounceTime(50)))\n                    .subscribe(() => this.resize());\n            }\n            this.inputSubscription = fromEvent(element, 'input')\n                .subscribe(this.handleInput.bind(this));\n        });\n        this.control = this.injector.get(NgControl, null);\n    }\n    ngOnChanges(changes) {\n        const element = this.element.nativeElement;\n        if (changes.value) {\n            this.elementValue = this.value;\n        }\n        if (changes.autoSize) {\n            if (this.autoSize) {\n                this.initialHeight = element.offsetHeight;\n                this.renderer.setStyle(element, 'resize', 'none');\n            }\n            else {\n                this.renderer.setStyle(element, 'overflow-y', 'auto');\n                this.renderer.setStyle(element, 'resize', 'both');\n                element.style.height = `${this.initialHeight}px`;\n            }\n        }\n        this.resize();\n    }\n    ngOnDestroy() {\n        this.listeners.forEach(listener => listener());\n        if (this.inputSubscription) {\n            this.inputSubscription.unsubscribe();\n        }\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    get elementValue() {\n        if (this.element) {\n            return this.element.nativeElement.value;\n        }\n        return '';\n    }\n    set elementValue(value) {\n        this.setElementProperty('value', (value === undefined || value === null) ? '' : value);\n    }\n    setElementProperty(name, value) {\n        if (this.element) {\n            this.renderer.setProperty(this.element.nativeElement, name, value);\n        }\n    }\n    resize() {\n        if (!this.autoSize) {\n            return;\n        }\n        const element = this.element.nativeElement;\n        this.renderer.setStyle(element, 'overflow-y', 'hidden');\n        element.style.height = `${this.initialHeight}px`;\n        const scrollHeight = element.scrollHeight;\n        if (scrollHeight > this.initialHeight) {\n            element.style.height = `${scrollHeight}px`;\n        }\n    }\n    handleInput() {\n        const value = this.elementValue;\n        this.value = value;\n        if (this.control || hasObservers(this.onValueChange) || hasObservers(this.valueChange)) {\n            this.zone.run(() => {\n                this.ngChange(value);\n                this.onValueChange.emit(value);\n                this.valueChange.emit(value);\n                this.changeDetector.markForCheck();\n            });\n        }\n        this.resize();\n    }\n    handleFocus() {\n        if (hasObservers(this.onFocus)) {\n            this.zone.run(() => {\n                this.onFocus.emit();\n            });\n        }\n    }\n    handleBlur() {\n        if (hasObservers(this.onBlur) || requiresZoneOnBlur(this.control)) {\n            this.zone.run(() => {\n                this.ngTouched();\n                this.onBlur.emit();\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n};\ntslib_1.__decorate([\n    HostBinding('class.k-textarea'),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextAreaDirective.prototype, \"elementClass\", void 0);\ntslib_1.__decorate([\n    HostBinding('class.k-autofill'),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextAreaDirective.prototype, \"autofillClass\", void 0);\ntslib_1.__decorate([\n    HostBinding('attr.dir'),\n    tslib_1.__metadata(\"design:type\", String)\n], TextAreaDirective.prototype, \"direction\", void 0);\ntslib_1.__decorate([\n    Output(),\n    tslib_1.__metadata(\"design:type\", EventEmitter)\n], TextAreaDirective.prototype, \"valueChange\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", Boolean)\n], TextAreaDirective.prototype, \"autoSize\", void 0);\ntslib_1.__decorate([\n    Input(),\n    tslib_1.__metadata(\"design:type\", String)\n], TextAreaDirective.prototype, \"value\", void 0);\nTextAreaDirective = TextAreaDirective_1 = tslib_1.__decorate([\n    Directive({\n        providers: [{\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => TextAreaDirective_1),\n                multi: true\n            }, {\n                provide: KendoInput,\n                useExisting: forwardRef(() => TextAreaDirective_1)\n            }],\n        selector: 'textarea[kendoTextArea]'\n    }),\n    tslib_1.__param(5, Optional()), tslib_1.__param(5, Inject(RTL)),\n    tslib_1.__metadata(\"design:paramtypes\", [Renderer2,\n        ElementRef,\n        NgZone,\n        ChangeDetectorRef,\n        Injector, Boolean])\n], TextAreaDirective);\nexport { TextAreaDirective };\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAwMC;;;;;;;;;;;;;;;;;;;;;;;;;8DAyB6D,AAWvD;;;;;;;;;"}