/**-----------------------------------------------------------------------------------------
* Copyright Â© 2021 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var util_1 = require("../../common/util");
/**
 * @hidden
 *
 * A directive which manages the in-memory checked state of the MultiSelectTree nodes.
 */
var BaseCheckDirective = /** @class */ (function () {
    function BaseCheckDirective() {
    }
    BaseCheckDirective.prototype.addItem = function (item) {
        if (this.isItemChecked(item)) {
            return;
        }
        var level = util_1.getHierarchicalItemLevel(item.index);
        var candidate = tslib_1.__assign({}, item, { level: level });
        this.checkedItems.push(candidate);
        this.checkedKeys.add(util_1.valueFrom(candidate, this.valueField));
    };
    BaseCheckDirective.prototype.removeItem = function (item) {
        var _this = this;
        if (!this.isItemChecked(item)) {
            return;
        }
        var level = util_1.getHierarchicalItemLevel(item.index);
        var candidate = tslib_1.__assign({}, item, { level: level });
        this.checkedItems = this.checkedItems
            .filter(function (item) { return util_1.valueFrom(item, _this.valueField) !== util_1.valueFrom(candidate, _this.valueField); });
        this.checkedKeys.delete(util_1.valueFrom(candidate, this.valueField));
    };
    BaseCheckDirective.prototype.isItemChecked = function (item) {
        return this.checkedKeys.has(util_1.valueFrom(item, this.valueField));
    };
    BaseCheckDirective.prototype.updateItems = function () {
        var _this = this;
        this.checkedItems = this.checkedItems || [];
        this.checkedKeys = new Set(this.checkedItems.map(function (item) { return util_1.valueFrom(item, _this.valueField); }));
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], BaseCheckDirective.prototype, "valueField", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], BaseCheckDirective.prototype, "checkedItems", void 0);
    return BaseCheckDirective;
}());
exports.BaseCheckDirective = BaseCheckDirective;
