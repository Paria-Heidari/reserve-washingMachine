{"version":3,"file":"align.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-popup/dist/es2015/services/align.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Injectable, Inject, Optional } from '@angular/core';\nimport { DOMService } from './dom.service';\nimport { eitherRect, removeStackingOffset, scaleRect } from '../util';\nimport { SCALE } from '../scale';\n/**\n * @hidden\n */\nlet AlignService = class AlignService {\n    constructor(_dom, scale = 1) {\n        this._dom = _dom;\n        this.scale = scale;\n    }\n    alignElement(settings) {\n        const { anchor, element, anchorAlign, elementAlign, margin, offset, positionMode } = settings;\n        const scale = this.scale || 1;\n        const fixedMode = positionMode === 'fixed' || !this._dom.hasOffsetParent(element);\n        const anchorRect = fixedMode ? this.absoluteRect(anchor, element, offset, scale) : this.relativeRect(anchor, element, offset, scale);\n        const elementRect = scaleRect(this._dom.offset(element), scale);\n        const result = this._dom.align({\n            anchorAlign: anchorAlign,\n            anchorRect: anchorRect,\n            elementAlign: elementAlign,\n            elementRect: elementRect,\n            margin\n        });\n        return result;\n    }\n    absoluteRect(anchor, element, offset, scale) {\n        const scrollPos = this.elementScrollPosition(anchor, element);\n        const rect = eitherRect(this._dom.offset(anchor), offset);\n        const stackScale = 2 * scale;\n        const stackScroll = this._dom.stackingElementScroll(element);\n        if (scale !== 1 && stackScroll) {\n            stackScroll.x /= stackScale;\n            stackScroll.y /= stackScale;\n        }\n        const stackOffset = this._dom.stackingElementOffset(element);\n        if (scale !== 1 && stackOffset) {\n            stackOffset.left /= stackScale;\n            stackOffset.top /= stackScale;\n        }\n        return this._dom.removeScroll(this._dom.addScroll(removeStackingOffset(scaleRect(rect, scale), stackOffset), stackScroll), scrollPos);\n    }\n    elementScrollPosition(anchor, element) {\n        return anchor ? { x: 0, y: 0 } : this._dom.scrollPosition(element);\n    }\n    relativeRect(anchor, element, offset, scale) {\n        const rect = eitherRect(this._dom.position(anchor, element, scale), offset);\n        return scaleRect(rect, scale);\n    }\n};\nAlignService = tslib_1.__decorate([\n    Injectable(),\n    tslib_1.__param(1, Inject(SCALE)), tslib_1.__param(1, Optional()),\n    tslib_1.__metadata(\"design:paramtypes\", [DOMService, Number])\n], AlignService);\nexport { AlignService };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iJA2CC;mCACkC,AAClB;;;;;"}