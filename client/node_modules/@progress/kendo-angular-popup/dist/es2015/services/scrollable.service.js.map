{"version":3,"file":"scrollable.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-popup/dist/es2015/services/scrollable.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Injectable, NgZone } from '@angular/core';\nimport { fromEvent, merge } from 'rxjs';\nimport { auditTime } from 'rxjs/operators';\nimport { isDocumentAvailable } from '@progress/kendo-angular-common';\nimport { DOMService } from './dom.service';\nimport { FRAME_DURATION } from '../util';\n/**\n * @hidden\n */\nexport const THRESHOLD_DIFF = 1;\n/**\n * @hidden\n */\nlet ScrollableService = class ScrollableService {\n    constructor(_dom, _zone) {\n        this._dom = _dom;\n        this._zone = _zone;\n    }\n    forElement(element) {\n        this.unsubscribe();\n        this.element = element;\n        return this;\n    }\n    subscribe(callback) {\n        if (!callback || !isDocumentAvailable() || !this.element) {\n            return;\n        }\n        const nativeElement = this._dom.nativeElement(this.element);\n        const parents = this._dom.scrollableParents(this.element);\n        this._zone.runOutsideAngular(() => {\n            const observables = parents.map(p => fromEvent(p, \"scroll\").pipe(auditTime(FRAME_DURATION)));\n            const subscriber = (e) => {\n                const target = e.target;\n                const isParent = parents.filter(p => p === target).length > 0;\n                const isDocument = target === document;\n                const isWindow = target === window;\n                if (isParent || isDocument || isWindow) {\n                    callback(this.isVisible(nativeElement, target));\n                }\n            };\n            this.subscription = merge(...observables).subscribe(subscriber);\n        });\n    }\n    unsubscribe() {\n        if (!this.subscription) {\n            return;\n        }\n        this.subscription.unsubscribe();\n    }\n    isVisible(elem, container) {\n        const elemRect = this._dom.boundingOffset(elem);\n        const containerRect = this._dom.boundingOffset(container);\n        if (THRESHOLD_DIFF < (containerRect.top - elemRect.bottom)) {\n            return false;\n        }\n        if (THRESHOLD_DIFF < (elemRect.top - containerRect.bottom)) {\n            return false;\n        }\n        if (THRESHOLD_DIFF < (elemRect.left - containerRect.right)) {\n            return false;\n        }\n        if (THRESHOLD_DIFF < (containerRect.left - elemRect.right)) {\n            return false;\n        }\n        return true;\n    }\n};\nScrollableService = tslib_1.__decorate([\n    Injectable(),\n    tslib_1.__metadata(\"design:paramtypes\", [DOMService, NgZone])\n], ScrollableService);\nexport { ScrollableService };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kNAyDC;wCACuC,AACvB;;;;"}