{"version":3,"file":"popup.component.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-popup/dist/es/popup.component.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Component, ElementRef, EventEmitter, Input, Output, NgZone, Renderer2, ViewChild } from '@angular/core';\nimport { AlignService } from './services/align.service';\nimport { DOMService } from './services/dom.service';\nimport { PositionService } from './services/position.service';\nimport { ResizeService } from './services/resize.service';\nimport { ScrollableService } from './services/scrollable.service';\nimport { AnimationService } from './services/animation.service';\nimport { isDifferentOffset } from './util';\nimport { hasObservers, isDocumentAvailable, ResizeSensorComponent } from '@progress/kendo-angular-common';\nimport { from } from 'rxjs';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { packageMetadata } from './package-metadata';\nvar DEFAULT_OFFSET = { left: -10000, top: 0 };\nvar ANIMATION_CONTAINER = 'k-animation-container';\nvar ANIMATION_CONTAINER_FIXED = 'k-animation-container-fixed';\n/**\n * Represents the [Kendo UI Popup component for Angular]({% slug overview_popup %}).\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <button #anchor (click)=\"show=!show\">Toggle</button>\n *  <kendo-popup *ngIf=\"show\" [anchor]=\"anchor\">\n *      <strong>Popup content!</strong>\n *  </kendo-popup>\n * `\n * })\n * class AppComponent {\n *   public show: boolean = false;\n * }\n * ```\n */\nvar PopupComponent = /** @class */ (function () {\n    function PopupComponent(container, _alignService, domService, _positionService, _resizeService, _scrollableService, animationService, _renderer, _zone) {\n        this.container = container;\n        this._alignService = _alignService;\n        this.domService = domService;\n        this._positionService = _positionService;\n        this._resizeService = _resizeService;\n        this._scrollableService = _scrollableService;\n        this.animationService = animationService;\n        this._renderer = _renderer;\n        this._zone = _zone;\n        /**\n         * Controls the Popup animation. By default, the opening and closing animations\n         * are enabled ([see example]({% slug animations_popup %})).\n         */\n        this.animate = true;\n        /**\n         * Specifies the anchor pivot point\n         * ([see example]({% slug alignmentpositioning_popup %}#toc-positioning)).\n         */\n        this.anchorAlign = { horizontal: 'left', vertical: 'bottom' };\n        /**\n         * Configures the collision behavior of the Popup\n         * ([see example]({% slug viewportboundarydetection_popup %})).\n         */\n        this.collision = { horizontal: 'fit', vertical: 'flip' };\n        /**\n         * Specifies the pivot point of the Popup\n         * ([see example]({% slug alignmentpositioning_popup %}#toc-positioning)).\n         */\n        this.popupAlign = { horizontal: 'left', vertical: 'top' };\n        /**\n         * Controls whether the component will copy the `anchor` font styles.\n         */\n        this.copyAnchorStyles = false;\n        /**\n         * Specifies the position mode of the component. By default, the Popup uses fixed positioning.\n         * To make the Popup acquire absolute positioning, set this option to `absolute`.\n         *\n         * > If you need to support mobile browsers with the zoom option,\n         * use the `absolute` positioning of the Popup.\n         *\n         * @example\n         * ```html\n         * <style>\n         *  .parent-content {\n         *     position: relative;\n         *     width: 200px;\n         *     height: 200px;\n         *     overflow: auto;\n         *     margin: 200px auto;\n         *     border: 1px solid red;\n         *  }\n         *  .content {\n         *     position: relative;\n         *     width: 100px;\n         *     height: 100px;\n         *     overflow: auto;\n         *     margin: 300px;\n         *     border: 1px solid blue;\n         *  }\n         *  .anchor {\n         *     position: absolute;\n         *     top: 200px;\n         *     left: 200px;\n         *  }\n         * </style>\n         * ```\n         * ```ts\n         * _@Component({\n         * selector: 'my-app',\n         * template: `\n         *   <div class=\"example-config\">\n         *      Position mode:\n         *      <label><input type=\"radio\" value=\"fixed\" [(ngModel)]=\"mode\" /> Fixed</label>\n         *      <label><input type=\"radio\" value=\"absolute\" [(ngModel)]=\"mode\" /> Absolute</label>\n         *   </div>\n         *   <div class=\"example-config\">\n         *       Append to\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"1\" [(ngModel)]=\"checked\" />\n         *           Root component\n         *       </label>\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"2\" [(ngModel)]=\"checked\" />\n         *           <span style=\"color: red\">Red Container</span>\n         *       </label>\n         *       <label>\n         *           <input type=\"radio\" name=\"place\" [value]=\"3\" [(ngModel)]=\"checked\" />\n         *           <span style=\"color: blue\">Blue Container</span>\n         *       </label>\n         *   </div>\n         *   <div class=\"example\">\n         *     <div class=\"parent-content\" [scrollLeft]=\"250\" [scrollTop]=\"230\">\n         *         <div class=\"content\" [scrollLeft]=\"170\" [scrollTop]=\"165\">\n         *           <button #anchor class=\"anchor\" (click)=\"show = !show\">Toggle</button>\n         *           <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 3\">\n         *             <ul>\n         *                 <li>Item1</li>\n         *                 <li>Item2</li>\n         *                 <li>Item3</li>\n         *             </ul>\n         *           </kendo-popup>\n         *           <span style=\"position: absolute; top: 400px; left: 400px\">Bottom/Right</span>\n         *         </div>\n         *         <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 2\">\n         *           <ul>\n         *               <li>Item1</li>\n         *               <li>Item2</li>\n         *               <li>Item3</li>\n         *           </ul>\n         *         </kendo-popup>\n         *         <span style=\"position: absolute; top: 600px; left: 600px\">Bottom/Right</span>\n         *     </div>\n         *     <kendo-popup [positionMode]=\"mode\" [anchor]=\"anchor\" (anchorViewportLeave)=\"show=false\" *ngIf=\"show && checked === 1\">\n         *       <ul>\n         *           <li>Item1</li>\n         *           <li>Item2</li>\n         *           <li>Item3</li>\n         *       </ul>\n         *     </kendo-popup>\n         *   </div>\n         * `\n         * })\n         * class AppComponent {\n         *   public checked: number = 3;\n         *   public mode: string = 'absolute';\n         *   public show: boolean = true;\n         * }\n         * ```\n         */\n        this.positionMode = 'fixed';\n        /**\n         * Specifies the absolute position of the element\n         * ([see example]({% slug alignmentpositioning_popup %}#toc-aligning-to-absolute-points)).\n         * The Popup opens next to that point. The Popup pivot point is defined by the `popupAlign` configuration option.\n         * The boundary detection is applied by using the window viewport.\n         */\n        this.offset = DEFAULT_OFFSET;\n        /**\n         * Fires when the anchor is scrolled outside the screen boundaries.\n         * ([see example]({% slug closing_popup %}#toc-after-leaving-the-viewport)).\n         */\n        this.anchorViewportLeave = new EventEmitter();\n        /**\n         * Fires after the component is closed.\n         */\n        this.close = new EventEmitter();\n        /**\n         * Fires after the component is opened and the opening animation ends.\n         */\n        this.open = new EventEmitter();\n        /**\n         * Fires after the component is opened and the Popup is positioned.\n         */\n        this.positionChange = new EventEmitter();\n        this.resolvedPromise = Promise.resolve(null);\n        this.initialCheck = true;\n        validatePackage(packageMetadata);\n        this._renderer.addClass(container.nativeElement, ANIMATION_CONTAINER);\n        this.updateFixedClass();\n    }\n    PopupComponent.prototype.ngOnInit = function () {\n        this.reposition = this.reposition.bind(this);\n        this._resizeService.subscribe(this.reposition);\n        this.animationSubscriptions = this.animationService.start.subscribe(this.onAnimationStart.bind(this));\n        this.animationSubscriptions.add(this.animationService.end.subscribe(this.onAnimationEnd.bind(this)));\n        this._scrollableService.forElement(this.anchor || this.container).subscribe(this.onScroll.bind(this));\n        this.currentOffset = DEFAULT_OFFSET;\n        this.setZIndex();\n        this.copyFontStyles();\n        this.updateFixedClass();\n        this.reposition();\n    };\n    PopupComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.copyAnchorStyles) {\n            this.copyFontStyles();\n        }\n        if (changes.positionMode) {\n            this.updateFixedClass();\n        }\n    };\n    PopupComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (!this.animate) {\n            this.resolvedPromise.then(function () {\n                _this.onAnimationEnd();\n            });\n        }\n    };\n    PopupComponent.prototype.ngAfterViewChecked = function () {\n        var _this = this;\n        if (this.initialCheck) {\n            this.initialCheck = false;\n            return;\n        }\n        this._zone.runOutsideAngular(function () {\n            // workarounds https://github.com/angular/angular/issues/19094\n            // uses promise because it is executed synchronously after the content is updated\n            // does not use onStable in case the current zone is not the angular one.\n            _this.unsubscribeReposition();\n            _this.repositionSubscription = from(_this.resolvedPromise)\n                .subscribe(_this.reposition);\n        });\n    };\n    PopupComponent.prototype.ngOnDestroy = function () {\n        this.anchorViewportLeave.complete();\n        this.positionChange.complete();\n        this.close.emit();\n        this.close.complete();\n        this._resizeService.unsubscribe();\n        this._scrollableService.unsubscribe();\n        this.animationSubscriptions.unsubscribe();\n        this.unsubscribeReposition();\n    };\n    /**\n     * @hidden\n     */\n    PopupComponent.prototype.onResize = function () {\n        this.reposition();\n    };\n    PopupComponent.prototype.onAnimationStart = function () {\n        this._renderer.removeClass(this.container.nativeElement, 'k-animation-container-shown');\n    };\n    PopupComponent.prototype.onAnimationEnd = function () {\n        this._renderer.addClass(this.container.nativeElement, 'k-animation-container-shown');\n        this.open.emit();\n        this.open.complete();\n    };\n    Object.defineProperty(PopupComponent.prototype, \"currentOffset\", {\n        get: function () {\n            return this._currentOffset;\n        },\n        set: function (offset) {\n            this.setContainerStyle('left', offset.left + \"px\");\n            this.setContainerStyle('top', offset.top + \"px\");\n            this._currentOffset = offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PopupComponent.prototype.setZIndex = function () {\n        if (this.anchor) {\n            this.setContainerStyle('z-index', String(this.domService.zIndex(this.anchor, this.container)));\n        }\n    };\n    PopupComponent.prototype.reposition = function () {\n        var _this = this;\n        if (!isDocumentAvailable()) {\n            return;\n        }\n        var _a = this.position(), flip = _a.flip, offset = _a.offset;\n        if (!this.currentOffset || isDifferentOffset(this.currentOffset, offset)) {\n            this.currentOffset = offset;\n            if (hasObservers(this.positionChange)) {\n                this._zone.run(function () { return _this.positionChange.emit({ offset: offset, flip: flip }); });\n            }\n        }\n        if (this.animate) {\n            this.animationService.play(this.contentContainer.nativeElement, this.animate, flip);\n        }\n        this.resizeSensor.acceptSize();\n    };\n    PopupComponent.prototype.position = function () {\n        var alignedOffset = this._alignService.alignElement({\n            anchor: this.anchor,\n            anchorAlign: this.anchorAlign,\n            element: this.container,\n            elementAlign: this.popupAlign,\n            margin: this.margin,\n            offset: this.offset,\n            positionMode: this.positionMode\n        });\n        return this._positionService.positionElement({\n            anchor: this.anchor,\n            anchorAlign: this.anchorAlign,\n            collisions: this.collision,\n            currentLocation: alignedOffset,\n            element: this.container,\n            elementAlign: this.popupAlign,\n            margin: this.margin\n        });\n    };\n    PopupComponent.prototype.onScroll = function (isInViewPort) {\n        var _this = this;\n        var hasLeaveObservers = hasObservers(this.anchorViewportLeave);\n        if (isInViewPort || !hasLeaveObservers) {\n            this.reposition();\n        }\n        else if (hasLeaveObservers) {\n            this._zone.run(function () {\n                _this.anchorViewportLeave.emit();\n            });\n        }\n    };\n    PopupComponent.prototype.copyFontStyles = function () {\n        var _this = this;\n        if (!this.anchor || !this.copyAnchorStyles) {\n            return;\n        }\n        this.domService.getFontStyles(this.anchor)\n            .forEach(function (s) { return _this.setContainerStyle(s.key, s.value); });\n    };\n    PopupComponent.prototype.updateFixedClass = function () {\n        var action = this.positionMode === 'fixed' ? 'addClass' : 'removeClass';\n        this._renderer[action](this.container.nativeElement, ANIMATION_CONTAINER_FIXED);\n    };\n    PopupComponent.prototype.setContainerStyle = function (name, value) {\n        this._renderer.setStyle(this.container.nativeElement, name, value);\n    };\n    PopupComponent.prototype.unsubscribeReposition = function () {\n        if (this.repositionSubscription) {\n            this.repositionSubscription.unsubscribe();\n        }\n    };\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"animate\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], PopupComponent.prototype, \"anchor\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"anchorAlign\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"collision\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"popupAlign\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Boolean)\n    ], PopupComponent.prototype, \"copyAnchorStyles\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"popupClass\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], PopupComponent.prototype, \"positionMode\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"offset\", void 0);\n    tslib_1.__decorate([\n        Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], PopupComponent.prototype, \"margin\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], PopupComponent.prototype, \"anchorViewportLeave\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], PopupComponent.prototype, \"close\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], PopupComponent.prototype, \"open\", void 0);\n    tslib_1.__decorate([\n        Output(),\n        tslib_1.__metadata(\"design:type\", EventEmitter)\n    ], PopupComponent.prototype, \"positionChange\", void 0);\n    tslib_1.__decorate([\n        ViewChild('container', { static: true }),\n        tslib_1.__metadata(\"design:type\", ElementRef)\n    ], PopupComponent.prototype, \"contentContainer\", void 0);\n    tslib_1.__decorate([\n        ViewChild(ResizeSensorComponent, { static: true }),\n        tslib_1.__metadata(\"design:type\", ResizeSensorComponent)\n    ], PopupComponent.prototype, \"resizeSensor\", void 0);\n    PopupComponent = tslib_1.__decorate([\n        Component({\n            exportAs: 'kendo-popup',\n            providers: [AlignService, AnimationService, DOMService, PositionService, ResizeService, ScrollableService],\n            selector: 'kendo-popup',\n            template: \"\\n        <div class=\\\"k-popup\\\" [ngClass]=\\\"popupClass\\\" #container>\\n            <ng-content></ng-content>\\n            <ng-template [ngTemplateOutlet]=\\\"content\\\" [ngIf]=\\\"content\\\"></ng-template>\\n            <kendo-resize-sensor [rateLimit]=\\\"100\\\" (resize)=\\\"onResize()\\\">\\n            </kendo-resize-sensor>\\n        </div>\\n     \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [ElementRef,\n            AlignService,\n            DOMService,\n            PositionService,\n            ResizeService,\n            ScrollableService,\n            AnimationService,\n            Renderer2,\n            NgZone])\n    ], PopupComponent);\n    return PopupComponent;\n}());\nexport { PopupComponent };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yCAiZyC,AAM9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAUY;;;;"}