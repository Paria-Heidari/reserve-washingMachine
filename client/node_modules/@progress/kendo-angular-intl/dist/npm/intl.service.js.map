{"version":3,"file":"intl.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-intl/dist/npm/intl.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar kendo_licensing_1 = require(\"@progress/kendo-licensing\");\nvar package_metadata_1 = require(\"./package-metadata\");\nvar intl_members_1 = require(\"./intl-members\");\nvar i0 = require(\"@angular/core\");\nvar LOCALE_REGEX = /_/g;\n/**\n * @hidden\n */\nfunction cldrServiceFactory(localeId) {\n    return new CldrIntlService(localeId);\n}\nexports.cldrServiceFactory = cldrServiceFactory;\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\nvar IntlService = /** @class */ (function () {\n    /**\n     * @hidden\n     */\n    function IntlService() {\n        /**\n         * @hidden\n         */\n        this.changes = new core_1.EventEmitter();\n        kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);\n    }\n    /**\n     * Notifies that the service was changed.\n     */\n    IntlService.prototype.notify = function () {\n        this.changes.emit();\n    };\n    IntlService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IntlService_Factory() { return cldrServiceFactory(i0.ɵɵinject(i0.LOCALE_ID)); }, token: IntlService, providedIn: \"root\" });\n    IntlService = tslib_1.__decorate([\n        core_1.Injectable({\n            providedIn: 'root',\n            useFactory: cldrServiceFactory,\n            deps: [core_1.LOCALE_ID]\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], IntlService);\n    return IntlService;\n}());\nexports.IntlService = IntlService;\n/**\n * The Internationalization service implemented by using\n * the CLDR Database via the `@telerik/kendo-intl` package.\n */\nvar CldrIntlService = /** @class */ (function (_super) {\n    tslib_1.__extends(CldrIntlService, _super);\n    /**\n     * Creates a new instance of the service with the ID of the specified locale.\n     *\n     * Note that the parts of the locale ID can be separated by either `_` (underscore)\n     * or `-` (dash).\n     *\n     * @param localeId - The default locale ID.\n     */\n    function CldrIntlService(localeId) {\n        var _this = _super.call(this) || this;\n        _this.localeId = localeId;\n        return _this;\n    }\n    Object.defineProperty(CldrIntlService.prototype, \"localeId\", {\n        /**\n         * Gets or sets the current locale ID.\n         */\n        get: function () {\n            return this.locale;\n        },\n        set: function (value) {\n            // Angular locales use underscore, for example, en_US\n            // while IETF BCP-47 specifies a dash.\n            // https://tools.ietf.org/html/bcp47\n            var locale = value.replace(LOCALE_REGEX, '-');\n            if (locale !== this.locale) {\n                this.locale = locale;\n                this.notify();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    CldrIntlService.prototype.format = function (format) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        return intl_members_1.format(format, values, this.localeId);\n    };\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted object.\n     */\n    CldrIntlService.prototype.toString = function (value, format, localeId) {\n        return intl_members_1.toString(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted date.\n     */\n    CldrIntlService.prototype.formatDate = function (value, format, localeId) {\n        return intl_members_1.formatDate(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed date.\n     */\n    CldrIntlService.prototype.parseDate = function (value, format, localeId) {\n        return intl_members_1.parseDate(value, format, localeId || this.localeId);\n    };\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The parsed number.\n     */\n    CldrIntlService.prototype.parseNumber = function (value, format, localeId) {\n        return intl_members_1.parseNumber(value, localeId || this.localeId, format);\n    };\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return The formatted number.\n     */\n    CldrIntlService.prototype.formatNumber = function (value, format, localeId) {\n        return intl_members_1.formatNumber(value, format, localeId || this.localeId);\n    };\n    /**\n     * Returns the date names from the current locale based on the option.\n     *\n     * The available `type` values are:\n     * - `era`\n     * - `year`\n     * - `quarter`\n     * - `month`\n     * - `week`\n     * - `day`\n     * - `dayperiod`\n     * - `hour`\n     * - `minute`\n     * - `second`\n     * - `zone`\n     *\n     * The available `nameType` values are:\n     * - `wide`\n     * - `narrow`\n     * - `short`\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    CldrIntlService.prototype.dateFieldName = function (options, localeId) {\n        return intl_members_1.dateFieldName(options, localeId || this.localeId);\n    };\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * The available type values are:\n     * - `day`\n     * - `dayperiod`\n     * - `months`\n     * - `quarters`\n     * - `eras`\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    CldrIntlService.prototype.dateFormatNames = function (options, localeId) {\n        return intl_members_1.dateFormatNames(localeId || this.localeId, options);\n    };\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    CldrIntlService.prototype.splitDateFormat = function (format, localeId) {\n        return intl_members_1.splitDateFormat(format, localeId || this.localeId);\n    };\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    CldrIntlService.prototype.numberSymbols = function (localeId) {\n        return intl_members_1.numberSymbols(localeId || this.localeId);\n    };\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    CldrIntlService.prototype.firstDay = function (localeId) {\n        return intl_members_1.firstDay(localeId || this.localeId);\n    };\n    /**\n     * Returns the start and end index of the locale weekend starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The the start and end index of the locale weekend (0 == Sunday).\n     */\n    CldrIntlService.prototype.weekendRange = function (localeId) {\n        return intl_members_1.weekendRange(localeId || this.localeId);\n    };\n    CldrIntlService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__param(0, core_1.Inject(core_1.LOCALE_ID)),\n        tslib_1.__metadata(\"design:paramtypes\", [String])\n    ], CldrIntlService);\n    return CldrIntlService;\n}(IntlService));\nexports.CldrIntlService = CldrIntlService;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCA+BsC,AAK3B;;;;;;;;;;;;;;;;iEAES;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA6MsB,AACd;;;;;;;;;;kQAGJ;;;;"}