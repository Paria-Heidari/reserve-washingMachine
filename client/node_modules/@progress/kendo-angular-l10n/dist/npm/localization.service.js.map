{"version":3,"file":"localization.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-l10n/dist/npm/localization.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar message_service_1 = require(\"./message.service\");\nvar rtl_1 = require(\"./rtl\");\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Localization prefix for the component messages.\n *\n * For internal use.\n * @hidden\n */\nexports.L10N_PREFIX = new core_1.InjectionToken('Localization key prefix');\n/**\n * Component localization service.\n *\n * For internal use.\n * @hidden\n */\nvar LocalizationService = /** @class */ (function () {\n    function LocalizationService(prefix, messageService, _rtl) {\n        var _this = this;\n        this.prefix = prefix;\n        this.messageService = messageService;\n        this._rtl = _rtl;\n        this.changes = new rxjs_1.BehaviorSubject({ rtl: this._rtl });\n        this.dictionary = {};\n        if (messageService) {\n            this.subscription = messageService.changes\n                .pipe(operators_1.map(function (_a) {\n                var rtl = _a.rtl;\n                return rtl !== undefined ? rtl : _this._rtl;\n            }), operators_1.tap(function (rtl) { return _this._rtl = rtl; }))\n                .subscribe(function (rtl) {\n                _this.dictionary = {};\n                _this.changes.next({ rtl: rtl });\n            });\n        }\n    }\n    Object.defineProperty(LocalizationService.prototype, \"rtl\", {\n        get: function () {\n            return this._rtl;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LocalizationService.prototype.ngOnDestroy = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    };\n    LocalizationService.prototype.get = function (shortKey) {\n        var key = this.key(shortKey);\n        return this.dictionary[key];\n    };\n    LocalizationService.prototype.register = function (shortKey, value, override) {\n        if (override === void 0) { override = false; }\n        var key = this.key(shortKey);\n        var message = value;\n        if (!override) {\n            if (this.dictionary.hasOwnProperty(key)) {\n                return;\n            }\n            message = this.defaultValue(key, value);\n        }\n        this.dictionary[key] = message;\n    };\n    LocalizationService.prototype.notifyChanges = function () {\n        this.changes.next({ rtl: this.rtl });\n    };\n    LocalizationService.prototype.key = function (shortKey) {\n        return this.prefix + '.' + shortKey;\n    };\n    LocalizationService.prototype.defaultValue = function (key, value) {\n        if (!this.messageService) {\n            return value;\n        }\n        var alt = this.messageService.get(key);\n        return (alt === undefined) ? value : alt;\n    };\n    LocalizationService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__param(0, core_1.Inject(exports.L10N_PREFIX)),\n        tslib_1.__param(1, core_1.Optional()),\n        tslib_1.__param(2, core_1.Optional()), tslib_1.__param(2, core_1.Inject(rtl_1.RTL)),\n        tslib_1.__metadata(\"design:paramtypes\", [String, message_service_1.MessageService, Boolean])\n    ], LocalizationService);\n    return LocalizationService;\n}());\nexports.LocalizationService = LocalizationService;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CA6D8C,AAClB;;;;;;;;;;;;;;;;;;;kNAKA;;;;"}