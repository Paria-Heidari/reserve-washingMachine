{"version":3,"file":"localization.service.js","sources":["/Users/paria/workspace/washIt/client/node_modules/@progress/kendo-angular-l10n/dist/es2015/localization.service.js"],"sourcesContent":["/**-----------------------------------------------------------------------------------------\n* Copyright Â© 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as tslib_1 from \"tslib\";\nimport { Inject, Injectable, Optional, InjectionToken } from '@angular/core';\nimport { MessageService } from './message.service';\nimport { RTL } from './rtl';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n/**\n * Localization prefix for the component messages.\n *\n * For internal use.\n * @hidden\n */\nexport const L10N_PREFIX = new InjectionToken('Localization key prefix');\n/**\n * Component localization service.\n *\n * For internal use.\n * @hidden\n */\nlet LocalizationService = class LocalizationService {\n    constructor(prefix, messageService, _rtl) {\n        this.prefix = prefix;\n        this.messageService = messageService;\n        this._rtl = _rtl;\n        this.changes = new BehaviorSubject({ rtl: this._rtl });\n        this.dictionary = {};\n        if (messageService) {\n            this.subscription = messageService.changes\n                .pipe(map(({ rtl }) => rtl !== undefined ? rtl : this._rtl), tap(rtl => this._rtl = rtl))\n                .subscribe(rtl => {\n                this.dictionary = {};\n                this.changes.next({ rtl });\n            });\n        }\n    }\n    get rtl() {\n        return this._rtl;\n    }\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    get(shortKey) {\n        const key = this.key(shortKey);\n        return this.dictionary[key];\n    }\n    register(shortKey, value, override = false) {\n        const key = this.key(shortKey);\n        let message = value;\n        if (!override) {\n            if (this.dictionary.hasOwnProperty(key)) {\n                return;\n            }\n            message = this.defaultValue(key, value);\n        }\n        this.dictionary[key] = message;\n    }\n    notifyChanges() {\n        this.changes.next({ rtl: this.rtl });\n    }\n    key(shortKey) {\n        return this.prefix + '.' + shortKey;\n    }\n    defaultValue(key, value) {\n        if (!this.messageService) {\n            return value;\n        }\n        const alt = this.messageService.get(key);\n        return (alt === undefined) ? value : alt;\n    }\n};\nLocalizationService = tslib_1.__decorate([\n    Injectable(),\n    tslib_1.__param(0, Inject(L10N_PREFIX)),\n    tslib_1.__param(1, Optional()),\n    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RTL)),\n    tslib_1.__metadata(\"design:paramtypes\", [String, MessageService, Boolean])\n], LocalizationService);\nexport { LocalizationService };\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mOA2DC;0CACyC,AACzB;;;;;;;"}